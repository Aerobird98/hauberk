// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.5.0-dev.1.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      P.RangeError_checkNotNegative(takeCount, "takeCount");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
      return new H.TakeIterable(iterable, takeCount, [$E]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2,
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST6(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t1, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ";
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], [P.String]);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST();
      hooks = H.applyHooksTransformer(C.C_JS_CONST0, H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5(C.C_JS_CONST6), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern === "string")
        return H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof H.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, H.escapeReplacement(replacement));
      }
      if (pattern == null)
        H.throwExpression(H.argumentErrorValue(pattern));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    ConstantMap: function ConstantMap() {
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_current = _.__js_helper$_cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$attributes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$name$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    _addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    ceil$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).ceil$0(receiver);
    },
    clamp$2$n: function(receiver, a0, a1) {
      return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    contains$2$asx: function(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    remove$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    setInnerHtml$2$validator$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).setInnerHtml$2$validator(receiver, a0, a1);
    },
    split$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toInt$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._SyncCompleter(new P._Future($.Zone__current, [$T]), [$T]), [$T]);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._completer.future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var future, _null = null,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction),
        t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(thenCallback, errorCallback, _null);
      else if (!!t1.$isFuture)
        object.then$1$2$onError(thenCallback, errorCallback, _null);
      else {
        future = new P._Future($.Zone__current, [null]);
        H.assertSubtypeOfRuntimeType(object, null);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$1$2(thenCallback, _null, _null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _IterationMarker_yieldStar: function(values) {
      return new P._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration: function() {
      return C._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError: function(error) {
      return new P._IterationMarker(error, 3);
    },
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, [$T]);
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t1._zone;
            t2 = asyncError.error;
            t3 = asyncError.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || t3 === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone;
            t4.toString;
            t4 = t4 == zone;
            if (!t4)
              zone.toString;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            t1 = t1._zone;
            t2 = sourceResult.error;
            t3 = sourceResult.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if (t1 === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t2,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), {func: 1, ret: -1}));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      if (stream == null)
        H.throwExpression(P.ArgumentError$notNull("stream"));
      return new P._StreamIterator([$T]);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._completer = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _AsyncAwaitCompleter_complete_closure: function _AsyncAwaitCompleter_complete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _AsyncAwaitCompleter_completeError_closure: function _AsyncAwaitCompleter_completeError_closure(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.st = t2;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    _Completer: function _Completer() {
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._cell = _set._first;
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: function(x) {
      return x;
    },
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, _i, element;
      for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
        element = iterable[_i];
        map.$indexSet(0, key.call$1(element), P.collection_MapBase__id$closure().call$1(element));
      }
    },
    ListQueue$: function($E) {
      var t1 = new P.ListQueue([$E]),
        t2 = new Array(8);
      t2.fixed$length = Array;
      t1.set$_table(H.setRuntimeTypeInfo(t2, [$E]));
      return t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._collection$_element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    Queue: function Queue() {
    },
    ListQueue: function ListQueue(t0) {
      var _ = this;
      _._table = null;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t0;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    _SetBase: function _SetBase() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    int_parse: function(source) {
      var value = H.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return list;
    },
    String_String$fromCharCodes: function(charCodes) {
      var len, end;
      if (charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [P.int], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(0, null, len);
        return H.Primitives_stringFromCharCodes(end < len ? C.JSArray_methods.sublist$2(charCodes, 0, end) : charCodes);
      }
      return P.String__stringFromIterable(charCodes, 0, null);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var i, list,
        it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      for (; it.moveNext$0();)
        list.push(it.get$current());
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    DateTime$now: function() {
      return new P.DateTime(Date.now(), false);
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(milliseconds, seconds) {
      return new P.Duration(1000000 * seconds + 1000 * milliseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    FormatException$: function(message, source) {
      return new P.FormatException(message, source);
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _Random$: function(seed) {
      var t1 = new P._Random();
      t1._Random$1(seed);
      return t1;
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
      this._hi = this._lo = 0;
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    ScriptElement: function ScriptElement() {
    },
    SvgElement: function SvgElement() {
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      return t1 == null ? $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0) : t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null)
        t1 = $.Device__isWebKit = !H.boolConversionCheck(P.Device_isOpera()) && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      return t1;
    }
  },
  W = {
    CanvasElement_CanvasElement: function(height, width) {
      var e = document.createElement("canvas");
      if (width != null)
        e.width = width;
      if (height != null)
        e.height = height;
      return e;
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1 = document.body,
        fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement");
    },
    Element__safeTagName: function(element) {
      var t1, t2, exception,
        result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t2 = t1.get$tagName(element);
        if (typeof t2 === "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
      var t1 = new Option(data, value, defaultSelected, selected);
      return t1;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event),
        t2 = t1 != null;
      if (t2 && true) {
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._addEventListener$3$x(_target, _eventType, t1, false);
      }
      return new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
    },
    _Html5NodeValidator$: function(uriPolicy) {
      var e = document.createElement("a"),
        t1 = new W._SameOriginUriPolicy(e, window.location);
      t1 = new W._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
      var t1, t2, t3;
      H.interceptedTypeCheck(element, "$isElement");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
      t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    NodeValidatorBuilder$common: function() {
      var t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
      C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
      return new W.NodeValidatorBuilder(t1);
    },
    _SimpleNodeValidator$: function(uriPolicy, allowedAttributes, allowedElements) {
      var t1 = P.String;
      t1 = new W._SimpleNodeValidator(P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), uriPolicy);
      t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(uriPolicy, allowedAttributes, allowedElements, null);
      return t1;
    },
    _TemplatingNodeValidator$: function() {
      var t1 = P.String,
        t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1),
        t3 = H.getTypeArgumentByIndex(C.List_wSV, 0),
        t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]}),
        t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
      t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), null);
      t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
      return t2;
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        return $window;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return H.interceptedTypeCheck(w, "$isWindowBase");
      else
        return new W._DOMWindowCrossFrame();
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    querySelector: function(selectors) {
      return document.querySelector(selectors);
    },
    HtmlElement: function HtmlElement() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    BodyElement: function BodyElement() {
    },
    ButtonElement: function ButtonElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    EmbedElement: function EmbedElement() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    FormElement: function FormElement() {
    },
    IFrameElement: function IFrameElement() {
    },
    ImageElement: function ImageElement() {
    },
    InputElement: function InputElement() {
    },
    Location: function Location() {
    },
    MapElement: function MapElement() {
    },
    MetaElement: function MetaElement() {
    },
    MouseEvent: function MouseEvent() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    ObjectElement: function ObjectElement() {
    },
    OutputElement: function OutputElement() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    ParamElement: function ParamElement() {
    },
    SelectElement: function SelectElement() {
    },
    SlotElement: function SlotElement() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    UIEvent: function UIEvent() {
    },
    Window: function Window() {
    },
    Window_animationFrame_closure: function Window_animationFrame_closure(t0) {
      this.completer = t0;
    },
    _Attr: function _Attr() {
    },
    _DomRect: function _DomRect() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._element = t0;
    },
    _EventStream: function _EventStream() {
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator(t0, t1, t2, t3) {
      var _ = this;
      _.allowedElements = t0;
      _.allowedAttributes = t1;
      _.allowedUriAttributes = t2;
      _.uriPolicy = t3;
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    NodeValidator: function NodeValidator() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  T = {GameContent: function GameContent() {
    }, GameContent_createHero_closure: function GameContent_createHero_closure(t0) {
      this.hero = t0;
    }, DetectType: function DetectType(t0) {
      this._detection$_name = t0;
    }, DetectAction: function DetectAction() {
    },
    category0: function(cells, frequency, themes) {
      $._themes = themes;
      $._categoryFrequency = frequency;
      $._categoryCells = cells;
    },
    applyOpen: function(type) {
      return S.Cell$(type, $.$get$Motility_walk(), null, null);
    },
    furnishing: function(frequency, symmetry, template) {
      var t1, t2, t3, lines, mirrorLines, i, t4, rotateLines, x, line, y;
      $._furnishingFrequency = frequency;
      if (symmetry == null)
        symmetry = C.Symmetry_0;
      t1 = P.String;
      t2 = H.setRuntimeTypeInfo(template.split("\n"), [t1]);
      t3 = H.getTypeArgumentByIndex(t2, 0);
      lines = new H.MappedListIterable(t2, H.functionTypeCheck(new T.furnishing_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).toList$0(0);
      T._singleFurnishing(lines);
      if (symmetry === C.Symmetry_1 || symmetry === C.Symmetry_3) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (t2 = [P.int], i = 0; i < lines.length; ++i) {
          t3 = lines[i];
          t3.toString;
          C.JSArray_methods.$indexSet(mirrorLines, i, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(t3), t2)), T.furnishing_builder___mirrorCharHorizontal$closure()));
        }
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_2 || symmetry === C.Symmetry_3) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; t2 = lines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(lines[i], T.furnishing_builder___mirrorCharVertical$closure()));
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_3 || symmetry === C.Symmetry_5 || symmetry === C.Symmetry_4) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (t2 = [P.int], i = 0; t3 = lines.length, i < t3; ++i) {
          t4 = lines[i];
          t4.toString;
          C.JSArray_methods.$indexSet(mirrorLines, t3 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(t4), t2)), T.furnishing_builder___mirrorCharBoth$closure()));
        }
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_4) {
        rotateLines = H.setRuntimeTypeInfo([], [t1]);
        x = 0;
        while (true) {
          if (0 >= lines.length)
            return H.ioore(lines, 0);
          if (!(x < J.get$length$asx(lines[0])))
            break;
          for (line = "", y = 0; y < lines.length; ++y)
            line += T._rotateChar90(J.$index$asx(lines[y], x));
          C.JSArray_methods.add$1(rotateLines, line);
          ++x;
        }
        T._singleFurnishing(rotateLines);
        mirrorLines = H.setRuntimeTypeInfo(rotateLines.slice(0), [H.getTypeArgumentByIndex(rotateLines, 0)]);
        for (t1 = [P.int], i = 0; t2 = rotateLines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(rotateLines[i]), t1)), T.furnishing_builder___mirrorCharBoth$closure()));
        T._singleFurnishing(mirrorLines);
      }
    },
    _mapString: function(input, map) {
      var t1, i, t2;
      for (t1 = input.length, i = 0, t2 = ""; i < t1; ++i)
        t2 += H.S(map.call$1(input[i]));
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _mirrorCharBoth: function(input) {
      return T._mirrorCharHorizontal(T._mirrorCharVertical(input));
    },
    _mirrorCharHorizontal: function(input) {
      var _i, mirror, index, t1;
      H.stringTypeCheck(input);
      for (_i = 0; _i < 3; ++_i) {
        mirror = $._mirrorHorizontal[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    },
    _mirrorCharVertical: function(input) {
      var _i, mirror, index, t1;
      H.stringTypeCheck(input);
      for (_i = 0; _i < 3; ++_i) {
        mirror = $._mirrorVertical[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    },
    _rotateChar90: function(input) {
      var _i, rotate, index, t1;
      for (_i = 0; _i < 2; ++_i) {
        rotate = $._rotate[_i];
        index = C.JSString_methods.indexOf$1(rotate, input);
        if (index !== -1) {
          t1 = C.JSInt_methods.$mod(index + 1, 4);
          if (t1 >= rotate.length)
            return H.ioore(rotate, t1);
          return rotate[t1];
        }
      }
      return input;
    },
    _singleFurnishing: function(lines) {
      var t1, t2, t3, y, t4, x, char, t5, cell, _null = null,
        cells = M.Array2D$(J.get$length$asx(C.JSArray_methods.get$first(lines)), lines.length, _null, S.Cell);
      for (t1 = H.getTypeArgumentByIndex(cells, 0), t2 = cells._elements, t3 = cells.bounds.size.x, y = 0; y < lines.length; ++y)
        for (t4 = y * t3, x = 0; x < J.get$length$asx(C.JSArray_methods.get$first(lines)); ++x) {
          if (y >= lines.length)
            return H.ioore(lines, y);
          char = J.$index$asx(lines[y], x);
          t5 = $._categoryCells;
          if (t5 != null && t5.containsKey$1(char))
            cell = $._categoryCells.$index(0, char);
          else {
            t5 = $.$get$_applyCells();
            cell = t5.containsKey$1(char) ? t5.$index(0, char) : $.$get$_requireCells().$index(0, char);
          }
          C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType(cell, t1));
        }
      t1 = $.$get$Decor_all();
      t2 = $._categoryFrequency;
      if (t2 == null)
        t2 = $._furnishingFrequency;
      if (t2 == null)
        t2 = 1;
      t3 = $._themes;
      t1.toString;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new S.Furnishing(cells), H.getTypeArgumentByIndex(t1, 0)), _null, _null, _null, t2, t2, t3);
    },
    Symmetry: function Symmetry(t0) {
      this._furnishing_builder$_name = t0;
    },
    furnishing_closure: function furnishing_closure() {
    },
    HeroClass: function HeroClass(t0, t1, t2) {
      this.name = t0;
      this._proficiency = t1;
      this.startingItems = t2;
    },
    Histogram: function Histogram(t0, t1) {
      this._counts = t0;
      this.$ti = t1;
    },
    Histogram_add_closure: function Histogram_add_closure() {
    },
    Histogram_descending_closure: function Histogram_descending_closure(t0) {
      this.$this = t0;
    }
  },
  E = {HasteAction: function HasteAction() {
    }, FreezeActorAction: function FreezeActorAction() {
    }, PoisonAction: function PoisonAction() {
    }, BlindAction: function BlindAction() {
    }, DazzleAction: function DazzleAction() {
    }, ResistAction: function ResistAction() {
    }, _FreezeActorAction_ConditionAction_DestroyActionMixin: function _FreezeActorAction_ConditionAction_DestroyActionMixin() {
    },
    dragons: function() {
      var t1 = {},
        t2 = [P.Object],
        dragons = P.LinkedHashMap_LinkedHashMap$_literal(["forest", H.setRuntimeTypeInfo([$.$get$Element_none(), C.Color_22_117_38, C.Color_0_64_39], t2), "brown", H.setRuntimeTypeInfo([$.$get$Elements_earth(), C.Color_189_144_108, C.Color_142_82_55], t2), "blue", H.setRuntimeTypeInfo([$.$get$Elements_water(), C.Color_64_163_229, C.Color_21_87_194], t2), "white", H.setRuntimeTypeInfo([$.$get$Elements_cold(), C.Color_116_146_181, C.Color_226_223_240], t2), "purple", H.setRuntimeTypeInfo([$.$get$Elements_poison(), C.Color_173_88_219, C.Color_86_30_138], t2), "green", H.setRuntimeTypeInfo([$.$get$Elements_acid(), C.Color_131_158_13, C.Color_99_87_7], t2), "silver", H.setRuntimeTypeInfo([$.$get$Elements_lightning(), C.Color_129_231_235, C.Color_64_163_229], t2), "red", H.setRuntimeTypeInfo([$.$get$Elements_fire(), C.Color_255_122_105, C.Color_204_35_57], t2), "gold", H.setRuntimeTypeInfo([$.$get$Elements_light(), C.Color_255_238_168, C.Color_222_156_33], t2), "black", H.setRuntimeTypeInfo([$.$get$Elements_dark(), C.Color_63_75_115, C.Color_38_42_66], t2), "ethereal", H.setRuntimeTypeInfo([$.$get$Elements_spirit(), C.Color_15_130_148, C.Color_26_46_150], t2)], P.String, [P.List, P.Object]);
      t1.i = 0;
      dragons.forEach$1(0, new E.dragons_closure(t1));
    },
    dragons_closure: function dragons_closure(t0) {
      this._box_0 = t0;
    },
    ConditionAction: function ConditionAction() {
    },
    Condition: function Condition() {
    },
    HasteCondition: function HasteCondition() {
      this._actor = null;
    },
    ColdCondition: function ColdCondition() {
      this._actor = null;
    },
    PoisonCondition: function PoisonCondition() {
      this._actor = null;
    },
    BlindnessCondition: function BlindnessCondition() {
      this._actor = null;
    },
    ResistCondition: function ResistCondition() {
      this._actor = null;
    },
    PerceiveCondition: function PerceiveCondition() {
      this._actor = null;
    },
    Equipment: function Equipment(t0) {
      this.slots = t0;
    },
    Equipment_weapons_closure: function Equipment_weapons_closure() {
    },
    Equipment_length_closure: function Equipment_length_closure() {
    },
    Equipment_iterator_closure: function Equipment_iterator_closure() {
    },
    _Equipment_IterableBase_ItemCollection: function _Equipment_IterableBase_ItemCollection() {
    }
  },
  X = {EatAction: function EatAction() {
    },
    parseDrop: function($name, affixChance, depth) {
      var itemType;
      if (depth == null)
        depth = 1;
      itemType = $.$get$Items_types().tryFind$1($name);
      if (itemType != null)
        return new X._ItemDrop(itemType, depth, affixChance);
      return new X._TagDrop($name, depth, affixChance);
    },
    percentDrop: function(chance, drop, depth, affixChance) {
      return new X._PercentDrop(chance, X.parseDrop(drop, affixChance, depth));
    },
    _AllOfDrop$: function(_drops) {
      return new X._AllOfDrop(_drops);
    },
    _OneOfDrop$: function(drops) {
      var t1 = P.String;
      t1 = new X._OneOfDrop(new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, L.Drop]), [L.Drop]));
      t1._OneOfDrop$1(drops);
      return t1;
    },
    _ItemDrop: function _ItemDrop(t0, t1, t2) {
      this._type = t0;
      this._depth = t1;
      this._affixChance = t2;
    },
    _TagDrop: function _TagDrop(t0, t1, t2) {
      this._tag = t0;
      this._depth = t1;
      this._affixChance = t2;
    },
    _PercentDrop: function _PercentDrop(t0, t1) {
      this._chance = t0;
      this._drops$_drop = t1;
    },
    _AllOfDrop: function _AllOfDrop(t0) {
      this._drops = t0;
    },
    _OneOfDrop: function _OneOfDrop(t0) {
      this._drops$_drop = t0;
    },
    _OneOfDrop_closure: function _OneOfDrop_closure(t0) {
      this.$this = t0;
    },
    _RepeatDrop: function _RepeatDrop(t0, t1) {
      this._drops$_count = t0;
      this._drops$_drop = t1;
    },
    HasteMove: function HasteMove(t0, t1, t2) {
      this._haste$_duration = t0;
      this._haste$_speed = t1;
      this.rate = t2;
    },
    Archery: function Archery(t0) {
      this._sortOrder = t0;
    },
    _Archery_Discipline_TargetSkill: function _Archery_Discipline_TargetSkill() {
    },
    Region: function Region(t0) {
      this.name = t0;
    },
    Architect: function Architect(t0, t1, t2, t3) {
      var _ = this;
      _.lore = t0;
      _.stage = t1;
      _.depth = t2;
      _._owners = t3;
      _._carvedTiles = 0;
    },
    _Path: function _Path(t0, t1) {
      this.pos = t0;
      this.dir = t1;
    },
    Architecture: function Architecture() {
    },
    _LengthPathfinder: function _LengthPathfinder(t0, t1, t2, t3) {
      var _ = this;
      _._maxLength = t0;
      _.stage = t1;
      _.start = t2;
      _.end = t3;
    },
    RectIterator$: function(_rect) {
      var t1 = new X.RectIterator(_rect),
        t2 = _rect.pos;
      t1._x = t2.x - 1;
      t1._y = t2.y;
      return t1;
    },
    Rect: function Rect(t0, t1) {
      this.pos = t0;
      this.size = t1;
    },
    RectIterator: function RectIterator(t0) {
      this._rect = t0;
      this._y = this._x = null;
    }
  },
  G = {BurnActorAction: function BurnActorAction() {
    }, BurnFloorAction: function BurnFloorAction() {
    }, FreezeFloorAction: function FreezeFloorAction() {
    }, PoisonFloorAction: function PoisonFloorAction() {
    }, WindAction: function WindAction() {
    }, LightFloorAction: function LightFloorAction() {
    }, _BurnActorAction_Action_DestroyActionMixin: function _BurnActorAction_Action_DestroyActionMixin() {
    }, _BurnFloorAction_Action_DestroyActionMixin: function _BurnFloorAction_Action_DestroyActionMixin() {
    }, _FreezeFloorAction_Action_DestroyActionMixin: function _FreezeFloorAction_Action_DestroyActionMixin() {
    }, _PoisonFloorAction_Action_DestroyActionMixin: function _PoisonFloorAction_Action_DestroyActionMixin() {
    }, RingSelfAction: function RingSelfAction() {
    }, RingFromAction: function RingFromAction() {
    }, Swordfighting: function Swordfighting(t0) {
      this._sortOrder = t0;
    },
    _RiverPoint$: function(x, y, radius) {
      return new G._RiverPoint(x, y, radius == null ? $.$get$rng().float$2(0, 1, 3) : radius);
    },
    River: function River() {
      this._region = this._style = this._architect = null;
    },
    _RiverPoint: function _RiverPoint(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.radius = t2;
    },
    Element$: function($name, abbreviation, experience, attack, destroyMessage, emanates, floor) {
      return new G.Element0($name, emanates === true, experience);
    },
    Element0: function Element0(t0, t1, t2) {
      this.name = t0;
      this.emanates = t1;
      this.experience = t2;
    },
    Hero$: function(game, pos, save) {
      var t3, t4,
        t1 = P.LinkedHashSet_LinkedHashSet(B.Monster),
        t2 = [P.double];
      t2 = H.setRuntimeTypeInfo([new D.Property(t2), new D.Property(t2)], [[D.Property, P.double]]);
      t3 = pos.x;
      t4 = pos.y;
      t2 = new G.Hero(save, t1, t2, new D.Property([P.int]), game, new Y.Energy(), new E.HasteCondition(), new E.ColdCondition(), new E.PoisonCondition(), new E.BlindnessCondition(), new E.BlindnessCondition(), new E.PerceiveCondition(), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, E.ResistCondition), new L.Vec(t3, t4));
      t2.Actor$3(game, t3, t4);
      t2.Hero$3(game, pos, save);
      return t2;
    },
    experienceLevel: function(experience) {
      var level, t1;
      for (level = 1; level <= 50; ++level) {
        t1 = G.experienceLevelCost(level);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (experience < t1)
          return level - 1;
      }
      return 50;
    },
    experienceLevelCost: function(level) {
      if (level > 50)
        return;
      return C.JSNumber_methods.toInt$0(Math.pow(level - 1, 3)) * 1000;
    },
    Hero: function Hero(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.save = t0;
      _._seenMonsters = t1;
      _._heftScales = t2;
      _._level = t3;
      _.game = t4;
      _.energy = t5;
      _.haste = t6;
      _.cold = t7;
      _.poison = t8;
      _.blindness = t9;
      _.dazzle = t10;
      _.perception = t11;
      _.resistances = t12;
      _._pos = t13;
    },
    Hero_refreshProperties_closure: function Hero_refreshProperties_closure(t0, t1) {
      this.$this = t0;
      this.level = t1;
    },
    Hero_refreshProperties_closure0: function Hero_refreshProperties_closure0(t0, t1, t2) {
      this.$this = t0;
      this.heftScale = t1;
      this.weapon = t2;
    }
  },
  N = {FlowSelfAction: function FlowSelfAction() {
    }, FlowFromAction: function FlowFromAction() {
    },
    RaceStats$: function(_race, _max, seed) {
      var t1 = new N.RaceStats(_race, _max, seed, H.setRuntimeTypeInfo([], [[P.Map, D.Stat, P.int]]));
      t1.RaceStats$3(_race, _max, seed);
      return t1;
    },
    Race: function Race(t0, t1) {
      this.name = t0;
      this.stats = t1;
    },
    RaceStats: function RaceStats(t0, t1, t2, t3) {
      var _ = this;
      _._race = t0;
      _._max = t1;
      _.seed = t2;
      _._stats = t3;
    },
    RaceStats_lerp: function RaceStats_lerp(t0) {
      this.level = t0;
    },
    MotilityFlow$: function(stage, start, _motility, avoidActors, maxDistance) {
      var t1 = L.Vec;
      t1 = new N.MotilityFlow(_motility, avoidActors !== false, false, stage, start, maxDistance, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t1]), H.setRuntimeTypeInfo([], [t1]));
      t1.Flow$3$maxDistance(stage, start, maxDistance);
      return t1;
    },
    Flow: function Flow() {
    },
    Flow__processNext_processNeighbor: function Flow__processNext_processNeighbor(t0, t1, t2) {
      this.$this = t0;
      this.start = t1;
      this.parentCost = t2;
    },
    MotilityFlow: function MotilityFlow(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._motility = t0;
      _._avoidActors = t1;
      _._avoidSubstances = t2;
      _.stage = t3;
      _._start = t4;
      _._maxDistance = t5;
      _._offset = _._costs = null;
      _._open = t6;
      _._found = t7;
    },
    Rng$: function(seed) {
      var t1 = new N.Rng(),
        t2 = P._Random$(seed);
      t1._random = t2;
      return t1;
    },
    Rng: function Rng() {
      this._random = null;
    }
  },
  O = {HealAction: function HealAction() {
    }, BoltMove: function BoltMove(t0, t1) {
      this.attack = t0;
      this.rate = t1;
    }, HealMove: function HealMove(t0, t1) {
      this._amount = t0;
      this.rate = t1;
    }, WhipMastery: function WhipMastery(t0) {
      this._sortOrder = t0;
    }, _WhipMastery_MasteryDiscipline_TargetSkill: function _WhipMastery_MasteryDiscipline_TargetSkill() {
    },
    Log_conjugate: function(text, pronoun) {
      return O.Log__categorize(text, false, pronoun === C.Pronoun_you_you_your || pronoun === C.Pronoun_they_them_their);
    },
    Log__categorize: function(text, force, isFirst) {
      var match, t1, t2, before, after,
        optionalSuffix = P.RegExp_RegExp("\\[(\\w+?)\\]"),
        irregular = P.RegExp_RegExp("\\[([^|]+)\\|([^\\]]+)\\]");
      if (force && !isFirst && !J.contains$1$asx(text, "["))
        return H.S(text) + "s";
      for (; true;) {
        match = optionalSuffix.firstMatch$1(text);
        if (match == null)
          break;
        t1 = match._match;
        t2 = t1.index;
        before = J.substring$2$s(text, 0, t2);
        after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
        if (isFirst)
          text = before + after;
        else {
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          text = before + H.S(t1[1]) + after;
        }
      }
      for (; true;) {
        match = irregular.firstMatch$1(text);
        if (match == null)
          break;
        t1 = match._match;
        t2 = t1.index;
        before = J.substring$2$s(text, 0, t2);
        after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
        t2 = t1.length;
        if (isFirst) {
          if (1 >= t2)
            return H.ioore(t1, 1);
          text = before + H.S(t1[1]) + after;
        } else {
          if (2 >= t2)
            return H.ioore(t1, 2);
          text = before + H.S(t1[2]) + after;
        }
      }
      return text;
    },
    Log: function Log(t0) {
      this.messages = t0;
    },
    Noun: function Noun(t0) {
      this.nounText = t0;
    },
    Pronoun: function Pronoun(t0, t1, t2) {
      this.subjective = t0;
      this.objective = t1;
      this.possessive = t2;
    },
    LogType: function LogType(t0) {
      this._log$_name = t0;
    },
    Message: function Message(t0) {
      this.text = t0;
      this.count = 1;
    },
    Inventory$: function($location, _capacity) {
      var t1 = H.setRuntimeTypeInfo([], [R.Item]);
      return new O.Inventory($location, t1, _capacity);
    },
    ItemLocation: function ItemLocation(t0) {
      this.name = t0;
    },
    ItemCollection: function ItemCollection() {
    },
    Inventory: function Inventory(t0, t1, t2) {
      var _ = this;
      _.location = t0;
      _._items = t1;
      _._capacity = t2;
      _._lastUnequipped = null;
    },
    AddItemResult: function AddItemResult(t0) {
      this.remaining = t0;
    },
    _Inventory_IterableMixin_ItemCollection: function _Inventory_IterableMixin_ItemCollection() {
    },
    Shop: function Shop(t0, t1) {
      this._drop = t0;
      this.name = t1;
    },
    Move: function Move() {
    },
    RangedMove: function RangedMove() {
    }
  },
  F = {IlluminateSelfAction: function IlluminateSelfAction() {
    },
    floorDrop: function(drop, endFrequency, $location, startFrequency) {
      var t1 = $.$get$_floorDrops();
      t1.toString;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new F.FloorDrop(drop), H.getTypeArgumentByIndex(t1, 0)), null, 1, 100, startFrequency, endFrequency, null);
    },
    FloorDrop: function FloorDrop(t0) {
      this.drop = t0;
    },
    ArchitecturalStyle_pick: function(depth) {
      var result, count, hasFillable, style,
        t1 = $.$get$ArchitecturalStyle__styles(),
        t2 = t1._resources;
      if (t2.get$isEmpty(t2))
        F.ArchitecturalStyle__initialize();
      result = H.setRuntimeTypeInfo([], [F.ArchitecturalStyle]);
      count = Math.min($.$get$rng().taper$2(1, 10), 5);
      hasFillable = false;
      while (true) {
        if (!(!hasFillable || result.length < count))
          break;
        style = t1.tryChoose$1(depth);
        if (style.canFill)
          hasFillable = true;
        if (!C.JSArray_methods.contains$1(result, style))
          C.JSArray_methods.add$1(result, style);
      }
      return result;
    },
    ArchitecturalStyle__initialize: function() {
      var t2,
        _s8_ = "catacomb",
        _s11_ = "animal herp",
        t1 = new F.ArchitecturalStyle__initialize_addStyle();
      t1.call$5$create$decor$decorDensity$startFrequency("dungeon", new F.ArchitecturalStyle__initialize_closure(), "dungeon", 0.09, 10);
      t1.call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency(_s8_, new F.ArchitecturalStyle__initialize_closure0(), _s8_, 0.02, 2, "bat bug humanoid natural", 1);
      t1.call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency("cavern", new F.ArchitecturalStyle__initialize_closure1(), "glowing-moss", 0.3, 1, "animal bat bug natural", 0.2);
      t1.call$7$canFill$create$decor$decorDensity$monsterDensity$monsters("lake", false, new F.ArchitecturalStyle__initialize_closure2(), "water", 0.01, 0, _s11_);
      t1.call$7$canFill$create$decor$decorDensity$monsterDensity$monsters("river", false, new F.ArchitecturalStyle__initialize_closure3(), "water", 0.01, 0, _s11_);
      t2 = new F.ArchitecturalStyle__initialize_pit(t1);
      t2.call$3$end$start("bug", 40, 1);
      t2.call$3$end$start("jelly", 50, 5);
      t2.call$3$end$start("bat", 40, 10);
      t2.call$3$end$start("rodent", 50, 1);
      t2.call$3$end$start("snake", 60, 8);
      t2.call$3$end$start("plant", 40, 15);
      t2.call$3$end$start("eye", 100, 20);
      t2.call$3$end$start("dragon", 100, 60);
      t1 = new F.ArchitecturalStyle__initialize_keep(t1);
      t1.call$3$end$start("kobold", 16, 2);
      t1.call$3$end$start("goblin", 23, 5);
      t1.call$3$end$start("saurian", 30, 10);
      t1.call$3$end$start("orc", 40, 28);
    },
    ArchitecturalStyle: function ArchitecturalStyle(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.name = t0;
      _.decorTheme = t1;
      _.decorDensity = t2;
      _.monsterGroups = t3;
      _.monsterDensity = t4;
      _.itemDensity = t5;
      _._factory = t6;
      _.canFill = t7;
    },
    ArchitecturalStyle__initialize_addStyle: function ArchitecturalStyle__initialize_addStyle() {
    },
    ArchitecturalStyle__initialize_closure: function ArchitecturalStyle__initialize_closure() {
    },
    ArchitecturalStyle__initialize_closure0: function ArchitecturalStyle__initialize_closure0() {
    },
    ArchitecturalStyle__initialize_closure1: function ArchitecturalStyle__initialize_closure1() {
    },
    ArchitecturalStyle__initialize_closure2: function ArchitecturalStyle__initialize_closure2() {
    },
    ArchitecturalStyle__initialize_closure3: function ArchitecturalStyle__initialize_closure3() {
    },
    ArchitecturalStyle__initialize_pit: function ArchitecturalStyle__initialize_pit(t0) {
      this.addStyle = t0;
    },
    ArchitecturalStyle__initialize_pit_closure: function ArchitecturalStyle__initialize_pit_closure(t0) {
      this.monsterGroup = t0;
    },
    ArchitecturalStyle__initialize_keep: function ArchitecturalStyle__initialize_keep(t0) {
      this.addStyle = t0;
    },
    ArchitecturalStyle__initialize_keep_closure: function ArchitecturalStyle__initialize_keep_closure() {
    },
    Lake: function Lake() {
      this._region = this._style = this._architect = null;
    },
    Lighting_emanationForLevel: function(level) {
      switch (level) {
        case 1:
          return 40;
        case 2:
          return 56;
        case 3:
          return 72;
        case 4:
          return 96;
        case 5:
          return 120;
        case 6:
          return 160;
        case 7:
          return 200;
        case 8:
          return 240;
        default:
          if (level <= 0)
            return 0;
          return 255;
      }
    },
    Lighting: function Lighting(t0, t1, t2, t3, t4) {
      var _ = this;
      _._lighting$_stage = t0;
      _._floorLight = t1;
      _._actorLight = t2;
      _._fov = t3;
      _._lighting$_queue = t4;
      _._visibilityDirty = _._actorLightDirty = _._floorLightDirty = true;
    },
    Lighting__lightWalls_checkNeighbor: function Lighting__lightWalls_checkNeighbor(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.x = t2;
      _.y = t3;
    },
    Lighting__process_checkNeighbor: function Lighting__process_checkNeighbor(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.pos = t1;
      _.parentLight = t2;
      _.tiles = t3;
      _.attenuate = t4;
    }
  },
  Q = {MappingAction: function MappingAction() {
    }, PerceiveAction: function PerceiveAction() {
    }, _OpenTileAction: function _OpenTileAction() {
    }, OpenBarrelAction: function OpenBarrelAction() {
    }, OpenChestAction: function OpenChestAction() {
    }, AmputateMove: function AmputateMove(t0, t1, t2) {
      this._amputate$_body = t0;
      this._part = t1;
      this.rate = t2;
    },
    Skills_find: function($name) {
      var t1;
      H.stringTypeCheck($name);
      t1 = $.$get$Skills__byName();
      if (!t1.containsKey$1($name))
        throw H.wrapException(P.ArgumentError$("Unknown skill '" + H.S($name) + "'."));
      return t1.$index(0, $name);
    },
    Skills_closure: function Skills_closure() {
    },
    Cavern: function Cavern() {
      this._region = this._style = this._architect = null;
    },
    Dungeon: function Dungeon(t0) {
      var _ = this;
      _._dungeon$_density = t0;
      _._region = _._style = _._architect = null;
    },
    PaintStyle$: function(closedDoor, floor, openDoor, wall) {
      return new Q.PaintStyle(floor, wall, closedDoor, openDoor);
    },
    Painter: function Painter(t0, t1, t2) {
      var _ = this;
      _._decorator = t0;
      _._painter$_architect = t1;
      _._architecture = t2;
      _._painted = 0;
    },
    PaintStyle: function PaintStyle(t0, t1, t2, t3) {
      var _ = this;
      _._floor = t0;
      _._wall = t1;
      _._closedDoor = t2;
      _._openDoor = t3;
    },
    Motility$_: function(_bitMask) {
      return new Q.Motility(_bitMask);
    },
    Motility: function Motility(t0) {
      this._bitMask = t0;
    },
    TilePortal: function TilePortal(t0) {
      this.name = t0;
    },
    TileType: function TileType(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.emanation = t1;
      _.appearance = t2;
      _.motility = t3;
    },
    Tile: function Tile(t0) {
      var _ = this;
      _.type = null;
      _._isOccluded = false;
      _._appliedEmanation = _.illumination = _._fallOff = 0;
      _._isExplored = false;
      _.element = t0;
    },
    main: function() {
      var i, t1, t2, t3;
      H.printString("!");
      for (i = 1; i <= 100; ++i)
        $.$get$depthSelect().appendChild(W.OptionElement_OptionElement$_(C.JSInt_methods.toString$0(i), C.JSInt_methods.toString$0(i), null, i === 1));
      t1 = $.$get$depthSelect();
      t1.toString;
      t2 = W.Event;
      W._EventStreamSubscription$(t1, "change", H.functionTypeCheck(new Q.main_closure(), {func: 1, ret: -1, args: [t2]}), false, t2);
      t2 = $.$get$canvas();
      t2.toString;
      t1 = W.MouseEvent;
      t3 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(t2, "click", H.functionTypeCheck(new Q.main_closure0(), t3), false, t1);
      t2 = $.$get$stateCanvas();
      t2.toString;
      W._EventStreamSubscription$(t2, "click", H.functionTypeCheck(new Q.main_closure1(), t3), false, t1);
      t2 = $.$get$stateCanvas();
      t2.toString;
      W._EventStreamSubscription$(t2, "mousemove", H.functionTypeCheck(new Q.main_closure2(), t3), false, t1);
      Q.generate();
    },
    hover: function(pos) {
      var stage, t1, t2, t3;
      if (pos.$eq(0, $.hoverPos))
        return;
      $.hoverPos = pos;
      stage = $._game._stage;
      t1 = stage.tiles;
      if (t1.bounds.contains$1(0, pos)) {
        t2 = "<h2>Hover " + pos.toString$0(0) + "</h2>";
        t3 = stage._actorsByTile.$index(0, pos);
        if (t3 != null)
          t2 += "<p>" + t3.toString$0(0) + "</p>\n";
        for (t3 = stage.itemsAt$1(pos)._items, t3 = new J.ArrayIterator(t3, t3.length, [H.getTypeArgumentByIndex(t3, 0)]); t3.moveNext$0();)
          t2 += "<p>" + H.S(t3._current) + "</p>\n";
        t1 = t2 + ("<p>" + t1.$index(0, pos).type.name + "</p>");
      } else
        t1 = "";
      J.setInnerHtml$2$validator$x(document.querySelector("div[id=hover]"), t1.charCodeAt(0) == 0 ? t1 : t1, $.$get$validator());
    },
    generate: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$returnValue, t1, t2, t3, t4, t5, t6, t7, t8, t9, stage, canvas, scale, canvasWidth, canvasHeight, e, start, monsters, _i, actor, breed, glyph, items, item;
      var $async$generate = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.hues.clear$0(0);
              $.Debug_densityMap = $.Keep_debugJunctions = null;
              t1 = $.$get$content();
              t2 = $.$get$save();
              t3 = P.int_parse($.$get$depthSelect().value);
              t4 = H.setRuntimeTypeInfo([], [O.Message]);
              t5 = V.Action;
              t6 = P.ListQueue$(t5);
              t5 = H.setRuntimeTypeInfo([], [t5]);
              t7 = H.setRuntimeTypeInfo([], [D.Event0]);
              t8 = [L.Vec];
              t9 = H.setRuntimeTypeInfo([], t8);
              t3 = new D.Game(t1, t2, new O.Log(t4), t6, t5, t7, new Y.Energy(), t9, t3);
              t1 = L.Stage$(80, 60, t3);
              t3._stage = t1;
              C.JSArray_methods.addAll$1(t9, t1.tiles.bounds.inflate$1(-1));
              t1 = $.$get$rng();
              t1.toString;
              C.JSArray_methods.shuffle$1(H.assertSubtype(t9, "$isList", t8, "$asList"), t1._random);
              $._game = t3;
              stage = t3._stage;
              t1 = stage.tiles.bounds.size;
              t8 = t1.x;
              t1 = t1.y;
              canvas = $.$get$canvas();
              if (canvas == null) {
                scale = 1;
                canvas = W.CanvasElement_CanvasElement(null, null);
                canvasWidth = 8 * t8;
                canvasHeight = 8 * t1;
                canvas.width = canvasWidth * scale;
                canvas.height = canvasHeight * scale;
                t2 = canvas.style;
                t4 = "" + canvasWidth + "px";
                t2.width = t4;
                t2 = canvas.style;
                t4 = "" + canvasHeight + "px";
                t2.height = t4;
                document.body.appendChild(canvas);
              } else
                scale = 1;
              t2 = L.Glyph;
              t4 = M.Array2D$(t8, t1, null, t2);
              t2 = M.Array2D$(t8, t1, C.Glyph_kVM, t2);
              t5 = document;
              e = t5.createElement("img");
              e.src = "../font_8.png";
              $.terminal = S.RetroTerminal$_(new D.Display(t4, t2), 8, 8, canvas, e, scale);
              t2 = $.$get$canvas();
              t8 *= 8;
              t2.width = t8;
              t1 *= 8;
              t2.height = t1;
              t2 = $.$get$stateCanvas();
              t2.width = t8;
              t2.height = t1;
              start = new P.DateTime(Date.now(), false);
              t1 = $._game.generate$0(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]);
            case 3:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t1.get$current();
              Q.render(true);
              $async$goto = C.JSInt_methods._tdivFast$1(P.Duration$(Date.now() - start._value, 0)._duration, 1000) > 60 ? 5 : 6;
              break;
            case 5:
              // then
              $async$goto = 7;
              return P._asyncAwait(C.Window_methods.get$animationFrame(window), $async$generate);
            case 7:
              // returning from await.
              start = new P.DateTime(Date.now(), false);
            case 6:
              // join
              if ($._game !== t3) {
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $._game._stage._lighting.refresh$0();
              Q.render(false);
              t1 = B.Breed;
              t2 = P.int;
              monsters = new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t1, t2), [t1]);
              for (t1 = stage._actors, t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                actor = t1[_i];
                if (actor instanceof B.Monster)
                  monsters.add$1(0, actor._breed);
              }
              for (t1 = monsters.descending$0(), t3 = t1.length, t4 = [t2], t6 = P.String, _i = 0, t7 = '    <thead>\n    <tr>\n      <td>Count</td>\n      <td colspan="2">Breed</td>\n      <td>Depth</td>\n      <td>Exp.</td>\n      <!--<td>Drops</td>-->\n    </tr>\n    </thead>\n    <tbody>\n    '; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i, t7 = t9) {
                breed = t1[_i];
                glyph = breed.appearance;
                t8 = glyph.fore;
                t8 = t7 + ("      <tr>\n        <td>" + H.S(monsters.count$1(breed)) + '</td>\n        <td>\n          <pre><span style="color: ' + ("rgb(" + t8.r + ", " + t8.g + ", " + t8.b + ")") + '">' + P.String_String$fromCharCodes(H.setRuntimeTypeInfo([glyph.char], t4)) + "</span></pre>\n        </td>\n        <td>" + H.S(O.Log__categorize(breed._breed$_name, false, true)) + "</td>\n        <td>" + breed.depth + '</td>\n        <td class="r">' + breed.get$experience() + "</td>\n        <td>\n      ");
                t7 = breed.attacks;
                t9 = H.getTypeArgumentByIndex(t7, 0);
                t9 = t8 + new H.MappedListIterable(t7, H.functionTypeCheck(new Q.generate_closure(breed), {func: 1, ret: t6, args: [t9]}), [t9, t6]).join$1(0, ", ") + "</td><td>" + breed.flags.toString$0(0) + "</td></tr>";
              }
              t1 = t7 + "</tbody>";
              J.setInnerHtml$2$validator$x(t5.querySelector("table[id=monsters]"), t1.charCodeAt(0) == 0 ? t1 : t1, $.$get$validator());
              items = new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t6, t2), [t6]);
              for (t1 = stage.get$allItems(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
                items.add$1(0, J.toString$0$(t1.get$current()));
              for (t1 = items.descending$0(), t2 = t1.length, _i = 0, t3 = '    <thead>\n    <tr>\n      <td>Count</td>\n      <td width="300px">Item</td>\n    </tr>\n    </thead>\n    <tbody>\n    '; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                item = t1[_i];
                t3 += "    <tr>\n      <td>" + H.S(items.count$1(item)) + "</td>\n      <td>" + H.S(item) + "</td>\n    </tr>\n    ";
              }
              J.setInnerHtml$2$validator$x(t5.querySelector("table[id=items]"), t3.charCodeAt(0) == 0 ? t3 : t3, $.$get$validator());
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$generate, $async$completer);
    },
    render: function(showInfo) {
      var t1, t2, t3, t4, t5, t6, y, t7, x, t8, glyph, light, t9, t10, it, context, architecture, max, density, junction,
        stage = $._game._stage;
      for (t1 = stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t4 = [L.Glyph], t5 = [R.Item], t2 = t2.x, t1 = t1._elements, t6 = t1.length, y = 0; y < t3; ++y)
        for (t7 = y * t2, x = 0; x < t2; ++x) {
          t8 = t7 + x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t1, t8);
          t8 = t1[t8];
          glyph = t8.type.appearance;
          if (!(glyph instanceof L.Glyph)) {
            H.subtypeCast(glyph, "$isList", t4, "$asList");
            glyph = glyph[C.JSInt_methods.$mod(K.hashPoint(x, y), glyph.length)];
          }
          light = C.JSNumber_methods.clamp$2((1 - t8.illumination / 128) * 0.5, 0, 1);
          t8 = glyph.char;
          t9 = glyph.fore.blend$2(C.Color_0_0_0, light);
          t10 = glyph.back.blend$2(C.Color_0_0_0, light);
          glyph = new L.Glyph(t8, t9, t10);
          t8 = stage._itemsByTile.$index(0, new L.Vec(x, y));
          if (t8 == null)
            t8 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t5), null);
          t8 = t8._items;
          t9 = [H.getTypeArgumentByIndex(t8, 0)];
          if (new J.ArrayIterator(t8, t8.length, t9).moveNext$0()) {
            it = new J.ArrayIterator(t8, t8.length, t9);
            if (!it.moveNext$0())
              H.throwExpression(H.IterableElementError_noElement());
            glyph = it._current.type.appearance;
          }
          t8 = stage._actorsByTile;
          t9 = t8._elements;
          t8 = y * t8.bounds.size.x + x;
          if (t8 < 0 || t8 >= t9.length)
            return H.ioore(t9, t8);
          t8 = t9[t8];
          if (t8 != null) {
            t9 = t8.get$appearance(t8);
            if (typeof t9 === "string")
              glyph = new L.Glyph(64, C.Color_226_223_240, C.Color_0_0_0);
            else
              glyph = H.interceptedTypeCast(t8.get$appearance(t8), "$isGlyph");
          }
          $.terminal._display.setGlyph$3(x, y, glyph);
        }
      $.terminal.render$0();
      context = $.$get$stateCanvas().getContext("2d");
      t1 = $.$get$stateCanvas();
      context.clearRect(0, 0, t1.width, t1.height);
      if (!showInfo)
        return;
      t1 = $.Architect_debugOwners;
      if (t1 != null)
        for (t1 = X.RectIterator$(t1.bounds); t1.moveNext$0();) {
          t2 = t1._x;
          t3 = t1._y;
          t4 = $.Architect_debugOwners;
          t5 = t4._elements;
          t4 = t3 * t4.bounds.size.x + t2;
          if (t4 < 0 || t4 >= t5.length)
            return H.ioore(t5, t4);
          architecture = t5[t4];
          if (architecture == null)
            continue;
          context.fillStyle = "hsla(" + H.S($.hues.putIfAbsent$2(architecture, new Q.render_closure())) + ", 100%, 50%, 0.1)";
          context.fillRect(t2 * 8, t3 * 8, 8, 8);
        }
      t1 = $.Debug_densityMap;
      if (t1 != null) {
        for (t2 = X.RectIterator$($._game._stage.tiles.bounds), t1 = t1._density, t3 = t1._elements, t1 = t1.bounds.size.x, t4 = t3.length, max = 0; t2.moveNext$0();) {
          t5 = t2._x;
          t5 = t2._y * t1 + t5;
          if (t5 < 0 || t5 >= t4)
            return H.ioore(t3, t5);
          max = Math.max(max, H.checkNum(t3[t5]));
        }
        if (max > 0)
          for (t2 = X.RectIterator$($._game._stage.tiles.bounds); t2.moveNext$0();) {
            t5 = t2._x;
            t6 = t2._y;
            t7 = t6 * t1 + t5;
            if (t7 < 0 || t7 >= t4)
              return H.ioore(t3, t7);
            t7 = t3[t7];
            if (typeof t7 !== "number")
              return t7.$div();
            density = t7 / max;
            if (density === 0)
              continue;
            context.fillStyle = "rgba(255,255,0," + H.S(density) + ")";
            context.fillRect(t5 * 8, t6 * 8, 8, 8);
          }
      }
      context.fillStyle = "hsla(0, 100%, 100%, 0.4)";
      if ($.Keep_debugJunctions != null)
        for (t1 = X.RectIterator$($._game._stage.tiles.bounds); t1.moveNext$0();) {
          t2 = t1._x;
          t3 = t1._y;
          junction = $.Keep_debugJunctions._byPosition.$index(0, new L.Vec(t2, t3));
          if (junction == null)
            continue;
          switch (junction.direction) {
            case C.Direction_0_m1:
              context.fillRect(t2 * 8 + 3, t3 * 8, 2, 4);
              break;
            case C.Direction_0_1:
              context.fillRect(t2 * 8 + 3, t3 * 8 + 4, 2, 4);
              break;
            case C.Direction_1_0:
              context.fillRect(t2 * 8 + 4, t3 * 8 + 3, 4, 2);
              break;
            case C.Direction_m1_0:
              context.fillRect(t2 * 8, t3 * 8 + 3, 4, 2);
              break;
          }
        }
    },
    main_closure: function main_closure() {
    },
    main_closure0: function main_closure0() {
    },
    main_closure1: function main_closure1() {
    },
    main_closure2: function main_closure2() {
    },
    generate_closure: function generate_closure(t0) {
      this.breed = t0;
    },
    render_closure: function render_closure() {
    }
  },
  R = {Missive: function Missive(t0) {
      this._missive$_name = t0;
    },
    category: function(glyph, stack, verb) {
      var t1;
      R.finishItem();
      t1 = $._category = new R._CategoryBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int));
      t1._glyph = glyph;
      t1._verb = verb;
      t1._maxStack = stack;
      return t1;
    },
    item: function($name, color, frequency, price) {
      var t1;
      R.finishItem();
      t1 = $._item = new R._ItemBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int));
      t1._builder$_name = $name;
      t1._color = color;
      t1._frequency = frequency == null ? 1 : frequency;
      t1._price = price == null ? 0 : price;
      return t1;
    },
    affix: function($name, frequency) {
      var isPrefix, t1;
      R.finishAffix();
      if (C.JSString_methods.endsWith$1($name, " _")) {
        $name = C.JSString_methods.substring$2($name, 0, $name.length - 2);
        isPrefix = true;
      } else {
        if (C.JSString_methods.startsWith$1($name, "_ "))
          $name = C.JSString_methods.substring$1($name, 2);
        else
          throw H.wrapException('Affix "' + $name + '" must start or end with "_".');
        isPrefix = false;
      }
      t1 = P.int;
      return $._affix = new R._AffixBuilder($name, isPrefix, frequency, P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, t1), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t1));
    },
    finishItem: function() {
      var t2, appearance, tossDamage, verb, range, t3, element, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18,
        t1 = $._item;
      if (t1 == null)
        return;
      t2 = $._category;
      appearance = L.Glyph$fromCharCode(t2._glyph, t1._color, null);
      tossDamage = t1._tossDamage;
      if (tossDamage == null)
        tossDamage = t2._tossDamage;
      if (tossDamage != null) {
        t1 = "the " + t1._builder$_name.toLowerCase();
        t2 = t2._verb;
        verb = t2 != null ? O.Log_conjugate(t2, C.Pronoun_it_it_its) : "hits";
        t2 = $._item;
        range = t2._tossRange;
        if (range == null)
          range = $._category._tossRange;
        t3 = t2._tossElement;
        element = t3 == null ? $._category._tossElement : t3;
        if (element == null)
          element = $.$get$Element_none();
        if (t2._tossUse == null)
          $._category._tossUse;
        t3 = $._category;
        t4 = t3._breakage;
        t4 == null ? t2._breakage : t4;
        U.Attack$(new O.Noun(t1), verb, tossDamage, range, element);
        t1 = t2;
        t2 = t3;
      }
      t3 = t1._builder$_name;
      t4 = t1._minDepth;
      t5 = $._sortIndex;
      $._sortIndex = t5 + 1;
      t6 = t2._equipSlot;
      t7 = t2._weaponType;
      t8 = t1._price;
      t9 = t1._maxStack;
      if (t9 == null)
        t9 = t2._maxStack;
      if (t9 == null)
        t9 = 1;
      t10 = t1._weight;
      if (t10 == null)
        t10 = 0;
      t11 = t1._heft;
      if (t11 == null)
        t11 = 0;
      t12 = t1._builder$_emanation;
      if (t12 == null)
        t12 = t2._builder$_emanation;
      t1._fuel;
      t2._isTwoHanded;
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int);
      t2 = H.setRuntimeTypeInfo([], [M.Skill]);
      if (t12 == null)
        t12 = 0;
      t1.addAll$1(0, $._category._destroyChance);
      t1.addAll$1(0, $._item._destroyChance);
      C.JSArray_methods.addAll$1(t2, $._category._skills);
      C.JSArray_methods.addAll$1(t2, $._item._skills);
      t13 = $.$get$Items_types();
      t14 = O.Log__categorize(t3, false, true);
      t15 = $._item;
      t16 = t15._minDepth;
      t17 = t15._maxDepth;
      t15 = t15._frequency;
      t18 = $._category._builder$_tag;
      t13.toString;
      t13._resource$_add$7(H.assertSubtypeOfRuntimeType(new L.ItemType(t3, appearance, t4, t5, t6, t7, t8, t10, t11, t12, t9, t1, t2), H.getTypeArgumentByIndex(t13, 0)), t14, t16, t17, t15, null, t18);
      $._item = null;
    },
    finishAffix: function() {
      var affixes, displayName, fullName, index, t2, t3, t4, t5, t6, t7, affix,
        t1 = $._affix;
      if (t1 == null)
        return;
      affixes = t1._isPrefix ? $.$get$Affixes_prefixes() : $.$get$Affixes_suffixes();
      displayName = t1._builder$_name;
      fullName = displayName + " (" + H.S($._affixTag) + ")";
      for (index = 1; affixes.tryFind$1(fullName) != null;) {
        ++index;
        fullName = displayName + " (" + H.S($._affixTag) + " " + index + ")";
      }
      t1 = $._affix;
      t2 = t1._heftScale;
      t3 = t1._weightBonus;
      t4 = t1._brand;
      t5 = t1._priceBonus;
      t6 = t1._priceScale;
      t7 = P.int;
      if (t2 == null)
        t2 = 1;
      if (t3 == null)
        t3 = 0;
      if (t4 == null)
        $.$get$Element_none();
      t4 = t5 == null ? 0 : t5;
      t5 = t6 == null ? 1 : t6;
      affix = new L.Affix(fullName, displayName, t2, t3, P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, t7), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t7), t4, t5);
      t1._resists.forEach$1(0, affix.get$resist());
      $._affix._builder$_statBonuses.forEach$1(0, affix.get$setStatBonus());
      t1 = $._affix;
      t5 = t1._minDepth;
      t4 = t1._maxDepth;
      t1 = t1._frequency;
      t7 = $._affixTag;
      affixes._resource$_add$7(H.assertSubtypeOfRuntimeType(affix, H.getTypeArgumentByIndex(affixes, 0)), fullName, t5, t4, t1, t1, t7);
      $._affix = null;
    },
    _BaseBuilder: function _BaseBuilder() {
    },
    _CategoryBuilder: function _CategoryBuilder(t0, t1) {
      var _ = this;
      _._verb = _._builder$_tag = _._weaponType = _._equipSlot = _._glyph = null;
      _._isTwoHanded = _._isTreasure = false;
      _._skills = t0;
      _._destroyChance = t1;
      _._breakage = _._fuel = _._builder$_emanation = _._tossUse = _._tossRange = _._tossDamage = _._tossElement = _._maxStack = null;
    },
    _ItemBuilder: function _ItemBuilder(t0, t1) {
      var _ = this;
      _._maxDepth = _._minDepth = _._builder$_name = _._armor = _._heft = _._weight = _._defense = _._attack = _._use = _._price = _._frequency = _._color = null;
      _._skills = t0;
      _._destroyChance = t1;
      _._breakage = _._fuel = _._builder$_emanation = _._tossUse = _._tossRange = _._tossDamage = _._tossElement = _._maxStack = null;
    },
    _ItemBuilder_food_closure: function _ItemBuilder_food_closure(t0) {
      this.amount = t0;
    },
    _ItemBuilder_detection_closure: function _ItemBuilder_detection_closure(t0, t1) {
      this.types = t0;
      this.range = t1;
    },
    _ItemBuilder_perception_closure: function _ItemBuilder_perception_closure(t0) {
      this._box_0 = t0;
    },
    _ItemBuilder_resistSalve_closure: function _ItemBuilder_resistSalve_closure(t0) {
      this.element = t0;
    },
    _ItemBuilder_mapping_closure: function _ItemBuilder_mapping_closure(t0, t1) {
      this._box_0 = t0;
      this.distance = t1;
    },
    _ItemBuilder_haste_closure: function _ItemBuilder_haste_closure(t0, t1) {
      this.amount = t0;
      this.duration = t1;
    },
    _ItemBuilder_teleport_closure: function _ItemBuilder_teleport_closure(t0) {
      this.distance = t0;
    },
    _ItemBuilder_heal_closure: function _ItemBuilder_heal_closure(t0, t1) {
      this.amount = t0;
      this.curePoison = t1;
    },
    _ItemBuilder_ball_closure: function _ItemBuilder_ball_closure(t0) {
      this.attack = t0;
    },
    _ItemBuilder_ball_closure0: function _ItemBuilder_ball_closure0(t0) {
      this.attack = t0;
    },
    _ItemBuilder_flow_closure: function _ItemBuilder_flow_closure(t0, t1) {
      this._box_0 = t0;
      this.attack = t1;
    },
    _ItemBuilder_flow_closure0: function _ItemBuilder_flow_closure0(t0, t1) {
      this._box_0 = t0;
      this.attack = t1;
    },
    _ItemBuilder_lightSource_closure: function _ItemBuilder_lightSource_closure(t0, t1) {
      this.range = t0;
      this.level = t1;
    },
    _AffixBuilder: function _AffixBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._builder$_name = t0;
      _._isPrefix = t1;
      _._maxDepth = _._minDepth = null;
      _._frequency = t2;
      _._priceScale = _._priceBonus = _._armor = _._brand = _._damageBonus = _._damageScale = _._weightBonus = _._heftScale = null;
      _._resists = t3;
      _._builder$_statBonuses = t4;
    },
    shop: function($name, itemTypes) {
      var drops = P.LinkedHashMap_LinkedHashMap$_empty(L.Drop, P.double);
      itemTypes.forEach$1(0, new R.shop_closure(drops));
      $.Shops_all.$indexSet(0, $name, new O.Shop(X._OneOfDrop$(drops), $name));
    },
    shop_closure: function shop_closure(t0) {
      this.drops = t0;
    },
    family: function(character, dodge, flags, frequency, meander, speed, tracking) {
      var t1;
      R.finishBreed();
      t1 = $._family = new R._FamilyBuilder(character, frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
      t1._meander = meander;
      t1._speed = speed;
      t1._dodge = dodge;
      t1._tracking = tracking;
      t1._flags = flags;
      return t1;
    },
    finishBreed: function() {
      var t1, t2, tags, t3, flags, t4, dodge, minions, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, names, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29,
        _s8_ = "immobile";
      if ($._builder == null)
        return;
      t1 = P.String;
      t2 = [t1];
      tags = H.setRuntimeTypeInfo([], t2);
      C.JSArray_methods.addAll$1(tags, $._family._groups);
      C.JSArray_methods.addAll$1(tags, $._builder._groups);
      if (tags.length === 0)
        C.JSArray_methods.add$1(tags, "monster");
      t3 = $._builder;
      t3.toString;
      flags = P.LinkedHashSet_LinkedHashSet(t1);
      t4 = $._family._flags;
      if (t4 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
      t4 = t3._flags;
      if (t4 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
      dodge = t3._dodge;
      if (dodge == null)
        dodge = $._family._dodge;
      if (flags.contains$1(0, _s8_))
        dodge = 0;
      t1 = t3._minions;
      t4 = t1.length;
      if (t4 === 1) {
        if (0 >= t4)
          return H.ioore(t1, 0);
        minions = t1[0];
      } else
        minions = t4 > 1 ? new B._AllOfSpawn(t1) : null;
      t1 = t3._builder0$_name;
      t4 = t3._pronoun;
      if (t4 == null)
        t4 = C.Pronoun_it_it_its;
      t5 = t3._appearance;
      t6 = t3._attacks;
      t7 = t3._moves;
      t8 = t3._builder0$_drops;
      t9 = t3._location;
      t9 == null ? $._family._location : t9;
      t9 = $._family;
      t10 = t9._builder0$_motility;
      t11 = t3._builder0$_motility;
      t10 = t10._bitMask;
      t11 = t11._bitMask;
      t12 = t3._builder0$_depth;
      t13 = t3._health;
      t3._tracking;
      t9._tracking;
      if (t3._vision == null)
        t9._vision;
      if (t3._hearing == null)
        t9._hearing;
      t14 = t3._meander;
      if (t14 == null)
        t14 = t9._meander;
      if (t14 == null)
        t14 = 0;
      t15 = t3._speed;
      if (t15 == null)
        t15 = 0;
      t16 = t9._speed;
      if (t16 == null)
        t16 = 0;
      t17 = t9._emanationLevel;
      if (t17 == null)
        t17 = t3._emanationLevel;
      t18 = t3._countMin;
      if (t18 == null)
        t18 = t9._countMin;
      if (t18 == null)
        t18 = 1;
      t19 = t3._countMax;
      if (t19 == null)
        t19 = t9._countMax;
      if (t19 == null)
        t19 = 1;
      if (t3._stain == null)
        t9._stain;
      names = flags._newSet$0();
      names.addAll$1(0, flags);
      t9 = names.remove$1(0, "berzerk");
      t20 = names.remove$1(0, "cowardly");
      t21 = names.remove$1(0, "fearless");
      t22 = names.remove$1(0, _s8_);
      t23 = names.remove$1(0, "protective");
      t24 = names.remove$1(0, "unique");
      if (names._collection$_length !== 0)
        H.throwExpression(P.ArgumentError$('Unknown flags "' + names.join$1(0, ", ") + '"'));
      t3._description;
      t25 = H.setRuntimeTypeInfo([], [U.Defense]);
      t2 = H.setRuntimeTypeInfo([], t2);
      t26 = dodge == null ? 20 : dodge;
      if (t17 == null)
        t17 = 0;
      C.JSArray_methods.addAll$1(t25, $._family._defenses);
      C.JSArray_methods.addAll$1(t25, t3._defenses);
      C.JSArray_methods.addAll$1(t2, $._family._groups);
      C.JSArray_methods.addAll$1(t2, t3._groups);
      t3 = $.$get$Monsters_breeds();
      t27 = O.Log__categorize(t1, false, true);
      t28 = $._builder._builder0$_frequency;
      if (t28 == null)
        t28 = $._family._builder0$_frequency;
      t29 = C.JSArray_methods.join$1(tags, " ");
      t3.toString;
      t3._resource$_add$7(H.assertSubtypeOfRuntimeType(new B.Breed(t4, t5, t12, t6, t7, t13, t14, t15 + t16, new X._AllOfDrop(t8), new Q.Motility(t10 | t11), new B.BreedFlags(t9, t20, t21, t22, t23, t24), t26, t17, t25, t18, t19, minions, t1, t2), H.getTypeArgumentByIndex(t3, 0)), t27, t12, t12, t28, t28, t29);
      $._builder = null;
    },
    breed: function($name, depth, color, health, dodge, frequency, meander, speed) {
      var t1, t2;
      R.finishBreed();
      t1 = C.JSString_methods._codeUnitAt$1($._family._character, 0);
      t2 = color != null ? color : C.Color_255_255_255;
      t1 = $._builder = new R._BreedBuilder($name, depth, new L.Glyph(t1, t2, C.Color_0_0_0), health, H.setRuntimeTypeInfo([], [U.Attack]), H.setRuntimeTypeInfo([], [O.Move]), H.setRuntimeTypeInfo([], [L.Drop]), H.setRuntimeTypeInfo([], [B.Spawn]), frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
      t1._speed = speed;
      t1._meander = meander;
      return t1;
    },
    _BaseBuilder0: function _BaseBuilder0() {
    },
    _FamilyBuilder: function _FamilyBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._character = t0;
      _._builder0$_frequency = t1;
      _._tracking = null;
      _._builder0$_motility = t2;
      _._dodge = _._meander = _._speed = _._location = null;
      _._defenses = t3;
      _._groups = t4;
      _._hearing = _._vision = _._emanationLevel = _._stain = _._countMax = _._countMin = _._flags = null;
    },
    _BreedBuilder: function _BreedBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _._builder0$_name = t0;
      _._builder0$_depth = t1;
      _._appearance = t2;
      _._health = t3;
      _._attacks = t4;
      _._moves = t5;
      _._builder0$_drops = t6;
      _._minions = t7;
      _._description = _._pronoun = null;
      _._builder0$_frequency = t8;
      _._tracking = null;
      _._builder0$_motility = t9;
      _._dodge = _._meander = _._speed = _._location = null;
      _._defenses = t10;
      _._groups = t11;
      _._hearing = _._vision = _._emanationLevel = _._stain = _._countMax = _._countMin = _._flags = null;
    },
    MissiveMove: function MissiveMove(t0, t1) {
      this._missive = t0;
      this.rate = t1;
    },
    Room_create: function(depth) {
      var size,
        t1 = $.$get$rng();
      switch (t1.inclusive$1(10)) {
        case 0:
          size = t1.inclusive$2(5, 17);
          return R.Room__angledCorners(size, C.JSInt_methods._tdivFast$1(size - 1, 2), depth);
        case 1:
          size = t1.inclusive$2(6, 13);
          return R.Room__angledCorners(size, t1.inclusive$2(2, C.JSInt_methods._tdivFast$1(size, 2) - 1), depth);
        case 2:
        case 3:
          return R.Room__angled(depth);
        default:
          return R.Room__rectangle(depth);
      }
    },
    Room__rectangle: function(depth) {
      var t2, t3, y, t4, x, lights, i, t5,
        t1 = $.$get$rng(),
        short = t1.inclusive$2(3, 10),
        long = t1.inclusive$2(short, Math.min(16, short + 4)),
        horizontal = t1.range$1(2) === 0,
        width = horizontal ? long : short,
        height = horizontal ? short : long,
        tiles = M.Array2D$(width + 2, height + 2, $.$get$RoomTile_unused(), R.RoomTile);
      for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < height;)
        for (++y, t4 = y * t3, x = 0; x < width;) {
          ++x;
          C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
        }
      lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
      if (short <= 9 && (width & 1) === 1 && (height & 1) === 1)
        C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(C.JSInt_methods._tdivFast$1(width, 2) + 1, C.JSInt_methods._tdivFast$1(height, 2) + 1)], [L.Vec]));
      if (long >= 5)
        for (t1 = C.JSInt_methods._tdivFast$1(short - 1, 2), t2 = [L.Vec], i = 0; i < t1; ++i) {
          t3 = 1 + i;
          t4 = width - i;
          t5 = height - i;
          C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t3, t3), new L.Vec(t4, t3), new L.Vec(t3, t5), new L.Vec(t4, t5)], t2));
        }
      R.Room__addLights(depth, tiles, lights);
      R.Room__calculateEdges(tiles);
      return tiles;
    },
    Room__angled: function(depth) {
      var t2, t3, y, t4, x, xMin, xMax, yMin, yMax, lights, t5, t6, t7, t8, i, cornerLights, t9, t10,
        t1 = $.$get$rng(),
        short = t1.inclusive$2(5, 10),
        long = t1.inclusive$2(short, Math.min(16, short + 4)),
        horizontal = t1.range$1(2) === 0,
        width = horizontal ? long : short,
        height = horizontal ? short : long,
        cutWidth = t1.inclusive$2(2, width - 3),
        cutHeight = t1.inclusive$2(2, height - 3),
        isTop = t1.range$1(2) === 0,
        isLeft = t1.range$1(2) === 0,
        tiles = M.Array2D$(width + 2, height + 2, $.$get$RoomTile_unused(), R.RoomTile);
      for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < height;)
        for (++y, t4 = y * t3, x = 0; x < width;) {
          ++x;
          C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
        }
      xMin = isLeft ? 0 : width - cutWidth;
      xMax = isLeft ? cutWidth : width;
      yMin = isTop ? 0 : height - cutHeight;
      yMax = isTop ? cutHeight : height;
      for (y = yMin; y < yMax;)
        for (++y, t4 = y * t3, x = xMin; x < xMax;) {
          ++x;
          C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_unused(), t1));
        }
      lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
      t1 = width - cutWidth;
      t2 = height - cutHeight;
      for (t3 = C.JSInt_methods._tdivFast$1(Math.min(t1, t2) - 1, 2), t4 = !isTop, t5 = [L.Vec], t6 = !isLeft, t7 = cutWidth + 1, t8 = cutHeight + 1, i = 0; i < t3; ++i) {
        cornerLights = H.setRuntimeTypeInfo([], t5);
        C.JSArray_methods.add$1(lights, cornerLights);
        if (!isTop || t6) {
          t9 = 1 + i;
          C.JSArray_methods.add$1(cornerLights, new L.Vec(t9, t9));
        }
        if (!isTop || isLeft)
          C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, 1 + i));
        if (!t4 || t6)
          C.JSArray_methods.add$1(cornerLights, new L.Vec(1 + i, height - i));
        if (!t4 || isLeft)
          C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, height - i));
        if (isTop) {
          t9 = 1 + i;
          t10 = t8 + i;
          if (isLeft) {
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t7 + i, t9));
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t9, t10));
          } else {
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t1 - i, t9));
            C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, t10));
          }
        } else {
          t9 = height - i;
          t10 = t2 - i;
          if (isLeft) {
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t7 + i, t9));
            C.JSArray_methods.add$1(cornerLights, new L.Vec(1 + i, t10));
          } else {
            C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, t10));
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t1 - i, t9));
          }
        }
      }
      R.Room__addLights(depth, tiles, lights);
      R.Room__calculateEdges(tiles);
      return tiles;
    },
    Room__angledCorners: function(size, corner, depth) {
      var t2, t3, y, y0, t4, x, t5, lights, i, t6, maxSquare,
        t1 = size + 2,
        tiles = M.Array2D$(t1, t1, $.$get$RoomTile_unused(), R.RoomTile);
      for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < size; y = y0)
        for (y0 = y + 1, t4 = y0 * t3, x = 0; x < size; ++x) {
          if (x + y < corner)
            continue;
          t5 = size - x - 1;
          if (t5 + y < corner)
            continue;
          if (x + size - y - 1 < corner)
            continue;
          if (t5 + size - y - 1 < corner)
            continue;
          C.JSArray_methods.$indexSet(t2, t4 + (x + 1), H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
        }
      lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
      if (size <= 9 && (size & 1) === 1) {
        t1 = C.JSInt_methods._tdivFast$1(size, 2) + 1;
        C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t1, t1)], [L.Vec]));
      }
      if ((size & 1) === 1)
        for (t1 = C.JSInt_methods._tdivFast$1(size, 2), t2 = t1 - 1, t3 = [L.Vec], i = 2; i < t2; ++i) {
          t4 = t1 + 1;
          t5 = t4 - i;
          t6 = t4 + i;
          C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t4, t5), new L.Vec(t6, t4), new L.Vec(t4, t6), new L.Vec(t5, t4)], t3));
        }
      maxSquare = C.JSInt_methods._tdivFast$1(size + 1, 2) - C.JSInt_methods._tdivFast$1(corner + 1, 2) - 3;
      for (t1 = size - 1, t2 = size + 4, t3 = [L.Vec], i = 0; i <= maxSquare; ++i) {
        t4 = C.JSInt_methods._tdivFast$1(t1, 2) - i;
        t5 = C.JSInt_methods._tdivFast$1(t2, 2) + i;
        C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t4, t4), new L.Vec(t5, t4), new L.Vec(t4, t5), new L.Vec(t5, t5)], t3));
      }
      R.Room__addLights(depth, tiles, lights);
      R.Room__calculateEdges(tiles);
      return tiles;
    },
    Room__calculateEdges: function(room) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, cardinalFloors, hasCornerFloor;
      for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = H.getTypeArgumentByIndex(C.List_aAW, 0), t4 = {func: 1, ret: P.bool, args: [t3]}, t5 = [t3], t6 = room._elements, t1 = t1.size.x, t7 = t6.length, t8 = H.getTypeArgumentByIndex(room, 0); t2.moveNext$0();) {
        t9 = t2._x;
        t10 = t2._y;
        t11 = t10 * t1 + t9;
        if (t11 < 0 || t11 >= t7)
          return H.ioore(t6, t11);
        t12 = t6[t11];
        if (!(t12.tile == null && t12.direction === C.Direction_0_0))
          continue;
        t9 = new R.Room__calculateEdges_isFloor(new L.Vec(t9, t10), room);
        cardinalFloors = P.List_List$from(new H.WhereIterable(C.List_aAW, H.functionTypeCheck(t9, t4), t5), true, t3);
        hasCornerFloor = C.JSArray_methods.any$1(C.List_izR, t9);
        t9 = cardinalFloors.length;
        if (t9 === 1)
          C.JSArray_methods.$indexSet(t6, t11, H.assertSubtypeOfRuntimeType(new R.RoomTile(null, C.JSArray_methods.get$single(cardinalFloors).get$rotate180()), t8));
        else if (t9 <= 1)
          if (hasCornerFloor)
            C.JSArray_methods.$indexSet(t6, t11, H.assertSubtypeOfRuntimeType($.$get$RoomTile_wall(), t8));
      }
    },
    Room__addLights: function(depth, room, lights) {
      var t1, t2, t3, t4, t5, t6, t7, t8, max, t9;
      if (lights.length === 0)
        return;
      t1 = $.$get$rng();
      t2 = C.JSNumber_methods.round$0(K.lerpDouble(depth, 1, 100, 90, 20));
      if (t1.range$1(100) >= t2)
        return;
      H.assertSubtype(lights, "$isList", [[P.List, L.Vec]], "$asList");
      t2 = t1.range$1(lights.length);
      if (t2 < 0 || t2 >= lights.length)
        return H.ioore(lights, t2);
      t2 = C.JSArray_methods.get$iterator(lights[t2]);
      t3 = H.getTypeArgumentByIndex(room, 0);
      t4 = room._elements;
      t5 = room.bounds.size.x;
      t6 = [Q.TileType];
      for (; t2.moveNext$0();) {
        t7 = t2.get$current();
        t8 = H.assertSubtype($.$get$Tiles_braziers(), "$isList", t6, "$asList");
        max = t8.length;
        t9 = t1._random.nextInt$1(max - 0);
        if (t9 < 0 || t9 >= t8.length)
          return H.ioore(t8, t9);
        t9 = H.assertSubtypeOfRuntimeType(new R.RoomTile(t8[t9], C.Direction_0_0), t3);
        C.JSArray_methods.$indexSet(t4, t7.y * t5 + t7.x, t9);
      }
    },
    RoomTile$junction: function(direction) {
      return new R.RoomTile(null, direction);
    },
    RoomTile$tile: function(tile) {
      return new R.RoomTile(tile, C.Direction_0_0);
    },
    Room__calculateEdges_isFloor: function Room__calculateEdges_isFloor(t0, t1) {
      this.pos = t0;
      this.room = t1;
    },
    RoomTile: function RoomTile(t0, t1) {
      this.tile = t0;
      this.direction = t1;
    },
    DestroyActionMixin: function DestroyActionMixin() {
    },
    Item: function Item(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.prefix = t1;
      _.suffix = t2;
      _._count = t3;
    }
  },
  S = {TeleportAction: function TeleportAction() {
    },
    Cell$: function(apply, motility, require, requireAny) {
      var t1 = H.setRuntimeTypeInfo([], [Q.TileType]);
      if (require != null)
        C.JSArray_methods.add$1(t1, require);
      if (requireAny != null)
        C.JSArray_methods.addAll$1(t1, requireAny);
      return new S.Cell(apply, motility, t1);
    },
    Furnishing: function Furnishing(t0) {
      this._cells = t0;
    },
    Cell: function Cell(t0, t1, t2) {
      this._apply = t0;
      this._furnishing$_motility = t1;
      this._require = t2;
    },
    TeleportMove: function TeleportMove(t0, t1) {
      this._range = t0;
      this.rate = t1;
    },
    MasteryDiscipline: function MasteryDiscipline() {
    },
    Decorator: function Decorator(t0, t1, t2) {
      var _ = this;
      _._decorator$_architect = t0;
      _._heroPos = null;
      _._tilesByArchitecture = t1;
      _._spawnedUniques = t2;
    },
    Decorator_decorate_closure: function Decorator_decorate_closure() {
    },
    Decorator__spawnMonsters_closure: function Decorator__spawnMonsters_closure(t0, t1) {
      this.$this = t0;
      this.spawned = t1;
    },
    Decorator__spawnMonster_spawn: function Decorator__spawnMonster_spawn(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.isCorpse = t2;
      _.density = t3;
    },
    Decorator__spawnMonster_closure: function Decorator__spawnMonster_closure() {
    },
    Decorator__spawnMonster_closure0: function Decorator__spawnMonster_closure0() {
    },
    DensityMap: function DensityMap(t0) {
      this._density = t0;
      this._possibleTiles = this._total = 0;
    },
    Actor: function Actor() {
    },
    Actor_closure: function Actor_closure(t0) {
      this.$this = t0;
    },
    RetroTerminal$_: function(_display, _charWidth, _charHeight, canvas, _font, _scale) {
      var t1 = new S.RetroTerminal(_display, canvas.getContext("2d"), _font, P.LinkedHashMap_LinkedHashMap$_empty(L.Color, W.CanvasElement), _scale, _charWidth, _charHeight);
      t1.RetroTerminal$_$6(_display, _charWidth, _charHeight, canvas, _font, _scale);
      return t1;
    },
    RetroTerminal: function RetroTerminal(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._display = t0;
      _._context = t1;
      _._font = t2;
      _._fontColorCache = t3;
      _._scale = t4;
      _._imageLoaded = false;
      _._charWidth = t5;
      _._charHeight = t6;
    },
    RetroTerminal$__closure: function RetroTerminal$__closure(t0) {
      this.$this = t0;
    },
    RetroTerminal_render_closure: function RetroTerminal_render_closure(t0) {
      this.$this = t0;
    }
  },
  Y = {
    Decor_choose: function(depth, theme) {
      var t1 = $.$get$Decor_all();
      if (!t1._tags.containsKey$1(theme))
        return;
      return t1.tryChoose$2$tag(depth, theme);
    },
    Decor: function Decor() {
    },
    ConeMove: function ConeMove(t0, t1) {
      this.attack = t0;
      this.rate = t1;
    },
    DualWield: function DualWield(t0) {
      this._sortOrder = t0;
    },
    Energy: function Energy() {
    },
    ResourceSet$: function($T) {
      var t1 = P.String;
      return new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, $T]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, $T]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, $T]), [$T]);
    },
    ResourceSet: function ResourceSet(t0, t1, t2, t3) {
      var _ = this;
      _._tags = t0;
      _._resources = t1;
      _._queries = t2;
      _.$ti = t3;
    },
    ResourceSet_hasTag_closure: function ResourceSet_hasTag_closure(t0, t1) {
      this.$this = t0;
      this.tag = t1;
    },
    ResourceSet_getTags_closure: function ResourceSet_getTags_closure(t0) {
      this.$this = t0;
    },
    ResourceSet_tryChoose_closure: function ResourceSet_tryChoose_closure(t0) {
      this.$this = t0;
    },
    ResourceSet_tryChoose_closure0: function ResourceSet_tryChoose_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.goalTag = t2;
    },
    ResourceSet_tryChooseMatching_closure: function ResourceSet_tryChooseMatching_closure(t0) {
      this.$this = t0;
    },
    ResourceSet_tryChooseMatching_closure0: function ResourceSet_tryChooseMatching_closure0(t0, t1) {
      this.$this = t0;
      this.tagObjects = t1;
    },
    ResourceSet_tryChooseMatching__closure: function ResourceSet_tryChooseMatching__closure(t0, t1) {
      this.$this = t0;
      this.resourceTag = t1;
    },
    _Resource: function _Resource(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.object = t0;
      _.startDepth = t1;
      _.endDepth = t2;
      _.startFrequency = t3;
      _.endFrequency = t4;
      _._tags = t5;
      _.$ti = t6;
    },
    _Tag: function _Tag(t0, t1, t2) {
      this.name = t0;
      this.parent = t1;
      this.$ti = t2;
    },
    _QueryKey: function _QueryKey(t0, t1) {
      this.name = t0;
      this.depth = t1;
    },
    _ResourceQuery: function _ResourceQuery(t0, t1, t2, t3, t4) {
      var _ = this;
      _.depth = t0;
      _.resources = t1;
      _.chances = t2;
      _.totalChance = t3;
      _.$ti = t4;
    },
    Path: function Path(t0, t1, t2, t3) {
      var _ = this;
      _.startDirection = t0;
      _.pos = t1;
      _.length = t2;
      _.cost = t3;
    },
    Pathfinder: function Pathfinder() {
    }
  },
  A = {Elements_closure8: function Elements_closure8() {
    }, Elements_closure6: function Elements_closure6() {
    }, Elements_closure7: function Elements_closure7() {
    }, Elements_closure4: function Elements_closure4() {
    }, Elements_closure5: function Elements_closure5() {
    }, Elements_closure2: function Elements_closure2() {
    }, Elements_closure3: function Elements_closure3() {
    }, Elements_closure1: function Elements_closure1() {
    }, Elements_closure: function Elements_closure() {
    }, Elements_closure0: function Elements_closure0() {
    }, ClubMastery: function ClubMastery(t0) {
      this._sortOrder = t0;
    },
    SlayDiscipline$: function(_displayName, _breedGroup) {
      var t1 = $.Skill__nextSortOrder;
      $.Skill__nextSortOrder = t1 + 1;
      return new A.SlayDiscipline(_displayName, _breedGroup, t1);
    },
    SlayDiscipline: function SlayDiscipline(t0, t1, t2) {
      this._displayName = t0;
      this._breedGroup = t1;
      this._sortOrder = t2;
    },
    Pit: function Pit(t0, t1, t2, t3) {
      var _ = this;
      _._monsterGroup = t0;
      _._minSize = t1;
      _._maxSize = t2;
      _._monsterTiles = t3;
      _._region = _._style = _._architect = null;
    }
  },
  B = {_BreedSpawn: function _BreedSpawn(t0) {
      this._spawns$_breed = t0;
    }, _TagSpawn: function _TagSpawn(t0) {
      this._spawns$_tag = t0;
    }, _RepeatSpawn: function _RepeatSpawn(t0, t1, t2) {
      this._minCount = t0;
      this._maxCount = t1;
      this._spawn = t2;
    }, _AllOfSpawn: function _AllOfSpawn(t0) {
      this._spawns = t0;
    }, OpenDoorAction: function OpenDoorAction() {
    }, CloseDoorAction: function CloseDoorAction() {
    },
    BreedRef_resolve: function(resolver) {
      var t1, _i, ref;
      for (t1 = $.BreedRef__unresolved.length, _i = 0; _i < $.BreedRef__unresolved.length; $.BreedRef__unresolved.length === t1 || (0, H.throwConcurrentModificationError)($.BreedRef__unresolved), ++_i) {
        ref = $.BreedRef__unresolved[_i];
        ref._breed$_breed = H.interceptedTypeCheck(resolver.call$1(ref._breed$_name), "$isBreed");
      }
      C.JSArray_methods.set$length($.BreedRef__unresolved, 0);
    },
    BreedRef: function BreedRef(t0) {
      this._breed$_name = t0;
      this._breed$_breed = null;
    },
    Breed: function Breed(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.pronoun = t0;
      _.appearance = t1;
      _.depth = t2;
      _.attacks = t3;
      _.moves = t4;
      _.maxHealth = t5;
      _.meander = t6;
      _.speed = t7;
      _.drop = t8;
      _.motility = t9;
      _.flags = t10;
      _.dodge = t11;
      _.emanationLevel = t12;
      _.defenses = t13;
      _.countMin = t14;
      _.countMax = t15;
      _.minions = t16;
      _._breed$_name = t17;
      _.groups = t18;
    },
    SpawnLocation: function SpawnLocation(t0) {
      this._breed$_name = t0;
    },
    Spawn: function Spawn() {
    },
    BreedFlags: function BreedFlags(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.berzerk = t0;
      _.cowardly = t1;
      _.fearless = t2;
      _.immobile = t3;
      _.protective = t4;
      _.unique = t5;
    },
    Monster$: function(game, _breed, x, y, generation) {
      var t1 = new B.Monster(_breed, generation, P.LinkedHashMap_LinkedHashMap$_empty(O.Move, P.num), game, new Y.Energy(), new E.HasteCondition(), new E.ColdCondition(), new E.PoisonCondition(), new E.BlindnessCondition(), new E.BlindnessCondition(), new E.PerceiveCondition(), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, E.ResistCondition), new L.Vec(x, y));
      t1.Actor$3(game, x, y);
      t1.Monster$5(game, _breed, x, y, generation);
      return t1;
    },
    Monster: function Monster(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._breed = t0;
      _.generation = t1;
      _._monster$_state = null;
      _._recharges = t2;
      _._frightenThreshold = null;
      _.game = t3;
      _.energy = t4;
      _.haste = t5;
      _.cold = t6;
      _.poison = t7;
      _.blindness = t8;
      _.dazzle = t9;
      _.perception = t10;
      _.resistances = t11;
      _._pos = t12;
    },
    BucketQueue: function BucketQueue(t0, t1) {
      this._buckets = t0;
      this._bucket = 0;
      this.$ti = t1;
    },
    Fov: function Fov(t0) {
      this._fov$_stage = t0;
      this._shadows = null;
    },
    _Shadow: function _Shadow(t0, t1) {
      this.start = t0;
      this.end = t1;
    }
  },
  U = {HowlMove: function HowlMove(t0, t1) {
      this._howl$_range = t0;
      this.rate = t1;
    },
    Attack$: function(noun, verb, damage, range, element) {
      var t1 = range == null ? 0 : range;
      return new U.Attack(verb, damage, t1, element == null ? $.$get$Element_none() : element);
    },
    Attack: function Attack(t0, t1, t2, t3) {
      var _ = this;
      _.verb = t0;
      _.damage = t1;
      _.range = t2;
      _.element = t3;
    },
    Hit: function Hit() {
    },
    Defense: function Defense(t0) {
      this.amount = t0;
    },
    VecSet: function VecSet(t0, t1, t2) {
      var _ = this;
      _._values = t0;
      _._sentinel = 0;
      _._xMin = t1;
      _._xMax = 0;
      _._yMin = t2;
      _._yMax = 0;
    }
  },
  L = {
    SpawnMove$: function(rate, preferStraight) {
      return new L.SpawnMove(rate);
    },
    SpawnMove: function SpawnMove(t0) {
      this.rate = t0;
    },
    Icicle: function Icicle(t0) {
      this._sortOrder = t0;
    },
    BrilliantBeam: function BrilliantBeam(t0) {
      this._sortOrder = t0;
    },
    Windstorm: function Windstorm(t0) {
      this._sortOrder = t0;
    },
    FireBarrier: function FireBarrier(t0) {
      this._sortOrder = t0;
    },
    TidalWave: function TidalWave(t0) {
      this._sortOrder = t0;
    },
    _BrilliantBeam_Spell_TargetSkill: function _BrilliantBeam_Spell_TargetSkill() {
    },
    _FireBarrier_Spell_TargetSkill: function _FireBarrier_Spell_TargetSkill() {
    },
    _Icicle_Spell_TargetSkill: function _Icicle_Spell_TargetSkill() {
    },
    Affix: function Affix(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.name = t0;
      _.displayName = t1;
      _.heftScale = t2;
      _.weightBonus = t3;
      _._affix$_resists = t4;
      _._statBonuses = t5;
      _.priceBonus = t6;
      _.priceScale = t7;
    },
    Drop: function Drop() {
    },
    ItemUse: function ItemUse() {
    },
    ItemType: function ItemType(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.quantifiableName = t0;
      _.appearance = t1;
      _.depth = t2;
      _.sortIndex = t3;
      _.equipSlot = t4;
      _.weaponType = t5;
      _.price = t6;
      _.weight = t7;
      _.heft = t8;
      _.emanationLevel = t9;
      _.maxStack = t10;
      _.destroyChance = t11;
      _.skills = t12;
    },
    Stage$: function(width, height, game) {
      var t1 = S.Actor,
        t2 = H.setRuntimeTypeInfo([], [t1]),
        t3 = L.Vec,
        t4 = Q.Tile;
      t4 = new M.Array2D(P.List_List$filled(width * height, null, t4), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [t4]);
      t4.generate$1(new L.Stage_closure());
      t1 = new L.Stage(game, t2, t4, P.LinkedHashMap_LinkedHashMap$_empty(t3, O.Inventory), M.Array2D$(width, height, null, t1));
      t4 = H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]);
      t2 = P.int;
      t1._lighting = new F.Lighting(t1, M.Array2D$(width, height, 0, t2), M.Array2D$(width, height, 0, t2), new B.Fov(t1), new B.BucketQueue(t4, [t3]));
      return t1;
    },
    Stage: function Stage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.game = t0;
      _._actors = t1;
      _._lighting = null;
      _.tiles = t2;
      _._itemsByTile = t3;
      _._actorsByTile = t4;
    },
    Stage_closure: function Stage_closure() {
    },
    Stage_placeDrops_closure: function Stage_placeDrops_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.items = t1;
      _.flow = t2;
      _.pos = t3;
    },
    Stage_placeDrops__closure: function Stage_placeDrops__closure(t0) {
      this.$this = t0;
    },
    Stage_addItem_closure: function Stage_addItem_closure() {
    },
    Glyph$fromCharCode: function(char, fore, $back) {
      var t1 = fore != null ? fore : C.Color_255_255_255;
      return new L.Glyph(char, t1, $back != null ? $back : C.Color_0_0_0);
    },
    Color: function Color(t0, t1, t2) {
      this.r = t0;
      this.g = t1;
      this.b = t2;
    },
    Glyph: function Glyph(t0, t1, t2) {
      this.char = t0;
      this.fore = t1;
      this.back = t2;
    },
    VecBase: function VecBase() {
    },
    Vec: function Vec(t0, t1) {
      this.x = t0;
      this.y = t1;
    }
  },
  D = {AxeMastery: function AxeMastery(t0) {
      this._sortOrder = t0;
    }, SenseItems: function SenseItems(t0) {
      this._sortOrder = t0;
    }, Catacomb: function Catacomb(t0, t1, t2) {
      var _ = this;
      _._catacomb$_density = t0;
      _._catacomb$_minSize = t1;
      _._catacomb$_maxSize = t2;
      _._region = _._style = _._architect = null;
    }, Reachability: function Reachability(t0, t1, t2, t3) {
      var _ = this;
      _.stage = t0;
      _._reachability$_start = t1;
      _._distances = t2;
      _._affected = t3;
      _._reachedOpenCount = 0;
      _._beforeFill = null;
    }, _FillStep: function _FillStep(t0, t1) {
      this.pos = t0;
      this.distance = t1;
    }, Town: function Town(t0) {
      this.stage = t0;
    }, Game: function Game(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.content = t0;
      _._save = t1;
      _.log = t2;
      _._actions = t3;
      _._reactions = t4;
      _._events = t5;
      _._substanceEnergy = t6;
      _._substanceUpdateOrder = t7;
      _.depth = t8;
      _.hero = _._stage = null;
    }, Game_generate_closure: function Game_generate_closure(t0) {
      this._box_0 = t0;
    }, Event0: function Event0() {
    }, Property: function Property(t0) {
      this._stat$_value = null;
      this.$ti = t0;
    }, Stat: function Stat(t0) {
      this.name = t0;
    }, StatBase: function StatBase() {
    }, StatBase_refresh_closure: function StatBase_refresh_closure(t0, t1, t2) {
      this.$this = t0;
      this.newValue = t1;
      this.game = t2;
    }, Strength: function Strength() {
      this._stat$_value = this._hero = null;
    }, Agility: function Agility() {
      this._stat$_value = this._hero = null;
    }, Fortitude: function Fortitude() {
      this._stat$_value = this._hero = null;
    }, Intellect: function Intellect() {
      this._stat$_value = this._hero = null;
    }, Will: function Will() {
      this._stat$_value = this._hero = null;
    }, Display: function Display(t0, t1) {
      this._glyphs = t0;
      this._changedGlyphs = t1;
    },
    Monsters_initialize: function() {
      var _i, group, t1, t2, t3, description, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, _null = null,
        _s8_ = "fearless",
        _s1_ = " ",
        _s7_ = "bite[s]",
        _s6_ = "canine", _s6_0 = "unique",
        _s11_ = "stare[s] at",
        _s9_ = "the spark",
        _s4_ = "zaps",
        _s12_ = "gaze[s] into",
        _s8_0 = "splashes",
        _s9_0 = "the stone",
        _s4_0 = "hits",
        _s11_0 = "scratch[es]",
        _s6_1 = "goblin",
        _s7_0 = "stab[s]",
        _s8_1 = "treasure",
        _s5_ = "spear",
        _s7_1 = "healing",
        _s9_1 = "the arrow",
        _s5_0 = "armor",
        _s10_ = "resistance",
        _s10_0 = "protective",
        _s4_1 = "robe", _s5_1 = "magic", _s6_2 = "hit[s]",
        _s9_2 = "slash[es]",
        _s9_3 = "equipment",
        _s11_1 = "crawl[s] on",
        _s17_ = "fearless immobile",
        _s8_2 = "cowardly",
        _s6_3 = "kobold", _s4_2 = "club",
        _s7_2 = "poke[s]",
        _s7_3 = "saurian",
        _s7_4 = "claw[s]",
        _s10_1 = "salamander",
        _s4_3 = "item", _s6_4 = "weapon",
        _s8_3 = "strangle",
        _s8_4 = "skeleton",
        _s9_4 = "bony hand",
        _s8_5 = "bony arm",
        _s13_ = "severed skull",
        _s20_ = "decapitated skeleton",
        _s16_ = "armless skeleton",
        _s18_ = "one-armed skeleton",
        groups = ["humanoid/hob/fae", "humanoid/hob/goblin", "humanoid/hob/kobold", "humanoid/human", "humanoid/orcus/ogre", "humanoid/orcus/orc", "humanoid/saurian", "magical/eye", "magical/jelly", "mythical/beast/dragon", "mythical/beast/hybrid", "natural/animal/bird", "natural/animal/herp/salamander", "natural/animal/herp/snake", "natural/animal/mammal/bat", "natural/animal/mammal/canine", "natural/animal/mammal/feline", "natural/animal/mammal/rodent", "natural/bug/fly", "natural/bug/slug", "natural/bug/spider", "natural/bug/worm", "natural/plant/vine", "undead/skeleton"];
      for (_i = 0; _i < 24; ++_i) {
        group = groups[_i];
        $.$get$Monsters_breeds().defineTags$1("monster/" + group);
      }
      t1 = R.family("a", _null, _s8_, _null, _null, _null, _null);
      t2 = [P.String];
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("spider".split(_s1_), t2));
      t1._vision = 4;
      t1._hearing = 2;
      t1._stain = $.$get$Tiles_spiderweb();
      t1 = R.breed("brown spider", 5, C.Color_142_82_55, 6, 30, _null, 40, 0);
      t3 = $.$get$Elements_poison();
      t1.attack$3(_s7_, 5, t3);
      t1 = $.$get$collapseNewlines();
      description = H.stringReplaceAllUnchecked("Like a large dog, if the dog had eight articulated legs, eight\n  glittering eyes, and wanted nothing more than to kill you.", t1, _s1_);
      $._builder._description = description;
      R.breed("gray spider", 7, C.Color_63_75_115, 12, 30, _null, 30, 0).attack$3(_s7_, 5, t3);
      t4 = R.breed("spiderling", 9, C.Color_226_223_240, 14, 35, _null, 50, 0);
      t4.count$2(2, 7);
      t4.attack$3(_s7_, 10, t3);
      R.breed("giant spider", 12, C.Color_26_46_150, 40, _null, _null, 30, 0).attack$3(_s7_, 7, t3);
      t4 = R.family("b", _null, _null, _null, _null, 1, _null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("bat".split(_s1_), t2));
      t4._vision = 2;
      t4._hearing = 8;
      t5 = t4._builder0$_motility;
      t6 = $.$get$Motility_fly();
      t5 = t5._bitMask;
      t6 = t6._bitMask;
      t4._builder0$_motility = new Q.Motility(t5 | t6);
      t4._location = C.SpawnLocation_1;
      t4 = R.breed("brown bat", 1, C.Color_142_82_55, 3, _null, 0.5, 50, 0);
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20));
      t4.count$2(2, 4);
      t4.attack$2(_s7_, 3);
      R.breed("giant bat", 4, C.Color_77_29_21, 24, _null, _null, 30, 0).attack$2(_s7_, 6);
      t4 = R.breed("cave bat", 6, C.Color_116_146_181, 30, _null, _null, 40, 0);
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20));
      t4.count$2(2, 5);
      t4.attack$2(_s7_, 6);
      t4 = R.family("c", 25, _null, _null, 25, _null, 20);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo(_s6_.split(_s1_), t2));
      t4._vision = 5;
      t4._hearing = 10;
      t4 = R.breed("mangy cur", 2, C.Color_255_238_168, 11, _null, _null, _null, 0);
      t4.count$1(4);
      t4.attack$2(_s7_, 4);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(6, 10));
      t4 = R.breed("wild dog", 4, C.Color_116_146_181, 20, _null, _null, _null, 0);
      t4.count$1(4);
      t4.attack$2(_s7_, 6);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(8, 10));
      t4 = R.breed("mongrel", 7, C.Color_179_74_4, 28, _null, _null, _null, 0);
      t4.count$2(2, 5);
      t4.attack$2(_s7_, 8);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      t4 = R.breed("wolf", 26, C.Color_226_223_240, 60, _null, _null, _null, 0);
      t4.count$2(3, 6);
      t4.attack$2(_s7_, 12);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      t4 = R.breed("varg", 30, C.Color_63_75_115, 80, _null, _null, _null, 0);
      t4.count$2(2, 6);
      t4.attack$2(_s7_, 16);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      t4 = R.breed("Skoll", 36, C.Color_222_156_33, 200, _null, _null, _null, 0);
      t4._flags = _s6_0;
      t4.minion$3(_s6_, 5, 9);
      t4.attack$2(_s7_, 20);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      t4 = R.breed("Hati", 40, C.Color_21_87_194, 250, _null, _null, _null, 0);
      t4._flags = _s6_0;
      t4.minion$3(_s6_, 5, 9);
      t4.attack$2(_s7_, 23);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      t4 = R.breed("Fenrir", 44, C.Color_38_42_66, 300, _null, _null, _null, 0);
      t4._flags = _s6_0;
      t4.minion$3(_s6_, 3, 5);
      t4.minion$1("Skoll");
      t4.minion$1("Hati");
      t4.attack$2(_s7_, 26);
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, 10));
      E.dragons();
      t4 = R.family("e", _null, "immobile", _null, _null, _null, _null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("eye".split(_s1_), t2));
      t4._vision = 16;
      t4._hearing = 1;
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(10));
      t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t6);
      t4._location = C.SpawnLocation_1;
      t4 = R.breed("lazy eye", 5, C.Color_64_163_229, 20, _null, _null, _null, 0);
      t4.attack$2(_s11_, 8);
      t5 = $.$get$Elements_lightning();
      t4._bolt$6$damage$range$rate(_s9_, _s4_, t5, 12, 8, 5);
      t4 = R.breed("mad eye", 9, C.Color_255_122_105, 40, _null, _null, _null, 0);
      t4.attack$2(_s11_, 8);
      t7 = $.$get$Elements_air();
      t4.bolt$4$damage$range$rate(t7, 15, 8, 6);
      t4 = R.breed("floating eye", 15, C.Color_255_238_168, 60, _null, _null, _null, 0);
      t4.attack$2(_s11_, 10);
      t4._bolt$6$damage$range$rate(_s9_, _s4_, t5, 24, 8, 4);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(7, 10));
      t4 = R.breed("baleful eye", 20, C.Color_179_74_4, 80, _null, _null, _null, 0);
      t4.attack$2(_s12_, 12);
      t8 = $.$get$Elements_fire();
      t4.bolt$4$damage$range$rate(t8, 20, 8, 4);
      t9 = $.$get$Elements_water();
      t4._bolt$6$damage$range$rate("the jet", _s8_0, t9, 20, 8, 4);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(9, 10));
      t4 = R.breed("malevolent eye", 30, C.Color_204_35_57, 120, _null, _null, _null, 0);
      t4.attack$2(_s12_, 20);
      t10 = $.$get$Elements_light();
      t4.bolt$4$damage$range$rate(t10, 20, 10, 4);
      t11 = $.$get$Elements_dark();
      t4.bolt$4$damage$range$rate(t11, 20, 10, 4);
      t4.cone$4$damage$range$rate(t8, 30, _null, 7);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(9, 10));
      t4 = R.breed("murderous eye", 40, C.Color_84_0_39, 180, _null, _null, _null, 0);
      t4.attack$2(_s12_, 30);
      t12 = $.$get$Elements_acid();
      t4.bolt$4$damage$range$rate(t12, 40, 8, 7);
      t13 = $.$get$Elements_earth();
      t4._bolt$6$damage$range$rate(_s9_0, _s4_0, t13, 40, 8, 7);
      t14 = $.$get$Elements_cold();
      t4.cone$4$damage$range$rate(t14, 30, _null, 7);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(9, 10));
      t4 = R.breed("watcher", 60, C.Color_116_146_181, 300, _null, _null, _null, 0);
      t4.attack$2("see[s]", 50);
      t4.bolt$4$damage$range$rate(t10, 40, 10, 7);
      t4.cone$4$damage$range$rate(t10, 30, _null, 7);
      t4.bolt$4$damage$range$rate(t11, 50, 10, 7);
      t4.cone$4$damage$range$rate(t11, 40, _null, 7);
      t4 = R.family("f", _null, _null, _null, _null, _null, _null);
      t4._vision = 10;
      t4._hearing = 8;
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("feline".split(_s1_), t2));
      t4 = R.breed("stray cat", 1, C.Color_222_156_33, 11, _null, _null, 30, 1);
      t4.attack$2(_s7_, 5);
      t4.attack$2(_s11_0, 4);
      t4 = R.family("g", _null, _null, _null, 10, _null, _null);
      t4._vision = 8;
      t4._hearing = 4;
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo(_s6_1.split(_s1_), t2));
      t10 = t4._builder0$_motility;
      t15 = $.$get$Motility_door();
      t10 = t10._bitMask;
      t15 = t15._bitMask;
      t4._builder0$_motility = new Q.Motility(t10 | t15);
      t10 = R.breed("goblin peon", 4, C.Color_189_144_108, 30, _null, _null, 20, 0);
      t10.count$1(4);
      t10.attack$2(_s7_0, 8);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_1, 8));
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s5_, 5);
      t10.drop$2$percent(_s7_1, 10);
      t10 = R.breed("goblin archer", 6, C.Color_22_117_38, 36, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_1, 0, 3);
      t10.attack$2(_s7_0, 4);
      t4 = $.$get$Element_none();
      t10._bolt$6$damage$range$rate(_s9_1, _s4_0, t4, 8, 8, 3);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent("bow", 10);
      t10.drop$2$percent("dagger", 5);
      t10.drop$2$percent(_s7_1, 10);
      t10 = R.breed("goblin fighter", 6, C.Color_142_82_55, 58, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_1, 1, 4);
      t10.attack$2(_s7_0, 12);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s5_, 10);
      t10.drop$2$percent(_s5_0, 10);
      t10.drop$2$percent(_s10_, 5);
      t10.drop$2$percent(_s7_1, 10);
      t10 = R.breed("goblin warrior", 8, C.Color_116_146_181, 68, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_1, 1, 5);
      t10.attack$2(_s7_0, 16);
      t10.drop$2$percent(_s8_1, 25);
      t10.drop$2$percent("axe", 10);
      t10.drop$2$percent(_s5_0, 10);
      t10.drop$2$percent(_s10_, 5);
      t10.drop$2$percent(_s7_1, 10);
      t10._flags = _s10_0;
      t10 = R.breed("goblin mage", 9, C.Color_26_46_150, 50, _null, _null, _null, 0);
      t10.minion$3(_s6_1, 1, 4);
      t10.attack$2("whip[s]", 7);
      t10.bolt$4$damage$range$rate(t8, 12, 8, 12);
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 16, 8, 12);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent(_s5_1, 30);
      t10 = R.breed("goblin ranger", 12, C.Color_0_64_39, 60, _null, _null, _null, 0);
      t10.minion$3(_s6_1, 0, 5);
      t10.attack$2(_s7_0, 10);
      t10._bolt$6$damage$range$rate(_s9_1, _s4_0, t4, 12, 8, 3);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent("bow", 15);
      t10.drop$2$percent(_s5_0, 10);
      t10.drop$2$percent(_s5_1, 20);
      t10 = R.breed("Erlkonig, the Goblin Prince", 14, C.Color_38_42_66, 120, _null, _null, _null, 0);
      t10._pronoun = C.Pronoun_he_him_his;
      t10.minion$3(_s6_1, 4, 8);
      t10.attack$2(_s6_2, 10);
      t10.attack$2(_s9_2, 14);
      t10.bolt$4$damage$range$rate(t11, 20, 10, 20);
      t10.drop$2$count(_s8_1, 3);
      t10.drop$4$affixChance$count$depthOffset(_s9_3, 30, 2, 8);
      t10.drop$3$count$depthOffset(_s5_1, 3, 4);
      t10._flags = "protective unique";
      t10 = R.family("i", _null, _s8_, _null, 40, _null, 3);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("bug".split(_s1_), t2));
      t10._vision = 5;
      t10._hearing = 2;
      t10 = R.breed("giant cockroach[es]", 1, C.Color_77_29_21, 1, _null, 0.4, _null, 0);
      t10.count$2(2, 5);
      t10._location = C.SpawnLocation_3;
      t10.attack$2(_s11_1, 2);
      t16 = L.SpawnMove$(6, _null);
      C.JSArray_methods.add$1(t10._moves, t16);
      description = H.stringReplaceAllUnchecked("It's not quite as easy to squash one of these when it's as long as\n      your arm.", t1, _s1_);
      $._builder._description = description;
      t10 = R.breed("giant centipede", 3, C.Color_204_35_57, 14, _null, _null, 20, 2);
      t10.attack$2(_s11_1, 4);
      t10.attack$2(_s7_, 8);
      t10 = R.family("i", _null, _s8_, _null, 40, _null, 3);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("fly".split(_s1_), t2));
      t10._vision = 5;
      t10._hearing = 2;
      t10 = R.breed("firefly", 8, C.Color_179_74_4, 6, _null, _null, 70, 1);
      t10.count$2(3, 8);
      t10.attack$3(_s7_, 12, t8);
      t10 = R.family("j", _null, _s8_, 0.7, 30, -1, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("jelly".split(_s1_), t2));
      t10._vision = 3;
      t10._hearing = 1;
      t10._location = C.SpawnLocation_2;
      t10.count$1(4);
      t10 = R.breed("green jelly", 1, C.Color_131_158_13, 5, _null, _null, _null, 0);
      t16 = t10._stain = $.$get$Tiles_greenJellyStain();
      t10.attack$2(_s11_1, 3);
      t10 = R.family("j", _null, _s17_, 0.6, _null, _null, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("jelly".split(_s1_), t2));
      t10._vision = 2;
      t10._hearing = 1;
      t10._location = C.SpawnLocation_3;
      t10.count$1(4);
      t10 = R.breed("green slime", 2, C.Color_22_117_38, 10, _null, _null, _null, 0);
      t10._stain = t16;
      t10.attack$2(_s11_1, 4);
      t17 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t10._moves, t17);
      t17 = R.breed("frosty slime", 4, C.Color_226_223_240, 14, _null, _null, _null, 0);
      t17._stain = $.$get$Tiles_whiteJellyStain();
      t17.attack$3(_s11_1, 5, t14);
      t10 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t17._moves, t10);
      t10 = R.breed("mud slime", 6, C.Color_142_82_55, 20, _null, _null, _null, 0);
      t10._stain = $.$get$Tiles_brownJellyStain();
      t10.attack$3(_s11_1, 8, t13);
      t17 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t10._moves, t17);
      t17 = R.breed("smoking slime", 15, C.Color_204_35_57, 30, _null, _null, _null, 0);
      t17._emanationLevel = 4;
      t17._stain = $.$get$Tiles_redJellyStain();
      t17.attack$3(_s11_1, 10, t8);
      t10 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t17._moves, t10);
      t10 = R.breed("sparkling slime", 20, C.Color_86_30_138, 40, _null, _null, _null, 0);
      t10._emanationLevel = 3;
      t10._stain = $.$get$Tiles_violetJellyStain();
      t10.attack$3(_s11_1, 12, t5);
      t17 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t10._moves, t17);
      t17 = R.breed("caustic slime", 25, C.Color_129_217_117, 50, _null, _null, _null, 0);
      t17._stain = t16;
      t17.attack$3(_s11_1, 13, t12);
      t10 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t17._moves, t10);
      t10 = R.breed("virulent slime", 35, C.Color_0_64_39, 60, _null, _null, _null, 0);
      t10._stain = t16;
      t10.attack$3(_s11_1, 14, t3);
      t16 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t10._moves, t16);
      t16 = R.breed("ectoplasm", 45, C.Color_38_42_66, 40, _null, _null, _null, 0);
      t16._stain = $.$get$Tiles_grayJellyStain();
      t16.attack$3(_s11_1, 15, $.$get$Elements_spirit());
      t10 = L.SpawnMove$(4, _null);
      C.JSArray_methods.add$1(t16._moves, t10);
      t10 = R.family("k", _null, _s8_2, _null, 15, _null, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo(_s6_3.split(_s1_), t2));
      t10._vision = 10;
      t10._hearing = 4;
      t10 = R.breed("scurrilous imp", 1, C.Color_255_122_105, 12, _null, _null, 20, 0);
      t10.count$1(2);
      t10.attack$2("club[s]", 4);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_1, 5));
      t10.haste$0();
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s4_2, 10);
      t10.drop$2$percent("speed", 20);
      t10 = R.breed("vexing imp", 2, C.Color_86_30_138, 16, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_3, 0, 1);
      t10.attack$2(_s11_0, 4);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_1, 5));
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 6, 8, 5);
      t10.drop$2$percent(_s8_1, 25);
      t10.drop$2$percent("teleportation", 20);
      C.JSArray_methods.addAll$1(R.family("k", _null, _null, _null, 20, _null, _null)._groups, H.setRuntimeTypeInfo(_s6_3.split(_s1_), t2));
      t10 = R.breed(_s6_3, 3, C.Color_204_35_57, 20, _null, _null, _null, 0);
      t10.count$1(3);
      t10.minion$3(_s6_, 0, 3);
      t10.attack$2(_s7_2, 4);
      C.JSArray_methods.add$1(t10._moves, new S.TeleportMove(6, 10));
      t10.drop$2$percent(_s8_1, 25);
      t10.drop$2$percent(_s9_3, 10);
      t10.drop$2$percent(_s5_1, 20);
      t10 = R.breed("kobold shaman", 4, C.Color_26_46_150, 20, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_, 0, 3);
      t10.attack$2(_s6_2, 4);
      t10._bolt$6$damage$range$rate("the jet", _s8_0, t9, 8, 8, 10);
      t10.drop$2$percent(_s8_1, 25);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent(_s5_1, 20);
      t10 = R.breed("kobold trickster", 5, C.Color_222_156_33, 24, _null, _null, _null, 0);
      t10.attack$2(_s6_2, 5);
      t9 = t10._moves;
      C.JSArray_methods.add$1(t9, new R.MissiveMove(C.Missive_1, 5));
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 8, 8, 5);
      C.JSArray_methods.add$1(t9, new S.TeleportMove(6, 7));
      t10.haste$1$rate(7);
      t10.drop$2$percent(_s8_1, 35);
      t10.drop$2$percent(_s5_1, 20);
      t10 = R.breed("kobold priest", 6, C.Color_21_87_194, 30, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_3, 1, 3);
      t10.attack$2("club[s]", 6);
      C.JSArray_methods.add$1(t10._moves, new O.HealMove(10, 15));
      t10.haste$1$rate(7);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s4_2, 10);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent(_s5_1, 30);
      t10 = R.breed("imp incanter", 7, C.Color_173_88_219, 33, _null, _null, _null, 0);
      t10.count$1(2);
      t10.minion$3(_s6_3, 1, 3);
      t10.minion$3(_s6_, 0, 3);
      t10.attack$2(_s11_0, 4);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_1, 6));
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 10, 8, 5);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent(_s5_1, 35);
      t10._flags = _s8_2;
      t10 = R.breed("imp warlock", 8, C.Color_56_16_125, 46, _null, _null, _null, 0);
      t10.minion$3(_s6_3, 2, 5);
      t10.minion$3(_s6_, 0, 3);
      t10.attack$2(_s7_0, 5);
      t10._bolt$6$damage$range$rate("the ice", "freezes", t14, 12, 8, 8);
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 12, 8, 8);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent("staff", 20);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent(_s5_1, 30);
      t10 = R.breed("Feng", 10, C.Color_179_74_4, 80, _null, _null, 10, 1);
      t10._pronoun = C.Pronoun_he_him_his;
      t10.minion$3(_s6_3, 4, 10);
      t10.minion$3(_s6_, 1, 3);
      t10.attack$2(_s7_0, 5);
      t14 = t10._moves;
      C.JSArray_methods.add$1(t14, new R.MissiveMove(C.Missive_1, 7));
      C.JSArray_methods.add$1(t14, new S.TeleportMove(6, 5));
      C.JSArray_methods.add$1(t14, new S.TeleportMove(30, 50));
      t10.cone$4$damage$range$rate(t5, 12, _null, 8);
      t10.drop$3$count$depthOffset(_s8_1, 3, 5);
      t10.drop$4$affixChance$depthOffset$percent(_s5_, 20, 5, 20);
      t10.drop$4$affixChance$depthOffset$percent(_s5_0, 10, 5, 30);
      t10.drop$3$count$depthOffset(_s5_1, 2, 5);
      t10._flags = _s6_0;
      t10 = R.family("l", _null, _s8_, _null, 10, _null, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo(_s7_3.split(_s1_), t2));
      t10._vision = 10;
      t10._hearing = 5;
      C.JSArray_methods.add$1(t10._defenses, new U.Defense(5));
      t10 = R.breed("lizard guard", 11, C.Color_222_156_33, 26, _null, _null, _null, 0);
      t10.attack$2(_s7_4, 8);
      t10.attack$2(_s7_, 10);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent(_s5_0, 10);
      t10.drop$2$percent(_s5_, 10);
      t10 = R.breed("lizard protector", 15, C.Color_131_158_13, 30, _null, _null, _null, 0);
      t10.minion$3(_s7_3, 0, 2);
      t10.attack$2(_s7_4, 10);
      t10.attack$2(_s7_, 14);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent(_s5_0, 10);
      t10.drop$2$percent(_s5_, 10);
      t10 = R.breed("armored lizard", 17, C.Color_116_146_181, 38, _null, _null, _null, 0);
      t10.minion$3(_s7_3, 0, 2);
      t10.attack$2(_s7_4, 10);
      t10.attack$2(_s7_, 15);
      t10.drop$2$percent(_s8_1, 30);
      t10.drop$2$percent(_s5_0, 20);
      t10.drop$2$percent(_s5_, 10);
      t10 = R.breed("scaled guardian", 19, C.Color_38_42_66, 50, _null, _null, _null, 0);
      t10.minion$3(_s7_3, 0, 3);
      t10.minion$3(_s10_1, 0, 2);
      t10.attack$2(_s7_4, 10);
      t10.attack$2(_s7_, 15);
      t10.drop$2$percent(_s8_1, 40);
      t10.drop$2$percent(_s9_3, 10);
      t10 = R.breed(_s7_3, 21, C.Color_179_74_4, 64, _null, _null, _null, 0);
      t10.minion$3(_s7_3, 1, 4);
      t10.minion$3(_s10_1, 0, 2);
      t10.attack$2(_s7_4, 12);
      t10.attack$2(_s7_, 17);
      t10.drop$2$percent(_s8_1, 50);
      t10.drop$2$percent(_s9_3, 10);
      t10 = R.family("o", _null, _null, _null, 10, _null, _null);
      t10._vision = 7;
      t10._hearing = 6;
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("orc".split(_s1_), t2));
      t10._builder0$_motility = new Q.Motility(t10._builder0$_motility._bitMask | t15);
      t10._flags = _s10_0;
      t10 = R.breed("orc", 28, C.Color_179_74_4, 100, _null, _null, _null, 0);
      t10.count$2(3, 6);
      t10.attack$2(_s7_0, 12);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s9_3, 5);
      t10.drop$2$percent(_s5_, 5);
      t10 = R.breed("orc brute", 29, C.Color_129_217_117, 120, _null, _null, _null, 0);
      t10.count$1(1);
      t10.minion$3("orc", 2, 5);
      t10.attack$2("bash[es]", 16);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent(_s4_2, 10);
      t10.drop$2$percent(_s5_0, 10);
      t10 = R.breed("orc soldier", 30, C.Color_116_146_181, 140, _null, _null, _null, 0);
      t10.count$2(4, 6);
      t10.minion$3("orcus", 1, 5);
      t10.attack$2(_s7_0, 20);
      t10.drop$2$percent(_s8_1, 25);
      t10.drop$2$percent("axe", 10);
      t10.drop$2$percent(_s5_0, 10);
      t10 = R.breed("orc chieftain", 31, C.Color_204_35_57, 180, _null, _null, _null, 0);
      t10.minion$3("orcus", 2, 10);
      t10.attack$2(_s7_0, 10);
      t10.drop$3$count$percent(_s8_1, 2, 40);
      t10.drop$2$percent(_s9_3, 20);
      t10.drop$2$percent(_s4_3, 20);
      t10 = R.family("p", _null, _null, _null, 10, _null, 14);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("human".split(_s1_), t2));
      t10._vision = 10;
      t10._hearing = 5;
      t10._builder0$_motility = new Q.Motility(t10._builder0$_motility._bitMask | t15);
      t10._emanationLevel = 2;
      t10 = R.breed("Harold the Misfortunate", 1, C.Color_173_88_219, 30, _null, _null, _null, 0);
      t10._pronoun = C.Pronoun_he_him_his;
      t10.attack$2(_s6_2, 3);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_0, 5));
      t10.drop$2$percent(_s8_1, 80);
      t10.drop$3$depthOffset$percent(_s6_4, 4, 20);
      t10.drop$3$depthOffset$percent(_s5_0, 4, 30);
      t10.drop$3$depthOffset$percent(_s5_1, 4, 40);
      t10._flags = _s6_0;
      t10 = R.breed("hapless adventurer", 1, C.Color_255_238_168, 14, 15, _null, 30, 0);
      t10.attack$2(_s6_2, 3);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_0, 12));
      t10.drop$2$percent(_s8_1, 15);
      t10.drop$2$percent(_s6_4, 10);
      t10.drop$2$percent(_s5_0, 15);
      t10.drop$2$percent(_s5_1, 20);
      t10._flags = _s8_2;
      t10 = R.breed("simpering knave", 2, C.Color_179_74_4, 17, _null, _null, _null, 0);
      t10.attack$2(_s6_2, 2);
      t10.attack$2(_s7_0, 4);
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent("whip", 10);
      t10.drop$2$percent(_s5_0, 15);
      t10.drop$2$percent(_s5_1, 20);
      t10._flags = _s8_2;
      t10 = R.breed("decrepit mage", 3, C.Color_86_30_138, 20, _null, _null, 30, 0);
      t10.attack$2(_s6_2, 2);
      t10._bolt$6$damage$range$rate(_s9_, _s4_, t5, 8, 8, 10);
      t10.drop$2$percent(_s8_1, 15);
      t10.drop$2$percent(_s5_1, 30);
      t10.drop$2$percent("dagger", 5);
      t10.drop$2$percent("staff", 5);
      t10.drop$2$percent(_s4_1, 10);
      t10.drop$2$percent("boots", 5);
      t10 = R.breed("unlucky ranger", 5, C.Color_22_117_38, 30, 25, _null, 20, 0);
      t10.attack$2(_s9_2, 2);
      t10._bolt$6$damage$range$rate(_s9_1, _s4_0, t4, 2, 8, 4);
      C.JSArray_methods.add$1(t10._moves, new R.MissiveMove(C.Missive_0, 10));
      t10.drop$2$percent(_s8_1, 20);
      t10.drop$2$percent("potion", 20);
      t10.drop$2$percent("bow", 10);
      t10.drop$2$percent("body", 20);
      t10 = R.breed("drunken priest", 5, C.Color_21_87_194, 34, _null, _null, 40, 0);
      t10.attack$2(_s6_2, 8);
      t4 = t10._moves;
      C.JSArray_methods.add$1(t4, new O.HealMove(8, 15));
      C.JSArray_methods.add$1(t4, new R.MissiveMove(C.Missive_0, 5));
      t10.drop$2$percent(_s8_1, 35);
      t10.drop$2$percent("scroll", 20);
      t10.drop$2$percent(_s4_2, 10);
      t10.drop$2$percent(_s4_1, 10);
      t10._flags = _s8_;
      t10 = R.family("r", 30, _null, _null, 30, _null, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("rodent".split(_s1_), t2));
      t10._vision = 4;
      t10._hearing = 6;
      t10._location = C.SpawnLocation_2;
      t10 = R.breed("[mouse|mice]", 1, C.Color_189_144_108, 2, _null, 0.7, _null, 0);
      t10.count$2(2, 5);
      t10.attack$2(_s7_, 3);
      t10.attack$2(_s11_0, 2);
      t10 = R.breed("sewer rat", 2, C.Color_38_42_66, 8, _null, _null, 20, 0);
      t10.count$2(1, 4);
      t10.attack$2(_s7_, 4);
      t10.attack$2(_s11_0, 3);
      t10 = R.breed("sickly rat", 3, C.Color_22_117_38, 10, _null, _null, _null, 0);
      t10.attack$3(_s7_, 8, t3);
      t10.attack$2(_s11_0, 4);
      t10 = R.breed("plague rat", 6, C.Color_131_158_13, 20, _null, _null, _null, 0);
      t10.count$2(1, 4);
      t10.attack$3(_s7_, 15, t3);
      t10.attack$2(_s11_0, 8);
      t10 = R.breed("giant rat", 8, C.Color_179_74_4, 40, _null, _null, _null, 0);
      t10.attack$2(_s7_, 12);
      t10.attack$2(_s11_0, 8);
      t10 = R.breed("The Rat King", 8, C.Color_84_0_39, 120, _null, _null, _null, 0);
      t10._pronoun = C.Pronoun_he_him_his;
      t10.attack$2(_s7_, 16);
      t10.attack$2(_s11_0, 10);
      t10.minion$3("rodent", 8, 16);
      t10.drop$2$count(_s8_1, 3);
      t10.drop$4$affixChance$depthOffset$percent(_s4_3, 10, 10, 50);
      t10._flags = _s6_0;
      t10 = R.family("s", 5, _s8_, _null, 30, -3, 2);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("slug".split(_s1_), t2));
      t10._vision = 3;
      t10._hearing = 1;
      R.breed("giant slug", 3, C.Color_99_87_7, 20, _null, _null, _null, 0).attack$2(_s11_1, 8);
      R.breed("suppurating slug", 6, C.Color_131_158_13, 50, _null, _null, _null, 0).attack$3(_s11_1, 12, t3);
      R.breed("acidic slug", 9, C.Color_99_87_7, 70, _null, _null, _null, 0).attack$3(_s11_1, 16, t12);
      t10 = R.family("v", _null, _s17_, _null, _null, _null, _null);
      C.JSArray_methods.addAll$1(t10._groups, H.setRuntimeTypeInfo("vine".split(_s1_), t2));
      t10._hearing = t10._vision = 10;
      R.breed("choker", 16, C.Color_22_117_38, 40, _null, _null, _null, 0).attack$2(_s8_3, 12);
      t10 = R.breed("nightshade", 19, C.Color_173_88_219, 50, _null, _null, _null, 0);
      t10.whip$2$damage$rate(10, 3);
      t10.attack$3("touch[es]", 12, t3);
      t3 = R.breed("creeper", 22, C.Color_131_158_13, 60, _null, _null, _null, 0);
      t3.toString;
      t10 = L.SpawnMove$(10, true);
      C.JSArray_methods.add$1(t3._moves, t10);
      t3.whip$2$damage$rate(10, 3);
      t3.attack$2(_s8_3, 8);
      R.breed("strangler", 26, C.Color_0_64_39, 80, _null, _null, _null, 0).attack$2(_s8_3, 14);
      t3 = R.family("w", 15, _s8_, _null, 40, _null, _null);
      C.JSArray_methods.addAll$1(t3._groups, H.setRuntimeTypeInfo("worm".split(_s1_), t2));
      t3._vision = 2;
      t3._hearing = 3;
      t3 = R.breed("blood worm", 1, C.Color_84_0_39, 4, _null, 0.5, _null, 0);
      t3.count$2(2, 5);
      t3.attack$2(_s11_1, 5);
      t3 = R.breed("fire worm", 10, C.Color_179_74_4, 6, _null, _null, _null, 0);
      t3.count$2(2, 6);
      t3._location = C.SpawnLocation_2;
      t3.attack$3(_s11_1, 5, t8);
      C.JSArray_methods.addAll$1(R.family("w", 10, _s8_, _null, 30, _null, _null)._groups, H.setRuntimeTypeInfo("worm".split(_s1_), t2));
      R.breed("giant earthworm", 3, C.Color_255_122_105, 20, _null, _null, _null, -2).attack$2(_s11_1, 5);
      R.breed("giant cave worm", 7, C.Color_189_144_108, 80, _null, _null, _null, -2).attack$3(_s11_1, 12, t12);
      t12 = R.family("x", _null, _null, _null, 30, _null, _null);
      C.JSArray_methods.addAll$1(t12._groups, H.setRuntimeTypeInfo(_s8_4.split(_s1_), t2));
      t12._hearing = t12._vision = 4;
      R.breed(_s9_4, 3, C.Color_63_75_115, 16, _null, 3, 40, -1).attack$2(_s7_4, 6);
      R.breed(_s8_5, 4, C.Color_116_146_181, 22, _null, 4, 40, 0).attack$2(_s7_4, 8);
      R.breed(_s13_, 7, C.Color_189_144_108, 28, _null, 3, 40, -2).attack$2(_s7_, 10);
      t12 = R.breed(_s20_, 10, C.Color_255_238_168, 38, _null, 4, 60, 0);
      t12._hearing = t12._vision = 0;
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t15);
      t12.attack$2(_s7_4, 7);
      t12.drop$2$percent(_s8_1, 30);
      t12.drop$2$percent(_s6_4, 10);
      t12.drop$2$percent(_s5_0, 10);
      t12 = R.breed(_s16_, 12, C.Color_129_217_117, 40, _null, 4, _null, 0);
      t12.attack$2(_s7_, 9);
      t12.attack$2("kick[s]", 7);
      t12.drop$2$percent(_s8_1, 30);
      t12.drop$2$percent(_s5_0, 10);
      t12 = R.breed(_s18_, 13, C.Color_131_158_13, 46, _null, 5, _null, 0);
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t15);
      t12.attack$2(_s7_4, 7);
      t3 = new B.BreedRef(_s16_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s8_5);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t4 = t12._moves;
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t10 = new B.BreedRef(_s16_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t3 = new B.BreedRef(_s9_4);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t10, t3, 1));
      t12.drop$2$percent(_s8_1, 30);
      t12.drop$2$percent(_s6_4, 5);
      t12.drop$2$percent(_s5_0, 10);
      t12 = R.breed(_s8_4, 15, C.Color_226_223_240, 50, _null, 6, _null, 0);
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t15);
      t12.attack$2(_s7_4, 7);
      t12.attack$2(_s7_, 9);
      t3 = new B.BreedRef(_s20_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s13_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t4 = t12._moves;
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t10 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t3 = new B.BreedRef(_s8_5);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t10, t3, 1));
      t3 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s9_4);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t12.drop$2$percent(_s8_1, 40);
      t12.drop$2$percent(_s6_4, 10);
      t12.drop$2$percent(_s5_0, 10);
      t12 = R.breed("skeleton warrior", 17, C.Color_255_122_105, 70, _null, 6, _null, 0);
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t15);
      t12.attack$2(_s9_2, 13);
      t12.attack$2(_s7_0, 10);
      t10 = new B.BreedRef(_s20_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t3 = new B.BreedRef(_s13_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t4 = t12._moves;
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t10, t3, 1));
      t3 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s8_5);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t10 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t3 = new B.BreedRef(_s9_4);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t10, t3, 1));
      t12.drop$2$percent(_s8_1, 50);
      t12.drop$2$percent(_s6_4, 20);
      t12.drop$2$percent(_s5_0, 15);
      t12 = R.breed("robed skeleton", 19, C.Color_173_88_219, 70, _null, 4, _null, 0);
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t15);
      t12.attack$2(_s9_2, 13);
      t12.attack$2(_s7_0, 10);
      t12.bolt$4$damage$range$rate(t5, 15, 10, 8);
      t3 = new B.BreedRef(_s20_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s13_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t4 = t12._moves;
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t10 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      t3 = new B.BreedRef(_s8_5);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t10, t3, 1));
      t3 = new B.BreedRef(_s18_);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t3);
      t10 = new B.BreedRef(_s9_4);
      C.JSArray_methods.add$1($.BreedRef__unresolved, t10);
      C.JSArray_methods.add$1(t4, new Q.AmputateMove(t3, t10, 1));
      t12.drop$2$percent(_s8_1, 50);
      t12.drop$2$percent(_s5_1, 20);
      t12.drop$2$percent(_s5_0, 10);
      t12 = R.family("B", _null, _null, _null, _null, _null, _null);
      C.JSArray_methods.addAll$1(t12._groups, H.setRuntimeTypeInfo("bird".split(_s1_), t2));
      t12._vision = 8;
      t12._hearing = 6;
      C.JSArray_methods.add$1(t12._defenses, new U.Defense(10));
      t12._builder0$_motility = new Q.Motility(t12._builder0$_motility._bitMask | t6);
      t12.count$2(3, 6);
      t12 = R.breed("crow", 4, C.Color_38_42_66, 7, _null, _null, 30, 2);
      t12.attack$2(_s7_, 5);
      t12.drop$2$percent(_s8_1, 10);
      description = H.stringReplaceAllUnchecked('"What harm can a stupid little crow do?" you think as it and its\n      murderous friends dive towards your eyes, claws extended.', t1, _s1_);
      $._builder._description = description;
      t3 = R.breed("raven", 6, C.Color_63_75_115, 16, _null, _null, 15, 0);
      t3.attack$2(_s7_, 5);
      t3.attack$2(_s7_4, 4);
      t3.drop$2$percent(_s8_1, 10);
      t3._flags = _s10_0;
      description = H.stringReplaceAllUnchecked("It's black eyes gleam with a malevolent intelligence.", t1, _s1_);
      $._builder._description = description;
      t1 = R.family("F", _null, _s8_2, _null, 30, 2, _null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("fae".split(_s1_), t2));
      t1._vision = 10;
      t1._hearing = 8;
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(10));
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("forest sprite", 2, C.Color_129_217_117, 6, _null, _null, _null, 0);
      t1.attack$2(_s11_0, 3);
      C.JSArray_methods.add$1(t1._moves, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate(_s9_, _s4_, t5, 4, 8, 7);
      t1.drop$2$percent(_s8_1, 10);
      t1.drop$2$percent(_s5_1, 30);
      t1 = R.breed("house sprite", 5, C.Color_64_163_229, 10, _null, _null, _null, 0);
      t1.attack$2(_s7_2, 5);
      t3 = t1._moves;
      C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate(_s9_0, _s4_0, t13, 4, 8, 10);
      C.JSArray_methods.add$1(t3, new S.TeleportMove(4, 7));
      t1.drop$2$percent(_s8_1, 10);
      t1.drop$2$percent(_s5_1, 30);
      t1 = R.breed("mischievous sprite", 7, C.Color_255_122_105, 24, _null, _null, _null, 0);
      t1.attack$2(_s7_2, 6);
      t3 = t1._moves;
      C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
      t1.bolt$4$damage$range$rate(t7, 8, 8, 8);
      C.JSArray_methods.add$1(t3, new S.TeleportMove(5, 5));
      t1.drop$2$percent(_s8_1, 10);
      t1.drop$2$percent(_s5_1, 30);
      t1 = R.breed("Tink", 8, C.Color_22_117_38, 40, _null, _null, 10, 0);
      t1._pronoun = C.Pronoun_she_her_her;
      t1.attack$2(_s7_2, 8);
      t3 = t1._moves;
      C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate(_s9_, _s4_, t5, 4, 8, 7);
      t1.bolt$4$damage$range$rate(t7, 7, 8, 8);
      C.JSArray_methods.add$1(t3, new S.TeleportMove(5, 5));
      t1.drop$2$count(_s8_1, 2);
      t1.drop$3$count$depthOffset(_s5_1, 3, 3);
      t1._flags = _s6_0;
      t1 = R.family("H", _null, _null, _null, _null, _null, _null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("hybrid".split(_s1_), t2));
      t1._vision = 10;
      t1._hearing = 12;
      t1 = R.breed("harpy", 25, C.Color_173_88_219, 50, _null, _null, _null, 2);
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
      t1.count$2(2, 5);
      t1.attack$2(_s7_, 10);
      t1.attack$2(_s11_0, 15);
      t1 = t1._moves;
      C.JSArray_methods.add$1(t1, new U.HowlMove(10, 10));
      C.JSArray_methods.add$1(t1, new R.MissiveMove(C.Missive_2, 5));
      t1 = R.breed("griffin", 35, C.Color_222_156_33, 200, _null, _null, _null, 0);
      t1.attack$2(_s7_, 20);
      t1.attack$2(_s11_0, 15);
      C.JSArray_methods.addAll$1(R.family("Q", _null, _null, _null, _null, _null, _null)._groups, H.setRuntimeTypeInfo("magical".split(_s1_), t2));
      t1 = R.breed("Nameless Unmaker", 100, C.Color_86_30_138, 1000, _null, _null, _null, 2);
      t1._hearing = t1._vision = 16;
      t1.attack$3("crushe[s]", 250, t13);
      t1.attack$3("blast[s]", 200, t5);
      t1.cone$4$damage$range$rate(t11, 500, _null, _null);
      t1._flags = "fearless unique";
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t15);
      t1.drop$3$affixChance$count(_s4_3, 50, 20);
      C.JSArray_methods.addAll$1(R.family("R", _null, _null, _null, _null, _null, _null)._groups, H.setRuntimeTypeInfo("herp".split(_s1_), t2));
      t1 = R.breed("frog", 1, C.Color_131_158_13, 4, 30, _null, 30, 0);
      t1._vision = 6;
      t1._hearing = 4;
      t15 = t1._builder0$_motility;
      t11 = $.$get$Motility_swim();
      t1._builder0$_motility = new Q.Motility(t15._bitMask | t11._bitMask);
      t1.attack$2("hop[s] on", 2);
      t1 = R.family("R", 30, _null, _null, 20, _null, _null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo(_s10_1.split(_s1_), t2));
      t1._vision = 6;
      t1._hearing = 5;
      t1._location = C.SpawnLocation_1;
      t1._emanationLevel = 3;
      t1 = R.breed("juvenile salamander", 7, C.Color_255_122_105, 20, _null, _null, _null, 0);
      t1.attack$3(_s7_, 14, t8);
      t1.cone$4$damage$range$rate(t8, 20, 4, 16);
      t1 = R.breed(_s10_1, 13, C.Color_204_35_57, 30, _null, _null, _null, 0);
      t1.attack$3(_s7_, 18, t8);
      t1.cone$4$damage$range$rate(t8, 30, 5, 16);
      t1 = R.breed("three-headed salamander", 23, C.Color_84_0_39, 90, _null, _null, _null, 0);
      t1.attack$3(_s7_, 24, t8);
      t1.cone$4$damage$range$rate(t8, 20, 5, 10);
      t8 = R.family("S", 30, _null, _null, 30, _null, _null);
      C.JSArray_methods.addAll$1(t8._groups, H.setRuntimeTypeInfo("snake".split(_s1_), t2));
      t8._vision = 4;
      t8._hearing = 7;
      R.breed("water snake", 1, C.Color_131_158_13, 9, _null, _null, _null, 0).attack$2(_s7_, 3);
      R.breed("brown snake", 3, C.Color_142_82_55, 25, _null, _null, _null, 0).attack$2(_s7_, 4);
      R.breed("cave snake", 8, C.Color_116_146_181, 40, _null, _null, _null, 0).attack$2(_s7_, 10);
      R.finishBreed();
      t8 = $.$get$Monsters_breeds();
      B.BreedRef_resolve(t8.get$find(t8));
    }
  },
  M = {BattleHardening: function BattleHardening(t0) {
      this._sortOrder = t0;
    }, Skill: function Skill() {
    }, UsableSkill: function UsableSkill() {
    }, TargetSkill: function TargetSkill() {
    }, Discipline: function Discipline() {
    }, Spell: function Spell() {
    }, SkillSet: function SkillSet(t0, t1) {
      this._levels = t0;
      this._points = t1;
    }, SkillSet_acquired_closure: function SkillSet_acquired_closure(t0) {
      this.$this = t0;
    }, _Spell_Skill_UsableSkill: function _Spell_Skill_UsableSkill() {
    }, MonsterState: function MonsterState() {
    }, AsleepState: function AsleepState() {
    },
    Array2D$: function(width, height, value, $T) {
      return new M.Array2D(P.List_List$filled(width * height, value, $T), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [$T]);
    },
    Array2D: function Array2D(t0, t1, t2) {
      this._elements = t0;
      this.bounds = t1;
      this.$ti = t2;
    },
    Blob_make: function(size) {
      var blob, _null = null;
      if (size >= 64) {
        size = C.JSInt_methods._tdivFast$1(size, 8) * 8;
        blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 8), 2, _null);
        blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 4), 3, blob);
        blob = M.Blob__make(size, 6, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 5, blob));
      } else if (size >= 32) {
        size = C.JSInt_methods._tdivFast$1(size, 4) * 4;
        blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 4), 2, _null);
        blob = M.Blob__make(size, 5, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 3, blob));
      } else if (size >= 16) {
        size = C.JSInt_methods._tdivFast$1(size, 2) * 2;
        blob = M.Blob__make(size, 3, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 2, _null));
      } else
        blob = M.Blob__make(size, 3, _null);
      return M.Blob__crop(blob);
    },
    Blob__make: function(size, smoothing, input) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, value, center, maxLength, i, t0, walls, t11, _i, neighbor, t12,
        t1 = P.bool,
        cells = M.Array2D$(size, size, false, t1),
        dest = M.Array2D$(size, size, false, t1);
      if (input != null)
        for (t1 = cells.bounds, t2 = X.RectIterator$(t1.inflate$1(-1)), t3 = H.getTypeArgumentByIndex(cells, 0), t4 = cells._elements, t1 = t1.size.x, t5 = input._elements, t6 = input.bounds.size.x, t7 = t5.length; t2.moveNext$0();) {
          t8 = t2._x;
          t9 = t2._y;
          t10 = C.JSInt_methods._tdivFast$1(t8, 2);
          t10 = C.JSInt_methods._tdivFast$1(t9, 2) * t6 + t10;
          if (t10 < 0 || t10 >= t7)
            return H.ioore(t5, t10);
          value = H.boolConversionCheck(t5[t10]) ? 0.3 : 0.7;
          C.JSArray_methods.$indexSet(t4, t9 * t1 + t8, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) > value, t3));
        }
      else {
        t1 = cells.bounds;
        center = t1.get$center();
        maxLength = Math.sqrt(new L.Vec(t1.get$left(t1), t1.get$top(t1)).$sub(0, t1.get$center()).get$lengthSquared());
        for (t2 = X.RectIterator$(t1.inflate$1(-1)), t3 = H.getTypeArgumentByIndex(cells, 0), t4 = cells._elements, t1 = t1.size.x; t2.moveNext$0();) {
          t5 = t2._x;
          t6 = t2._y;
          t7 = new L.Vec(t5, t6).$sub(0, center);
          t8 = t7.x;
          t7 = t7.y;
          t7 = Math.sqrt(t8 * t8 + t7 * t7);
          C.JSArray_methods.$indexSet(t4, t6 * t1 + t5, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) > t7 / maxLength, t3));
        }
      }
      for (i = 0; i < smoothing; ++i, t0 = dest, dest = cells, cells = t0)
        for (t1 = cells.bounds, t2 = t1.inflate$1(-1), t3 = new X.RectIterator(t2), t2 = t2.pos, t3._x = t2.x - 1, t3._y = t2.y, t2 = H.getTypeArgumentByIndex(dest, 0), t4 = dest._elements, t5 = dest.bounds.size.x, t6 = cells._elements, t1 = t1.size.x, t7 = t6.length; t3.moveNext$0();) {
          t8 = t3._x;
          t9 = t3._y;
          t10 = t9 * t1 + t8;
          if (t10 < 0 || t10 >= t7)
            return H.ioore(t6, t10);
          walls = H.boolConversionCheck(t6[t10]) ? 1 : 0;
          for (t10 = new L.Vec(t8, t9).get$neighbors(), t11 = t10.length, _i = 0; _i < t11; ++_i) {
            neighbor = t10[_i];
            t12 = neighbor.y * t1 + neighbor.x;
            if (t12 < 0 || t12 >= t7)
              return H.ioore(t6, t12);
            if (H.boolConversionCheck(t6[t12]))
              ++walls;
          }
          C.JSArray_methods.$indexSet(t4, t9 * t5 + t8, H.assertSubtypeOfRuntimeType(walls >= 5, t2));
        }
      return dest;
    },
    Blob__crop: function(blob) {
      var t3, minX0, maxX, maxY, t4, t5, t6, result, t7, t8, t9,
        t1 = blob.bounds,
        t2 = t1.size,
        minX = t2.x,
        minY = t2.y;
      for (t1 = X.RectIterator$(t1), t2 = blob._elements, t3 = t2.length, minX0 = minX, maxX = -1, maxY = -1; t1.moveNext$0();) {
        t4 = t1._x;
        t5 = t1._y;
        t6 = t5 * minX + t4;
        if (t6 < 0 || t6 >= t3)
          return H.ioore(t2, t6);
        if (H.boolConversionCheck(t2[t6])) {
          minX0 = Math.min(minX0, t4);
          maxX = Math.max(maxX, t4);
          minY = Math.min(minY, t5);
          maxY = Math.max(maxY, t5);
        }
      }
      result = M.Array2D$(maxX - minX0 + 1, maxY - minY + 1, null, P.bool);
      for (t1 = result.bounds, t4 = X.RectIterator$(t1), t5 = H.getTypeArgumentByIndex(result, 0), t6 = result._elements, t1 = t1.size.x; t4.moveNext$0();) {
        t7 = t4._x;
        t8 = t4._y;
        t9 = (t8 + minY) * minX + (t7 + minX0);
        if (t9 < 0 || t9 >= t3)
          return H.ioore(t2, t9);
        C.JSArray_methods.$indexSet(t6, t8 * t1 + t7, H.assertSubtypeOfRuntimeType(t2[t9], t5));
      }
      return result;
    }
  },
  Z = {SpearMastery: function SpearMastery(t0) {
      this._sortOrder = t0;
    },
    Keep_Keep: function(maxRooms) {
      var t1 = $.$get$rng().triangleInt$2(maxRooms, maxRooms / 2 | 0),
        t2 = Z.Junction,
        t3 = H.setRuntimeTypeInfo([], [t2]);
      return new Z.Keep(new Z.JunctionSet(C.TakeFrom_1, P.LinkedHashMap_LinkedHashMap$_empty(L.Vec, t2), t3), t1);
    },
    Keep: function Keep(t0, t1) {
      var _ = this;
      _._junctions = t0;
      _._placedRooms = 0;
      _._maxRooms = t1;
      _._region = _._style = _._architect = null;
    },
    Keep_spawnMonsters_closure: function Keep_spawnMonsters_closure(t0) {
      this.painter = t0;
    },
    Keep__regionContains_diagonal: function Keep__regionContains_diagonal(t0) {
      this.$this = t0;
    },
    Keep__tryAttachRoom_closure: function Keep__tryAttachRoom_closure(t0, t1) {
      this.room = t0;
      this.direction = t1;
    },
    Junction: function Junction(t0, t1) {
      this.position = t0;
      this.direction = t1;
      this.tries = 0;
    },
    TakeFrom: function TakeFrom(t0) {
      this._keep$_name = t0;
    },
    JunctionSet: function JunctionSet(t0, t1, t2) {
      this._takeFrom = t0;
      this._byPosition = t1;
      this._junctions = t2;
    },
    _closeDoor: function(pos) {
      $.$get$Tiles_closedDoor();
      return new B.CloseDoorAction();
    },
    _openDoor: function(pos) {
      $.$get$Tiles_openDoor();
      return new B.OpenDoorAction();
    },
    _closeSquareDoor: function(pos) {
      $.$get$Tiles_closedSquareDoor();
      return new B.CloseDoorAction();
    },
    _openSquareDoor: function(pos) {
      $.$get$Tiles_openSquareDoor();
      return new B.OpenDoorAction();
    },
    _closeBarredDoor: function(pos) {
      $.$get$Tiles_closedBarredDoor();
      return new B.CloseDoorAction();
    },
    _openBarredDoor: function(pos) {
      $.$get$Tiles_openBarredDoor();
      return new B.OpenDoorAction();
    },
    Tiles_multi: function($name, char, fore, $back, count, generate) {
      var t1, i, charCode,
        result = H.setRuntimeTypeInfo([], [Q.TileType]);
      for (t1 = [L.Glyph], i = 0; i < count; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(char, 0);
        C.JSArray_methods.add$1(result, generate.call$2(new Z._TileBuilder($name, H.setRuntimeTypeInfo([new L.Glyph(charCode, fore, C.Color_20_19_31)], t1)), i));
      }
      return result;
    },
    _TileBuilder__TileBuilder: function($name, char, fore, $back) {
      var charCode;
      if ($back == null)
        $back = C.Color_20_19_31;
      charCode = C.JSString_methods._codeUnitAt$1(char, 0);
      return new Z._TileBuilder($name, H.setRuntimeTypeInfo([L.Glyph$fromCharCode(charCode, fore, $back)], [L.Glyph]));
    },
    Tiles_closure0: function Tiles_closure0() {
    },
    Tiles_closure1: function Tiles_closure1() {
    },
    Tiles_closure: function Tiles_closure() {
    },
    _TileBuilder: function _TileBuilder(t0, t1) {
      var _ = this;
      _.name = t0;
      _.glyphs = t1;
      _._portal = _._onOpen = _._onClose = null;
      _._emanation = 0;
    },
    Direction: function Direction(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    Affixes_createItem: function(itemType, droppedDepth, affixChance) {
      var t1, outOfDepth, affixDepth, weight, chance, affixes, t2, t3, t4, prefix, suffix, _null = null;
      if (affixChance == null)
        affixChance = 0;
      if (itemType.equipSlot == null)
        return new R.Item(itemType, _null, _null, 1);
      t1 = itemType.depth;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof droppedDepth !== "number")
        return H.iae(droppedDepth);
      outOfDepth = t1 - droppedDepth;
      if (outOfDepth > 0)
        affixDepth = droppedDepth - outOfDepth;
      else {
        weight = K.lerpDouble(droppedDepth, 1, 100, 0.5, 0);
        affixDepth = droppedDepth - $.$get$rng().round$1(0, outOfDepth * weight);
      }
      affixDepth = H.intTypeCheck(C.JSInt_methods.clamp$2(affixDepth, 1, 100));
      chance = 0.008 * affixDepth * affixDepth + 0.05 * affixDepth + 0.1;
      t1 = $.$get$rng();
      affixes = t1.float$1(0, 100) < chance + affixChance ? 1 : 0;
      if (t1.float$1(0, 100) < chance && t1.range$1(5) === 0)
        ++affixes;
      if (affixes === 0)
        return new R.Item(itemType, _null, _null, 1);
      t2 = $.$get$Affixes_prefixes();
      t3 = $.$get$Items_types();
      t4 = itemType.quantifiableName;
      prefix = t2.tryChooseMatching$2(affixDepth, t3.getTags$1(O.Log__categorize(t4, false, true)));
      suffix = $.$get$Affixes_suffixes().tryChooseMatching$2(affixDepth, t3.getTags$1(O.Log__categorize(t4, false, true)));
      if (affixes === 1 && prefix != null && suffix != null)
        if (t1.range$1(2) === 0)
          prefix = _null;
        else
          suffix = _null;
      return new R.Item(itemType, prefix, suffix, 1);
    },
    Affixes_initialize: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, i,
        _s7_ = "Elven _",
        _s9_ = "Dwarven _";
      R.finishAffix();
      $._affixTag = "body";
      t1 = R.affix(_s7_, 1);
      t1.depth$2$to(40, 80);
      t1._priceBonus = 400;
      t1._priceScale = 2;
      t1._weightBonus = -2;
      t1._armor = 2;
      t2 = $.$get$Elements_light();
      t1.resist$1(t2);
      t1 = R.affix(_s7_, 0.3);
      t1.depth$1(60);
      t1._priceBonus = 600;
      t1._priceScale = 3;
      t1._weightBonus = -3;
      t1._armor = 4;
      t1.resist$1(t2);
      R.finishAffix();
      $._affixTag = "cloak";
      t1 = R.affix(_s7_, 1);
      t1.depth$2$to(40, 80);
      t1._priceBonus = 300;
      t1._priceScale = 2;
      t1._weightBonus = -1;
      t1._armor = 3;
      t1.resist$1(t2);
      t1 = R.affix(_s7_, 0.3);
      t1.depth$1(60);
      t1._priceBonus = 500;
      t1._priceScale = 3;
      t1._weightBonus = -2;
      t1._armor = 5;
      t1.resist$1(t2);
      R.finishAffix();
      $._affixTag = "boots";
      t1 = R.affix(_s7_, 1);
      t1.depth$1(50);
      t1._priceBonus = 400;
      t1._priceScale = 2.5;
      t1._weightBonus = -2;
      t1._armor = 2;
      R.finishAffix();
      $._affixTag = "helm";
      t1 = R.affix(_s7_, 1);
      t1.depth$2$to(40, 80);
      t1._priceBonus = 400;
      t1._priceScale = 2;
      t1._weightBonus = -1;
      t1._armor = 1;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 1);
      t1.resist$1(t2);
      t1 = R.affix(_s7_, 0.3);
      t1.depth$1(60);
      t1._priceBonus = 600;
      t1._priceScale = 3;
      t1._weightBonus = -1;
      t1._armor = 2;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 2);
      t1.resist$1(t2);
      R.finishAffix();
      $._affixTag = "shield";
      t1 = R.affix(_s7_, 1);
      t1.depth$2$to(40, 80);
      t1._priceBonus = 300;
      t1._priceScale = 1.6;
      t1._heftScale = 0.8;
      t1._damageScale = 1.3;
      t1._damageBonus = null;
      t1.resist$1(t2);
      t1 = R.affix(_s7_, 0.5);
      t1.depth$1(50);
      t1._priceBonus = 500;
      t1._priceScale = 2.2;
      t1._heftScale = 0.6;
      t1._damageScale = 1.5;
      t1._damageBonus = null;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Will, 1);
      t1.resist$1(t2);
      R.finishAffix();
      $._affixTag = "body";
      t1 = R.affix(_s9_, 1);
      t1.depth$2$to(30, 70);
      t1._priceBonus = 400;
      t1._weightBonus = t1._priceScale = 2;
      t1._armor = 4;
      t3 = $.$get$Elements_earth();
      t1.resist$1(t3);
      t4 = $.$get$Elements_dark();
      t1.resist$1(t4);
      t1 = R.affix(_s9_, 0.5);
      t1.depth$1(40);
      t1._priceBonus = 600;
      t1._priceScale = 3;
      t1._weightBonus = 2;
      t1._armor = 6;
      t1.resist$1(t3);
      t1.resist$1(t4);
      R.finishAffix();
      $._affixTag = "helm";
      t1 = R.affix(_s9_, 1);
      t1.depth$2$to(50, 80);
      t1._priceBonus = 300;
      t1._priceScale = 2;
      t1._weightBonus = 1;
      t1._armor = 3;
      t1.resist$1(t4);
      t1 = R.affix(_s9_, 0.5);
      t1.depth$1(60);
      t1._priceBonus = 500;
      t1._priceScale = 3;
      t1._weightBonus = 1;
      t1._armor = 4;
      t5 = t1._builder$_statBonuses;
      t5.$indexSet(0, C.Stat_Strength, 1);
      t5.$indexSet(0, C.Stat_Fortitude, 1);
      t1.resist$1(t4);
      R.finishAffix();
      $._affixTag = "gloves";
      t1 = R.affix(_s9_, 1);
      t1.depth$1(50);
      t1._priceBonus = 300;
      t1._priceScale = 2;
      t1._weightBonus = 1;
      t1._armor = 3;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Strength, 1);
      t1.resist$1(t3);
      R.finishAffix();
      $._affixTag = "boots";
      t1 = R.affix(_s9_, 1);
      t1.depth$2$to(50, 70);
      t1._priceBonus = 300;
      t1._priceScale = 2;
      t1._weightBonus = 1;
      t1._armor = 3;
      t1.resist$1(t3);
      t1 = R.affix(_s9_, 0.3);
      t1.depth$1(60);
      t1._priceBonus = 500;
      t1._priceScale = 3;
      t1._weightBonus = 2;
      t1._armor = 5;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
      t1.resist$1(t4);
      t1.resist$1(t3);
      R.finishAffix();
      $._affixTag = "shield";
      t1 = R.affix(_s9_, 1);
      t1.depth$2$to(40, 80);
      t1._priceBonus = 200;
      t1._priceScale = 2.2;
      t1._heftScale = 1.2;
      t1._damageScale = 1.5;
      t1._damageBonus = 4;
      t1.resist$1(t3);
      t1.resist$1(t4);
      t1 = R.affix(_s9_, 1);
      t1.depth$1(60);
      t1._priceBonus = 400;
      t1._priceScale = 2.4;
      t1._heftScale = 1.3;
      t1._damageScale = 1.7;
      t1._damageBonus = 5;
      t1._builder$_statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
      t1.resist$1(t3);
      t1.resist$1(t4);
      R.finishAffix();
      $._affixTag = "armor";
      t1 = R.affix("_ of Resist Air", 0.5);
      t1.depth$2$to(10, 50);
      t1._priceBonus = 200;
      t1._priceScale = 1.2;
      t5 = $.$get$Elements_air();
      t1.resist$1(t5);
      t1 = R.affix("_ of Resist Earth", 0.5);
      t1.depth$2$to(11, 51);
      t1._priceBonus = 230;
      t1._priceScale = 1.2;
      t1.resist$1(t3);
      t1 = R.affix("_ of Resist Fire", 0.5);
      t1.depth$2$to(12, 52);
      t1._priceBonus = 260;
      t1._priceScale = 1.3;
      t6 = $.$get$Elements_fire();
      t1.resist$1(t6);
      t1 = R.affix("_ of Resist Water", 0.5);
      t1.depth$2$to(13, 53);
      t1._priceBonus = 310;
      t1._priceScale = 1.2;
      t7 = $.$get$Elements_water();
      t1.resist$1(t7);
      t1 = R.affix("_ of Resist Acid", 0.3);
      t1.depth$2$to(14, 54);
      t1._priceBonus = 340;
      t1._priceScale = 1.3;
      t8 = $.$get$Elements_acid();
      t1.resist$1(t8);
      t1 = R.affix("_ of Resist Cold", 0.5);
      t1.depth$2$to(15, 55);
      t1._priceBonus = 400;
      t1._priceScale = 1.2;
      t9 = $.$get$Elements_cold();
      t1.resist$1(t9);
      t1 = R.affix("_ of Resist Lightning", 0.3);
      t1.depth$2$to(16, 56);
      t1._priceBonus = 430;
      t1._priceScale = 1.2;
      t10 = $.$get$Elements_lightning();
      t1.resist$1(t10);
      t1 = R.affix("_ of Resist Poison", 0.25);
      t1.depth$2$to(17, 57);
      t1._priceBonus = 460;
      t1._priceScale = 1.5;
      t11 = $.$get$Elements_poison();
      t1.resist$1(t11);
      t1 = R.affix("_ of Resist Dark", 0.25);
      t1.depth$2$to(18, 58);
      t1._priceBonus = 490;
      t1._priceScale = 1.3;
      t1.resist$1(t4);
      t1 = R.affix("_ of Resist Light", 0.25);
      t1.depth$2$to(19, 59);
      t1._priceBonus = 490;
      t1._priceScale = 1.3;
      t1.resist$1(t2);
      t1 = R.affix("_ of Resist Spirit", 0.4);
      t1.depth$2$to(10, 60);
      t1._priceBonus = 520;
      t1._priceScale = 1.4;
      t12 = $.$get$Elements_spirit();
      t1.resist$1(t12);
      t1 = R.affix("_ of Resist Nature", 0.3);
      t1.depth$1(40);
      t1._priceBonus = 3000;
      t1._priceScale = 4;
      t1.resist$1(t5);
      t1.resist$1(t3);
      t1.resist$1(t6);
      t1.resist$1(t7);
      t1.resist$1(t9);
      t1.resist$1(t10);
      t1 = R.affix("_ of Resist Destruction", 0.3);
      t1.depth$1(40);
      t1._priceBonus = 1300;
      t1._priceScale = 2.6;
      t1.resist$1(t8);
      t1.resist$1(t6);
      t1.resist$1(t10);
      t1.resist$1(t11);
      t1 = R.affix("_ of Resist Evil", 0.3);
      t1.depth$1(60);
      t1._priceBonus = 1500;
      t1._priceScale = 3;
      t1.resist$1(t8);
      t1.resist$1(t11);
      t1.resist$1(t4);
      t1.resist$1(t12);
      t1 = R.affix("_ of Resistance", 0.3);
      t1.depth$1(70);
      t1._priceBonus = 5000;
      t1._priceScale = 6;
      t1.resist$1(t5);
      t1.resist$1(t3);
      t1.resist$1(t6);
      t1.resist$1(t7);
      t1.resist$1(t8);
      t1.resist$1(t9);
      t1.resist$1(t10);
      t1.resist$1(t11);
      t1.resist$1(t4);
      t1.resist$1(t2);
      t1.resist$1(t12);
      t1 = R.affix("_ of Protection from Air", 0.25);
      t1.depth$1(36);
      t1._priceBonus = 500;
      t1._priceScale = 1.4;
      t1.resist$2(t5, 2);
      t5 = R.affix("_ of Protection from Earth", 0.25);
      t5.depth$1(37);
      t5._priceBonus = 500;
      t5._priceScale = 1.4;
      t5.resist$2(t3, 2);
      t3 = R.affix("_ of Protection from Fire", 0.25);
      t3.depth$1(38);
      t3._priceBonus = 500;
      t3._priceScale = 1.5;
      t3.resist$2(t6, 2);
      t3 = R.affix("_ of Protection from Water", 0.25);
      t3.depth$1(39);
      t3._priceBonus = 500;
      t3._priceScale = 1.4;
      t3.resist$2(t7, 2);
      t7 = R.affix("_ of Protection from Acid", 0.2);
      t7.depth$1(40);
      t7._priceBonus = 500;
      t7._priceScale = 1.5;
      t7.resist$2(t8, 2);
      t8 = R.affix("_ of Protection from Cold", 0.25);
      t8.depth$1(41);
      t8._priceBonus = 500;
      t8._priceScale = 1.4;
      t8.resist$2(t9, 2);
      t8 = R.affix("_ of Protection from Lightning", 0.16);
      t8.depth$1(42);
      t8._priceBonus = 500;
      t8._priceScale = 1.4;
      t8.resist$2(t10, 2);
      t8 = R.affix("_ of Protection from Poison", 0.14);
      t8.depth$1(43);
      t8._priceBonus = 1000;
      t8._priceScale = 1.6;
      t8.resist$2(t11, 2);
      t8 = R.affix("_ of Protection from Dark", 0.14);
      t8.depth$1(44);
      t8._priceBonus = 500;
      t8._priceScale = 1.5;
      t8.resist$2(t4, 2);
      t8 = R.affix("_ of Protection from Light", 0.14);
      t8.depth$1(45);
      t8._priceBonus = 500;
      t8._priceScale = 1.5;
      t8.resist$2(t2, 2);
      t8 = R.affix("_ of Protection from Spirit", 0.13);
      t8.depth$1(46);
      t8._priceBonus = 800;
      t8._priceScale = 1.6;
      t8.resist$2(t12, 2);
      R.finishAffix();
      $._affixTag = "weapon";
      t8 = R.affix("_ of Harming", 1);
      t8.depth$2$to(1, 30);
      t8._priceBonus = 100;
      t8._priceScale = 1.2;
      t8._heftScale = 1.05;
      t8._damageScale = null;
      t8._damageBonus = 1;
      t8 = R.affix("_ of Wounding", 1);
      t8.depth$2$to(10, 50);
      t8._priceBonus = 140;
      t8._priceScale = 1.3;
      t8._heftScale = 1.07;
      t8._damageScale = null;
      t8._damageBonus = 3;
      t8 = R.affix("_ of Maiming", 1);
      t8.depth$2$to(25, 75);
      t8._priceBonus = 180;
      t8._priceScale = 1.5;
      t8._heftScale = 1.09;
      t8._damageScale = 1.2;
      t8._damageBonus = 3;
      t8 = R.affix("_ of Slaying", 1);
      t8.depth$1(45);
      t8._priceBonus = 200;
      t8._priceScale = 2;
      t8._heftScale = 1.11;
      t8._damageScale = 1.4;
      t8._damageBonus = 5;
      R.finishAffix();
      $._affixTag = "bow";
      t8 = R.affix("Ash _", 1);
      t8.depth$2$to(10, 70);
      t8._priceBonus = 300;
      t8._priceScale = 1.3;
      t8._heftScale = 0.8;
      t8._damageScale = null;
      t8._damageBonus = 3;
      t8 = R.affix("Yew _", 1);
      t8.depth$1(20);
      t8._priceBonus = 500;
      t8._priceScale = 1.4;
      t8._heftScale = 0.8;
      t8._damageScale = null;
      t8._damageBonus = 5;
      R.finishAffix();
      $._affixTag = "weapon";
      t8 = R.affix("Glimmering _", 0.3);
      t8.depth$2$to(20, 60);
      t8._priceBonus = 300;
      t8._priceScale = 1.3;
      t8._damageScale = 1.2;
      t8._damageBonus = null;
      t8.brand$1(t2);
      t8 = R.affix("Shining _", 0.25);
      t8.depth$2$to(32, 90);
      t8._priceBonus = 400;
      t8._priceScale = 1.6;
      t8._damageScale = 1.4;
      t8._damageBonus = null;
      t8.brand$1(t2);
      t8 = R.affix("Radiant _", 0.2);
      t8.depth$1(48);
      t8._priceBonus = 500;
      t8._priceScale = 2;
      t8._damageScale = 1.6;
      t8._damageBonus = null;
      t8.brand$2$resist(t2, 2);
      t2 = R.affix("Dim _", 0.3);
      t2.depth$2$to(16, 60);
      t2._priceBonus = 300;
      t2._priceScale = 1.3;
      t2._damageScale = 1.2;
      t2._damageBonus = null;
      t2.brand$1(t4);
      t2 = R.affix("Dark _", 0.25);
      t2.depth$2$to(32, 80);
      t2._priceBonus = 400;
      t2._priceScale = 1.6;
      t2._damageScale = 1.4;
      t2._damageBonus = null;
      t2.brand$1(t4);
      t2 = R.affix("Black _", 0.2);
      t2.depth$1(56);
      t2._priceBonus = 500;
      t2._priceScale = 2;
      t2._damageScale = 1.6;
      t2._damageBonus = null;
      t2.brand$2$resist(t4, 2);
      t4 = R.affix("Chilling _", 0.3);
      t4.depth$2$to(20, 65);
      t4._priceBonus = 300;
      t4._priceScale = 1.5;
      t4._damageScale = 1.4;
      t4._damageBonus = null;
      t4.brand$1(t9);
      t4 = R.affix("Freezing _", 0.25);
      t4.depth$1(40);
      t4._priceBonus = 400;
      t4._priceScale = 1.7;
      t4._damageScale = 1.6;
      t4._damageBonus = null;
      t4.brand$2$resist(t9, 2);
      t9 = R.affix("Burning _", 0.3);
      t9.depth$2$to(20, 60);
      t9._priceBonus = 300;
      t9._priceScale = 1.5;
      t9._damageScale = 1.3;
      t9._damageBonus = null;
      t9.brand$1(t6);
      t9 = R.affix("Flaming _", 0.25);
      t9.depth$2$to(40, 90);
      t9._priceBonus = 360;
      t9._priceScale = 1.8;
      t9._damageScale = 1.6;
      t9._damageBonus = null;
      t9.brand$1(t6);
      t9 = R.affix("Searing _", 0.2);
      t9.depth$1(60);
      t9._priceBonus = 500;
      t9._priceScale = 2.1;
      t9._damageScale = 1.8;
      t9._damageBonus = null;
      t9.brand$2$resist(t6, 2);
      t6 = R.affix("Electric _", 0.2);
      t6.depth$1(50);
      t6._priceBonus = 300;
      t6._priceScale = 1.5;
      t6._damageScale = 1.4;
      t6._damageBonus = null;
      t6.brand$1(t10);
      t6 = R.affix("Shocking _", 0.2);
      t6.depth$1(70);
      t6._priceBonus = 400;
      t6._priceScale = 2;
      t6._damageScale = 1.8;
      t6._damageBonus = null;
      t6.brand$2$resist(t10, 2);
      t10 = R.affix("Poisonous _", 0.2);
      t10.depth$2$to(35, 90);
      t10._priceBonus = 500;
      t10._priceScale = 1.5;
      t10._damageScale = 1.1;
      t10._damageBonus = null;
      t10.brand$1(t11);
      t10 = R.affix("Venomous _", 0.2);
      t10.depth$1(70);
      t10._priceBonus = 800;
      t10._priceScale = 1.8;
      t10._damageScale = 1.3;
      t10._damageBonus = null;
      t10.brand$2$resist(t11, 2);
      t11 = R.affix("Ghostly _", 0.2);
      t11.depth$2$to(45, 85);
      t11._priceBonus = 300;
      t11._priceScale = 1.6;
      t11._heftScale = 0.7;
      t11._damageScale = 1.4;
      t11._damageBonus = null;
      t11.brand$1(t12);
      t11 = R.affix("Spiritual _", 0.15);
      t11.depth$1(80);
      t11._priceBonus = 400;
      t11._priceScale = 2.1;
      t11._heftScale = 0.7;
      t11._damageScale = 1.7;
      t11._damageBonus = null;
      t11.brand$2$resist(t12, 2);
      R.finishAffix();
      $._affixTag = "helm";
      for (i = 0; i < 2; ++i) {
        t1 = R.affix("_ of Acumen", 1);
        t1._minDepth = 35;
        t1._maxDepth = 55;
        t1._priceBonus = 300;
        t1._priceScale = 2;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 1 + i);
        t1 = R.affix("_ of Wisdom", 1);
        t1._minDepth = 45;
        t1._maxDepth = 75;
        t1._priceBonus = 500;
        t1._priceScale = 3;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 3 + i);
        t1 = R.affix("_ of Sagacity", 1);
        t1._minDepth = 75;
        t1._maxDepth = 100;
        t1._priceBonus = 700;
        t1._priceScale = 4;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 5 + i);
        t1 = R.affix("_ of Genius", 1);
        t1._minDepth = 65;
        t1._maxDepth = 100;
        t1._priceBonus = 1000;
        t1._priceScale = 5;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 7 + i);
      }
      R.finishAffix();
    }
  },
  K = {Flee: function Flee(t0) {
      this._sortOrder = t0;
    }, Escape: function Escape(t0) {
      this._sortOrder = t0;
    }, Disappear: function Disappear(t0) {
      this._sortOrder = t0;
    },
    lerpDouble: function(value, min, max, outMin, outMax) {
      if (typeof value !== "number")
        return value.$le();
      if (value <= min)
        return outMin;
      if (value >= max)
        return outMax;
      return outMin + (value - min) / (max - min) * (outMax - outMin);
    },
    hashPoint: function(x, y) {
      var t1 = new K.hashPoint_hashInt(),
        t2 = t1.call$1(0);
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = t1.call$1(t2 + x);
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = t1.call$1(t2 + y);
      if (typeof t2 !== "number")
        return t2.$and();
      return (t2 & 4294967295) >>> 0;
    },
    hashPoint_hashInt: function hashPoint_hashInt() {
    },
    HeroSave: function HeroSave(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.name = t0;
      _.race = t1;
      _.heroClass = t2;
      _._inventory = t3;
      _._equipment = t4;
      _._home = t5;
      _._crucible = t6;
      _.shops = t7;
      _.skills = t8;
      _._lore = t9;
      _.strength = t10;
      _.agility = t11;
      _.fortitude = t12;
      _.intellect = t13;
      _.will = t14;
    },
    Terminal: function Terminal() {
    },
    RenderableTerminal: function RenderableTerminal() {
    }
  },
  V = {Action: function Action() {
    }, Lore: function Lore(t0, t1) {
      this._seenBreeds = t0;
      this._slainBreeds = t1;
    }, Lore_seeBreed_closure: function Lore_seeBreed_closure() {
    },
    _class: function($name, description, startingItems, masteries, spells) {
      var t1, t2, _i, skill, t3, proficiency,
        proficiencies = P.LinkedHashMap_LinkedHashMap$_empty(M.Skill, P.double);
      for (t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        t3 = J.getInterceptor$(skill);
        proficiency = !!t3.$isMasteryDiscipline ? masteries : 1;
        proficiencies.$indexSet(0, skill, !!t3.$isSpell ? proficiency * spells : proficiency);
      }
      return new T.HeroClass($name, proficiencies, startingItems);
    }
  };
  var holders = [C, H, J, P, W, T, E, X, G, N, O, F, Q, R, S, Y, A, B, U, L, D, M, Z, K, V];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      var t1 = receiver.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, i,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      H.assertSubtype(iterable, "$isList", [t1], "$asList");
      t1 = J.getInterceptor$asx(iterable);
      if (skipCount + $length > t1.get$length(iterable))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(iterable, skipCount + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(iterable, skipCount + i);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      var i;
      H.assertSubtypeOfRuntimeType(fillValue, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    shuffle$1: function(receiver, random) {
      var $length, pos, t1, tmp;
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("shuffle"));
      if (random == null)
        random = C.C__JSRandom;
      $length = receiver.length;
      for (; $length > 1;) {
        pos = random.nextInt$1($length);
        --$length;
        t1 = receiver.length;
        if ($length >= t1)
          return H.ioore(receiver, $length);
        tmp = receiver[$length];
        if (pos < 0 || pos >= t1)
          return H.ioore(receiver, pos);
        this.$indexSet(receiver, $length, receiver[pos]);
        this.$indexSet(receiver, pos, tmp);
      }
    },
    indexOf$1: function(receiver, element) {
      var i;
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this._codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1: function(receiver, pattern) {
      var t1 = H.setRuntimeTypeInfo(receiver.split(pattern), [P.String]);
      return t1;
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    indexOf$1: function(receiver, pattern) {
      var t1, t2, i;
      if (pattern == null)
        H.throwExpression(H.argumentErrorValue(pattern));
      t1 = receiver.length;
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, 0);
      for (t2 = J.getInterceptor$s(pattern), i = 0; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    toList$1$growable: function(_, growable) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (i = 0; i < _this.get$length(_this); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      return $length - t1;
    },
    elementAt$1: function(_, index) {
      var t1, _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, this.$ti);
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (this._remaining < 0)
        return;
      return this._iterator.get$current();
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  H.ConstantMap.prototype = {
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new H.JsLinkedHashMap(_this.$ti);
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      this._getMap$0().forEach$1(0, f);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 6
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, _this = this;
      if (typeof key === "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var t1 = this.internalRemove$1(key);
      return t1;
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this.__js_helper$_strings = _this.__js_helper$_nums = _this.__js_helper$_rest = _this.__js_helper$_first = _this.__js_helper$_last = null;
        _this.__js_helper$_length = 0;
        _this.__js_helper$_modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_modified$0: function() {
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else {
        last = _this.__js_helper$_last;
        cell.__js_helper$_previous = last;
        _this.__js_helper$_last = last.__js_helper$_next = cell;
      }
      ++_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell.__js_helper$_previous,
        next = cell.__js_helper$_next;
      if (previous == null)
        _this.__js_helper$_first = next;
      else
        previous.__js_helper$_next = next;
      if (next == null)
        _this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      --_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, this.$ti);
      t2.__js_helper$_cell = t1.__js_helper$_first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this.__js_helper$_cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this.__js_helper$_cell = _this.__js_helper$_cell.__js_helper$_next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 6
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 65
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 77
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(m);
    },
    $isPattern: 1
  };
  H._MatchImplementation.prototype = {};
  H.StringMatch.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 11
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 22
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 1
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(_, value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (_this.isSync)
        _this._completer.complete$1(0, value);
      else if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        t1 = _this._completer;
        value.then$1$2$onError(t1.get$complete(t1), t1.get$completeError(), -1);
      } else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(_this, value));
    },
    completeError$2: function(e, st) {
      if (this.isSync)
        this._completer.completeError$2(e, st);
      else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
    },
    $isCompleter: 1
  };
  P._AsyncAwaitCompleter_complete_closure.prototype = {
    call$0: function() {
      this.$this._completer.complete$1(0, this.value);
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter_completeError_closure.prototype = {
    call$0: function() {
      this.$this._completer.completeError$2(this.e, this.st);
    },
    $signature: 0
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 92
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    $signature: 95
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H.intTypeCheck(errorCode), result);
    },
    $signature: 96
  };
  P._IterationMarker.prototype = {
    toString$0: function(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    }
  };
  P._SyncStarIterator.prototype = {
    get$current: function() {
      var t1 = this._nestedIterator;
      if (t1 == null)
        return this._async$_current;
      return H.assertSubtypeOfRuntimeType(t1.get$current(), H.getTypeArgumentByIndex(this, 0));
    },
    moveNext$0: function() {
      var t1, value, state, inner, _this = this;
      for (; true;) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            _this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            t1 = _this._suspendedBodies;
            if (t1 == null || t1.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            _this._body = t1.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (!!inner.$is_SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null)
                  t1 = _this._suspendedBodies = [];
                C.JSArray_methods.add$1(t1, _this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current: function(_current) {
      this._async$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator: function(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti);
    }
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var t1;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (error == null)
        error = new P.NullThrownError();
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      t1._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._SyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      return this._thenNoZoneRegistration$1$2(f, onError, $R);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenNoZoneRegistration$1$2: function(f, onError, $E) {
      var result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      result = new P._Future($.Zone__current, [$E]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 11
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $signature: 72
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 59
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      t2 = H.getTypeArgumentByIndex(_this, 0);
      t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, _this), {func: 1, ret: -1, args: [t2]});
      H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
      W._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P._StreamIterator.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    _newSet$0: function() {
      return new P._LinkedHashSet(this.$ti);
    },
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._modifications, _this.$ti);
      t1._cell = _this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var t1;
      if (object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else {
        t1 = this._remove$1(object);
        return t1;
      }
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _modified$0: function() {
      this._modifications = 1073741823 & this._modifications + 1;
    },
    _newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._collection$_length;
      _this._modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._collection$_element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(_this, 0)));
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.IterableMixin.prototype = {
    get$length: function(_) {
      var count,
        t1 = this._items,
        it = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: 1
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 10
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    toList$1$growable: function(receiver, growable) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(receiver));
      for (i = 0; i < _this.get$length(receiver); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 10
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys()); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    get$entries: function(_) {
      var _this = this;
      return J.map$1$1$ax(_this.get$keys(), new P.MapMixin_entries_closure(_this), [P.MapEntry, H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys());
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "MapMixin", 0);
      H.assertSubtypeOfRuntimeType(key, t2);
      return new P.MapEntry(key, t1.$index(0, key), [t2, H.getRuntimeTypeArgument(t1, "MapMixin", 1)]);
    },
    $signature: function() {
      var t1 = this.$this,
        t2 = H.getRuntimeTypeArgument(t1, "MapMixin", 0);
      return {func: 1, ret: [P.MapEntry, t2, H.getRuntimeTypeArgument(t1, "MapMixin", 1)], args: [t2]};
    }
  };
  P.Queue.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.ListQueue.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new P._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti);
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3, _this = this,
        $length = _this.get$length(_this);
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, _this, "index", null, $length));
      t1 = _this._table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      result = t2[t1];
      C.JSArray_methods.$indexSet(t2, t1, null);
      _this._head = (_this._head + 1 & _this._table.length - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, newTable, split, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      C.JSArray_methods.$indexSet(_this._table, _this._tail, element);
      t1 = _this._tail;
      t2 = _this._table.length;
      t1 = (t1 + 1 & t2 - 1) >>> 0;
      _this._tail = t1;
      if (_this._head === t1) {
        t1 = new Array(t2 * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, _this.$ti);
        t1 = _this._table;
        t2 = _this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._table, 0);
        _this._head = 0;
        _this._tail = _this._table.length;
        _this.set$_table(newTable);
      }
      ++_this._modificationCount;
    },
    set$_table: function(_table) {
      this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
    },
    $isQueue: 1
  };
  P._ListQueueIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SetBase.prototype = {
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    join$1: function(_, separator) {
      var t1,
        iterator = P._LinkedHashSetIterator$(this, this._modifications, H.getTypeArgumentByIndex(this, 0));
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator._collection$_current);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1: function(_, test) {
      var t1, _this = this;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(_this, 0)]});
      for (t1 = P._LinkedHashSetIterator$(_this, _this._modifications, H.getTypeArgumentByIndex(_this, 0)); t1.moveNext$0();)
        if (H.boolConversionCheck(test.call$1(t1._collection$_current)))
          return true;
      return false;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && true;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      return t1;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 17
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 17
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + t1;
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        objectSource = this.source;
      if (typeof objectSource === "string") {
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      } else
        return report;
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (H.boolConversionCheck(test.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$single: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var element,
        t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
      }
      return orElse.call$0();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {
    toString$0: function(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StackTrace.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  W.HtmlElement.prototype = {};
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.BodyElement.prototype = {$isBodyElement: 1};
  W.ButtonElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.CanvasElement.prototype = {$isCanvasElement: 1};
  W.CanvasRenderingContext2D.prototype = {$isCanvasRenderingContext2D: 1};
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.DomError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.DomException.prototype = {
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (H.boolConversionCheck(P.Device_isWebKit()) && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (H.boolConversionCheck(P.Device_isWebKit()) && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && receiver.width === other.width && receiver.height === other.height;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.Element.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        if (validator == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            t2 = new W.NodeValidatorBuilder(t1);
            C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
            C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
        }
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      } else if (validator != null)
        throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        H.interceptedTypeCheck(t2, "$isBaseElement");
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$2$validator: function(receiver, html, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, validator));
    },
    $isElement: 1,
    get$tagName: function(receiver) {
      return receiver.tagName;
    }
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement;
    },
    $signature: 49
  };
  W.EmbedElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.FieldSetElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.IFrameElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ImageElement.prototype = {$isImageElement: 1};
  W.InputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MapElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MetaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MouseEvent.prototype = {
    get$offset: function(receiver) {
      var t1, target, t2, t3, t4, t5;
      if (!!receiver.offsetX)
        return new P.Point(receiver.offsetX, receiver.offsetY, [P.num]);
      else {
        t1 = receiver.target;
        if (!J.getInterceptor$(W._convertNativeToDart_EventTarget(t1)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = H.interceptedTypeCheck(W._convertNativeToDart_EventTarget(t1), "$isElement");
        t1 = receiver.clientX;
        t2 = receiver.clientY;
        t3 = [P.num];
        t4 = target.getBoundingClientRect();
        t5 = t4.left;
        t4 = t4.top;
        H.assertSubtype(new P.Point(t5, t4, t3), "$isPoint", t3, "$asPoint");
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return t2.$sub();
        return new P.Point(C.JSNumber_methods.toInt$0(t1 - t5), C.JSNumber_methods.toInt$0(t2 - t4), t3);
      }
    },
    $isMouseEvent: 1
  };
  W.NavigatorUserMediaError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W._ChildNodeListLazy.prototype = {
    get$single: function(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(H.interceptedTypeCheck(value, "$isNode"));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      H.interceptedTypeCheck(value, "$isNode");
      t1 = this._this;
      t2 = t1.childNodes;
      if (index < 0 || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.ObjectElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.OutputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.OverconstrainedError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ParamElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SelectElement.prototype = {$isSelectElement: 1,
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SlotElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SpeechSynthesisEvent.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {
    setInnerHtml$2$validator: function(receiver, html, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, null, validator);
      receiver.content.appendChild(fragment);
    },
    $isTemplateElement: 1
  };
  W.TextAreaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.UIEvent.prototype = {};
  W.Window.prototype = {
    get$animationFrame: function(receiver) {
      var t1 = P.num,
        t2 = new P._Future($.Zone__current, [t1]),
        t3 = H.functionTypeCheck(new W.Window_animationFrame_closure(new P._SyncCompleter(t2, [t1])), {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      this._requestAnimationFrame$1(receiver, W._wrapZone(t3, t1));
      return t2;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindowBase: 1,
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Window_animationFrame_closure.prototype = {
    call$1: function(time) {
      this.completer.complete$1(0, H.numTypeCheck(time));
    },
    $signature: 35
  };
  W._Attr.prototype = {$is_Attr: 1,
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor$(other).$isRectangle)
        return false;
      return receiver.left === other.left && receiver.top === other.top && receiver.width === other.width && receiver.height === other.height;
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._AttributeMap.prototype = {
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(), t2 = t1.length, t3 = this._element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function() {
      var len, i, attr,
        attributes = this._element.attributes,
        keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {
    $index: function(_, key) {
      return this._element.getAttribute(H.stringTypeCheck(key));
    },
    get$length: function(_) {
      return this.get$keys().length;
    }
  };
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {};
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 21
  };
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators.get$isEmpty($._Html5NodeValidator__attributeValidators)) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, H.S(W.Element__safeTagName(element)) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    }
  };
  W.NodeValidatorBuilder.prototype = {
    add$1: function(_, validator) {
      C.JSArray_methods.add$1(this._validators, validator);
    },
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
    },
    $signature: 12
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 12
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes,
        t1 = allowedElements == null ? C.List_empty : allowedElements;
      this.allowedElements.addAll$1(0, t1);
      t1 = J.getInterceptor$ax(allowedAttributes);
      legalAttributes = t1.where$1(allowedAttributes, new W._SimpleNodeValidator_closure());
      extraUriAttributes = t1.where$1(allowedAttributes, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var _this = this,
        tagName = W.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t1 = _this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 19
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 19
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
    },
    $signature: 3
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor$(element);
      if (!!t1.$isScriptElement)
        return false;
      t1 = !!t1.$isSvgElement;
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
    },
    _removeNode$2: function(node, $parent) {
      if ($parent == null)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corruptedTest1, elementText, elementTagName, exception, t1,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._element.getAttribute("is");
        H.interceptedTypeCheck(element, "$isElement");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = H.boolConversionCheck(corruptedTest1) ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys();
      keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      for (i = attrs.get$keys().length - 1, t1 = attrs._element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        t2 = _this.validator;
        t3 = J.toLowerCase$0$s($name);
        H.stringTypeCheck($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (!!J.getInterceptor$(element).$isTemplateElement)
        _this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, exception, t2, t3,
        t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t1 = node == null; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
        } catch (exception) {
          H.unwrapException(exception);
          t2 = H.interceptedTypeCheck(child, "$isNode");
          if (t1) {
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = H.interceptedTypeCheck(nextChild, "$isNode");
      }
    },
    $signature: 23
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._JSRandom.prototype = {
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    },
    $isRandom: 1
  };
  P._Random.prototype = {
    _Random$1: function(seed) {
      var low, high, tmplow, low0, t1, t2, t3, _this = this, _4294967296 = 4294967296,
        empty_seed = seed < 0 ? -1 : 0;
      do {
        low = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - low, _4294967296);
        high = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - high, _4294967296);
        tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
        low0 = (tmplow & 4294967295) >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296) & 4294967295;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) & 4294967295;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) & 4294967295;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = (tmplow & 4294967295) >>> 0;
        t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296);
        tmplow = _this._lo * 1037;
        t2 = _this._lo = (tmplow & 4294967295) >>> 0;
        t3 = (_this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, _4294967296) & 4294967295) >>> 0;
        _this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        _this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
        _this._hi = t1;
      } while (seed !== empty_seed);
      if (t1 === 0 && t2 === 0)
        _this._lo = 23063;
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
    },
    _nextState$0: function() {
      var _this = this,
        t1 = _this._lo,
        tmpHi = 4294901760 * t1,
        tmpHiLo = (tmpHi & 4294967295) >>> 0,
        tmpLo = 55905 * t1,
        tmpLoLo = (tmpLo & 4294967295) >>> 0,
        newLo = tmpLoLo + tmpHiLo + _this._hi;
      t1 = (newLo & 4294967295) >>> 0;
      _this._lo = t1;
      _this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
    },
    nextInt$1: function(max) {
      var t1, rnd32, result, _this = this;
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      t1 = max - 1;
      if ((max & t1) >>> 0 === 0) {
        _this._nextState$0();
        return (_this._lo & t1) >>> 0;
      }
      do {
        _this._nextState$0();
        rnd32 = _this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    nextDouble$0: function() {
      var t1, _this = this;
      _this._nextState$0();
      t1 = _this._lo;
      _this._nextState$0();
      return ((t1 & 67108863) * 134217728 + (_this._lo & 134217727)) / 9007199254740992;
    },
    $isRandom: 1
  };
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isPoint && this.x == other.x && this.y == other.y;
    },
    get$hashCode: function(_) {
      var hash,
        t1 = J.get$hashCode$(this.x),
        t2 = J.get$hashCode$(this.y);
      t2 = P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2);
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    }
  };
  P.ScriptElement.prototype = {$isScriptElement: 1};
  P.SvgElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, t2, fragment, svgFragment, root;
      if (validator == null) {
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
        validator = new W.NodeValidatorBuilder(t1);
        C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
        C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
        C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
      }
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = '<svg version="1.1">' + svg + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: 1
  };
  T.GameContent.prototype = {
    buildStage$4: function(lore, stage, depth, placeHero) {
      var t1;
      H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]});
      if (depth === 0)
        return new D.Town(stage).buildStage$1(placeHero);
      t1 = stage.tiles.bounds.size;
      t1 = M.Array2D$(t1.x, t1.y, null, X.Architecture);
      $.Architect_debugOwners = t1;
      return new X.Architect(lore, stage, depth, t1).buildStage$1(placeHero);
    },
    createHero$1: function($name) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, hero, inventory,
        race = $.$get$Races_human(),
        heroClass = $.$get$Classes_adventurer(),
        t1 = O.Inventory$(C.ItemLocation_Inventory, 24),
        t2 = new Array(9);
      t2.fixed$length = Array;
      t3 = R.Item;
      t2 = H.setRuntimeTypeInfo(t2, [t3]);
      t4 = O.Inventory$(C.ItemLocation_Home, 26);
      t5 = O.Inventory$(C.ItemLocation_Crucible, 8);
      t6 = new D.Strength();
      t7 = new D.Agility();
      t8 = new D.Fortitude();
      t9 = new D.Intellect();
      t10 = new D.Will();
      t11 = P.LinkedHashMap_LinkedHashMap$_empty(O.Shop, O.Inventory);
      t12 = M.Skill;
      t13 = P.int;
      t14 = B.Breed;
      hero = new K.HeroSave($name, race.rollStats$0(), heroClass, t1, new E.Equipment(t2), t4, t5, t11, new M.SkillSet(P.LinkedHashMap_LinkedHashMap$_empty(t12, t13), P.LinkedHashMap_LinkedHashMap$_empty(t12, t13)), new V.Lore(P.LinkedHashMap_LinkedHashMap$_empty(t14, t13), P.LinkedHashMap_LinkedHashMap$_empty(t14, t13)), t6, t7, t8, t9, t10);
      t6.bindHero$1(hero);
      t7.bindHero$1(hero);
      t8.bindHero$1(hero);
      t9.bindHero$1(hero);
      t10.bindHero$1(hero);
      P.LinkedHashMap_LinkedHashMap$_literal(["Mending Salve", 3, "Scroll of Sidestepping", 2, "Tallow Candle", 4, "Loaf of Bread", 5], P.String, t13).forEach$1(0, new T.GameContent_createHero_closure(hero));
      heroClass.startingItems.dropItem$2(1, t1.get$tryAdd());
      for (t1 = $.Shops_all.get$values($.Shops_all), t1 = t1.get$iterator(t1), t3 = [t3]; t1.moveNext$0();) {
        t2 = t1.get$current();
        inventory = new O.Inventory(new O.ItemLocation(t2.name), H.setRuntimeTypeInfo([], t3), 26);
        t2.update$1(inventory);
        t11.$indexSet(0, t2, inventory);
      }
      return hero;
    },
    $isContent: 1
  };
  T.GameContent_createHero_closure.prototype = {
    call$2: function(type, amount) {
      H.stringTypeCheck(type);
      H.intTypeCheck(amount);
      this.hero._inventory.tryAdd$1(new R.Item($.$get$Items_types().find$1(0, type), null, null, amount));
    },
    $signature: 24
  };
  E.HasteAction.prototype = {};
  E.FreezeActorAction.prototype = {};
  E.PoisonAction.prototype = {};
  E.BlindAction.prototype = {};
  E.DazzleAction.prototype = {};
  E.ResistAction.prototype = {};
  E._FreezeActorAction_ConditionAction_DestroyActionMixin.prototype = {};
  T.DetectType.prototype = {
    toString$0: function(_) {
      return this._detection$_name;
    }
  };
  T.DetectAction.prototype = {};
  X.EatAction.prototype = {};
  G.BurnActorAction.prototype = {};
  G.BurnFloorAction.prototype = {};
  G.FreezeFloorAction.prototype = {};
  G.PoisonFloorAction.prototype = {};
  G.WindAction.prototype = {};
  G.LightFloorAction.prototype = {};
  G._BurnActorAction_Action_DestroyActionMixin.prototype = {};
  G._BurnFloorAction_Action_DestroyActionMixin.prototype = {};
  G._FreezeFloorAction_Action_DestroyActionMixin.prototype = {};
  G._PoisonFloorAction_Action_DestroyActionMixin.prototype = {};
  N.FlowSelfAction.prototype = {};
  N.FlowFromAction.prototype = {};
  O.HealAction.prototype = {};
  F.IlluminateSelfAction.prototype = {};
  Q.MappingAction.prototype = {};
  R.Missive.prototype = {
    toString$0: function(_) {
      return this._missive$_name;
    }
  };
  Q.PerceiveAction.prototype = {};
  G.RingSelfAction.prototype = {};
  G.RingFromAction.prototype = {};
  S.TeleportAction.prototype = {};
  Q._OpenTileAction.prototype = {};
  Q.OpenBarrelAction.prototype = {};
  Q.OpenChestAction.prototype = {};
  Y.Decor.prototype = {};
  S.Furnishing.prototype = {
    canPlace$2: function(painter, pos) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, y, t10, x, t11, t12, t13, t14, t15;
      for (t1 = this._cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, t5 = painter._painter$_architect, t6 = t5.stage, t5 = t5._owners, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length, t9 = painter._architecture, y = 0; y < t3; ++y)
        for (t10 = y * t2, x = 0; x < t2; ++x) {
          t11 = pos.x + x;
          t12 = pos.y + y;
          t13 = t6.tiles;
          t14 = t13.bounds;
          if (!t14.contains$1(0, new L.Vec(t11, t12)))
            return false;
          t15 = t12 * t5 + t11;
          if (t15 < 0 || t15 >= t8)
            return H.ioore(t7, t15);
          if (t7[t15] != t9)
            return false;
          t15 = t10 + x;
          if (t15 < 0 || t15 >= t4)
            return H.ioore(t1, t15);
          t15 = t1[t15];
          t13 = t13._elements;
          t11 = t12 * t14.size.x + t11;
          if (t11 < 0 || t11 >= t13.length)
            return H.ioore(t13, t11);
          if (!t15.meetsRequirement$1(t13[t11].type))
            return false;
        }
      return true;
    },
    place$2: function(painter, pos) {
      var t1, t2, t3, t4, t5, y, t6, x, t7, t8, t9, t10, t11;
      for (t1 = this._cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, t5 = painter._painter$_architect.stage, y = 0; y < t3; ++y)
        for (t6 = y * t2, x = 0; x < t2; ++x) {
          t7 = t6 + x;
          if (t7 < 0 || t7 >= t4)
            return H.ioore(t1, t7);
          t7 = t1[t7];
          t8 = pos.x;
          t9 = pos.y;
          t7 = t7._apply;
          if (t7 != null) {
            t10 = t5.tiles;
            t11 = t10._elements;
            t8 = (t9 + y) * t10.bounds.size.x + (t8 + x);
            if (t8 < 0 || t8 >= t11.length)
              return H.ioore(t11, t8);
            t11[t8].type = t7;
            ++painter._painted;
          }
        }
    }
  };
  S.Cell.prototype = {
    meetsRequirement$1: function(tile) {
      var t1 = this._furnishing$_motility;
      if (t1 != null && (tile.motility._bitMask & t1._bitMask) === 0)
        return false;
      t1 = this._require;
      if (t1.length !== 0 && !C.JSArray_methods.contains$1(t1, tile))
        return false;
      return true;
    }
  };
  T.Symmetry.prototype = {
    toString$0: function(_) {
      return this._furnishing_builder$_name;
    }
  };
  T.furnishing_closure.prototype = {
    call$1: function(line) {
      return J.trim$0$s(H.stringTypeCheck(line));
    },
    $signature: 3
  };
  A.Elements_closure8.prototype = {
    call$1: function(_) {
      return new G.WindAction();
    },
    $signature: 25
  };
  A.Elements_closure6.prototype = {
    call$1: function(_) {
      return new G.BurnActorAction();
    },
    $signature: 26
  };
  A.Elements_closure7.prototype = {
    call$4: function(pos, hit, distance, fuel) {
      hit.get$averageDamage().toInt$0(0);
      return new G.BurnFloorAction();
    },
    $signature: 27
  };
  A.Elements_closure4.prototype = {
    call$1: function(damage) {
      return new E.FreezeActorAction();
    },
    $signature: 28
  };
  A.Elements_closure5.prototype = {
    call$4: function(pos, hit, distance, _) {
      return new G.FreezeFloorAction();
    },
    $signature: 29
  };
  A.Elements_closure2.prototype = {
    call$1: function(damage) {
      return new E.PoisonAction();
    },
    $signature: 30
  };
  A.Elements_closure3.prototype = {
    call$4: function(pos, hit, distance, _) {
      hit.get$averageDamage().toInt$0(0);
      return new G.PoisonFloorAction();
    },
    $signature: 31
  };
  A.Elements_closure1.prototype = {
    call$1: function(damage) {
      return new E.BlindAction();
    },
    $signature: 32
  };
  A.Elements_closure.prototype = {
    call$1: function(damage) {
      return new E.DazzleAction();
    },
    $signature: 82
  };
  A.Elements_closure0.prototype = {
    call$4: function(pos, hit, distance, _) {
      var min = C.JSNumber_methods.clamp$2(C.JSInt_methods.$add(1, hit.get$averageDamage().toInt$0(0).$mul(0, 4)), 0, 255),
        max = C.JSNumber_methods.clamp$2(C.JSInt_methods.$add(128, hit.get$averageDamage().$mul(0, 16)), 0, 255);
      C.JSNumber_methods.toInt$0(K.lerpDouble(hit.get$range().$sub(0, distance), 0, hit.get$range(), min, max));
      return new G.LightFloorAction();
    },
    $signature: 34
  };
  R._BaseBuilder.prototype = {
    toss$4$breakage$damage$element$range: function(breakage, damage, element, range) {
      var _this = this;
      _this._tossDamage = damage;
      _this._tossElement = element;
      _this._tossRange = range;
      _this._breakage = breakage;
    },
    toss$3$breakage$damage$range: function(breakage, damage, range) {
      return this.toss$4$breakage$damage$element$range(breakage, damage, null, range);
    },
    toss$1$breakage: function(breakage) {
      return this.toss$4$breakage$damage$element$range(breakage, null, null, null);
    },
    toss$3$damage$element$range: function(damage, element, range) {
      return this.toss$4$breakage$damage$element$range(null, damage, element, range);
    },
    toss$2$breakage$range: function(breakage, range) {
      return this.toss$4$breakage$damage$element$range(breakage, null, null, range);
    },
    toss$1$damage: function(damage) {
      return this.toss$4$breakage$damage$element$range(null, damage, null, null);
    },
    toss$1$range: function(range) {
      return this.toss$4$breakage$damage$element$range(null, null, null, range);
    },
    toss$2$damage$range: function(damage, range) {
      return this.toss$4$breakage$damage$element$range(null, damage, null, range);
    },
    destroy$3$chance$fuel: function(element, chance, fuel) {
      this._destroyChance.$indexSet(0, element, chance);
      this._fuel = fuel;
    },
    destroy$2$chance: function(element, chance) {
      return this.destroy$3$chance$fuel(element, chance, null);
    },
    skill$1: function(skill) {
      C.JSArray_methods.add$1(this._skills, Q.Skills_find(skill));
    },
    set$_tossUse: function(_tossUse) {
      this._tossUse = H.functionTypeCheck(_tossUse, {func: 1, ret: V.Action, args: [L.Vec]});
    }
  };
  R._CategoryBuilder.prototype = {
    tag$1: function(_, tagPath) {
      var tags, t1, _i, equipSlot, _this = this;
      $.$get$Items_types().defineTags$1("item/" + tagPath);
      tags = H.setRuntimeTypeInfo(tagPath.split("/"), [P.String]);
      _this._builder$_tag = H.stringTypeCheck(C.JSArray_methods.get$last(tags));
      if (C.JSArray_methods.contains$1(tags, "shield") || C.JSArray_methods.contains$1(tags, "light"))
        _this._equipSlot = "hand";
      else if (C.JSArray_methods.contains$1(tags, "weapon")) {
        _this._equipSlot = "hand";
        t1 = C.JSArray_methods.indexOf$1(tags, "weapon") + 1;
        if (t1 < 0 || t1 >= tags.length)
          return H.ioore(tags, t1);
        _this._weaponType = H.stringTypeCheck(tags[t1]);
      } else
        for (_i = 0; _i < 8; ++_i) {
          equipSlot = C.List_ww8[_i];
          if (C.JSArray_methods.contains$1(tags, equipSlot)) {
            _this._equipSlot = equipSlot;
            break;
          }
        }
      $.$get$Affixes_prefixes().defineTags$1(tagPath);
      $.$get$Affixes_suffixes().defineTags$1(tagPath);
    },
    treasure$0: function() {
      this._isTreasure = true;
    },
    twoHanded$0: function() {
      this._isTwoHanded = true;
    }
  };
  R._ItemBuilder.prototype = {
    depth$2$to: function(from, to) {
      H.intTypeCheck(from);
      H.intTypeCheck(to);
      this._minDepth = from;
      this._maxDepth = to == null ? 100 : to;
    },
    depth$1: function(from) {
      return this.depth$2$to(from, null);
    },
    defense$2: function(amount, message) {
      this._defense = new U.Defense(amount);
    },
    armor$2$weight: function(armor, weight) {
      this._armor = armor;
      this._weight = weight;
    },
    armor$1: function(armor) {
      return this.armor$2$weight(armor, null);
    },
    weapon$2$heft: function(damage, heft) {
      this._attack = U.Attack$(null, $._category._verb, damage, null, null);
      this._heft = heft;
    },
    ranged$4$damage$heft$range: function(noun, damage, heft, range) {
      this._attack = U.Attack$(new O.Noun(noun), "pierce[s]", damage, range, null);
      this._heft = heft;
    },
    food$1: function(amount) {
      "" + amount;
      H.functionTypeCheck(new R._ItemBuilder_food_closure(amount), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    detection$2$range: function(types, range) {
      var t1, typeDescription;
      H.assertSubtype(types, "$isList", [T.DetectType], "$asList");
      t1 = types.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(types, 0);
        typeDescription = types[0] === C.DetectType_0 ? "exits" : "items";
      }
      if (range != null)
        H.S(range);
      H.functionTypeCheck(new R._ItemBuilder_detection_closure(types, range), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    detection$1: function(types) {
      return this.detection$2$range(types, null);
    },
    perception$2$distance$duration: function(distance, duration) {
      var t1 = {};
      t1.duration = duration;
      t1.distance = distance;
      H.functionTypeCheck(new R._ItemBuilder_perception_closure(t1), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    resistSalve$1: function(element) {
      H.S(element);
      H.functionTypeCheck(new R._ItemBuilder_resistSalve_closure(element), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    mapping$2$illuminate: function(distance, illuminate) {
      var t1 = {};
      t1.illuminate = illuminate;
      illuminate == null ? t1.illuminate = false : illuminate;
      "" + distance;
      H.functionTypeCheck(new R._ItemBuilder_mapping_closure(t1, distance), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    mapping$1: function(distance) {
      return this.mapping$2$illuminate(distance, null);
    },
    haste$2: function(amount, duration) {
      "" + amount;
      "" + duration;
      H.functionTypeCheck(new R._ItemBuilder_haste_closure(amount, duration), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    teleport$1: function(distance) {
      "" + distance;
      H.functionTypeCheck(new R._ItemBuilder_teleport_closure(distance), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    heal$2$curePoison: function(amount, curePoison) {
      "" + amount;
      H.functionTypeCheck(new R._ItemBuilder_heal_closure(amount, curePoison), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    },
    heal$1: function(amount) {
      return this.heal$2$curePoison(amount, false);
    },
    ball$4: function(element, noun, verb, damage) {
      var attack = U.Attack$(new O.Noun(noun), verb, damage, 3, element);
      H.S(element);
      "" + damage;
      H.functionTypeCheck(new R._ItemBuilder_ball_closure(attack), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
      this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_ball_closure0(attack), {func: 1, ret: V.Action, args: [L.Vec]}));
    },
    flow$5$fly: function(element, noun, verb, damage, fly) {
      var t2, t1 = {},
        attack = U.Attack$(new O.Noun(noun), verb, damage, 5, element),
        motility = $.$get$Motility_walk();
      t1.motility = motility;
      if (fly) {
        t2 = $.$get$Motility_fly();
        t1.motility = new Q.Motility(motility._bitMask | t2._bitMask);
      }
      H.S(element);
      "" + damage;
      H.functionTypeCheck(new R._ItemBuilder_flow_closure(t1, attack), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
      this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_flow_closure0(t1, attack), {func: 1, ret: V.Action, args: [L.Vec]}));
    },
    flow$4: function(element, noun, verb, damage) {
      return this.flow$5$fly(element, noun, verb, damage, false);
    },
    lightSource$2$level$range: function(level, range) {
      this._builder$_emanation = level;
      "" + range;
      H.functionTypeCheck(new R._ItemBuilder_lightSource_closure(range, level), {func: 1, ret: V.Action});
      this._use = new L.ItemUse();
    }
  };
  R._ItemBuilder_food_closure.prototype = {
    call$0: function() {
      return new X.EatAction();
    },
    $signature: 36
  };
  R._ItemBuilder_detection_closure.prototype = {
    call$0: function() {
      var t1 = this.types;
      P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0));
      return new T.DetectAction();
    },
    $signature: 37
  };
  R._ItemBuilder_perception_closure.prototype = {
    call$0: function() {
      return new Q.PerceiveAction();
    },
    $signature: 38
  };
  R._ItemBuilder_resistSalve_closure.prototype = {
    call$0: function() {
      return new E.ResistAction();
    },
    $signature: 39
  };
  R._ItemBuilder_mapping_closure.prototype = {
    call$0: function() {
      return new Q.MappingAction();
    },
    $signature: 40
  };
  R._ItemBuilder_haste_closure.prototype = {
    call$0: function() {
      return new E.HasteAction();
    },
    $signature: 41
  };
  R._ItemBuilder_teleport_closure.prototype = {
    call$0: function() {
      return new S.TeleportAction();
    },
    $signature: 42
  };
  R._ItemBuilder_heal_closure.prototype = {
    call$0: function() {
      return new O.HealAction();
    },
    $signature: 43
  };
  R._ItemBuilder_ball_closure.prototype = {
    call$0: function() {
      return new G.RingSelfAction();
    },
    $signature: 44
  };
  R._ItemBuilder_ball_closure0.prototype = {
    call$1: function(pos) {
      return new G.RingFromAction();
    },
    $signature: 45
  };
  R._ItemBuilder_flow_closure.prototype = {
    call$0: function() {
      return new N.FlowSelfAction();
    },
    $signature: 46
  };
  R._ItemBuilder_flow_closure0.prototype = {
    call$1: function(pos) {
      return new N.FlowFromAction();
    },
    $signature: 47
  };
  R._ItemBuilder_lightSource_closure.prototype = {
    call$0: function() {
      return new F.IlluminateSelfAction();
    },
    $signature: 48
  };
  R._AffixBuilder.prototype = {
    depth$2$to: function(from, to) {
      H.intTypeCheck(from);
      H.intTypeCheck(to);
      this._minDepth = from;
      this._maxDepth = to == null ? 100 : to;
    },
    depth$1: function(from) {
      return this.depth$2$to(from, null);
    },
    brand$2$resist: function(element, resist) {
      var t1;
      this._brand = element;
      t1 = resist == null ? 1 : resist;
      this._resists.$indexSet(0, element, t1);
    },
    brand$1: function(element) {
      return this.brand$2$resist(element, null);
    },
    resist$2: function(element, power) {
      var t1 = power == null ? 1 : power;
      this._resists.$indexSet(0, element, t1);
    },
    resist$1: function(element) {
      return this.resist$2(element, null);
    }
  };
  X._ItemDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      addItem.call$1(Z.Affixes_createItem(this._type, this._depth, this._affixChance));
    },
    $isDrop: 1
  };
  X._TagDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, t2, itemType;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      t1 = $.$get$Items_types();
      t2 = this._depth;
      itemType = t1.tryChoose$2$tag(t2, this._tag);
      if (itemType == null)
        return;
      addItem.call$1(Z.Affixes_createItem(itemType, t2, this._affixChance));
    },
    $isDrop: 1
  };
  X._PercentDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      if ($.$get$rng().range$1(100) >= this._chance)
        return;
      this._drops$_drop.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._AllOfDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, t2, _i;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      for (t1 = this._drops, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._OneOfDrop.prototype = {
    _OneOfDrop$1: function(drops) {
      drops.forEach$1(0, new X._OneOfDrop_closure(this));
    },
    dropItem$2: function(depth, addItem) {
      var drop;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      drop = this._drops$_drop.tryChoose$1(1);
      if (drop == null)
        return;
      drop.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._OneOfDrop_closure.prototype = {
    call$2: function(drop, frequency) {
      var t1, _null = null;
      H.interceptedTypeCheck(drop, "$isDrop");
      H.doubleTypeCheck(frequency);
      t1 = this.$this._drops$_drop;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(drop, H.getTypeArgumentByIndex(t1, 0)), _null, _null, _null, frequency, frequency, _null);
    },
    $signature: 98
  };
  X._RepeatDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, taper, t2, count, i;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      t1 = this._drops$_count;
      taper = t1 > 3 ? 4 : 5;
      if (t1 > 6)
        taper = 3;
      t2 = $.$get$rng();
      count = t2.triangleInt$2(t1, C.JSInt_methods._tdivFast$1(t1, 2)) + t2.taper$2(0, taper);
      for (t1 = this._drops$_drop, i = 0; i < count; ++i)
        t1.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  F.FloorDrop.prototype = {};
  R.shop_closure.prototype = {
    call$2: function($name, frequency) {
      H.stringTypeCheck($name);
      H.doubleTypeCheck(frequency);
      this.drops.$indexSet(0, X.parseDrop($name, null, null), frequency);
    },
    $signature: 50
  };
  R._BaseBuilder0.prototype = {
    count$2: function(minOrMax, max) {
      var _this = this;
      if (max == null) {
        _this._countMin = 1;
        _this._countMax = minOrMax;
      } else {
        _this._countMin = minOrMax;
        _this._countMax = max;
      }
    },
    count$1: function(minOrMax) {
      return this.count$2(minOrMax, null);
    }
  };
  R._FamilyBuilder.prototype = {};
  R._BreedBuilder.prototype = {
    minion$3: function($name, minOrMax, max) {
      var spawn, t1;
      if ($.$get$Monsters_breeds()._tags.containsKey$1($name))
        spawn = new B._TagSpawn($name);
      else {
        t1 = new B.BreedRef($name);
        C.JSArray_methods.add$1($.BreedRef__unresolved, t1);
        spawn = new B._BreedSpawn(t1);
      }
      if (max != null)
        spawn = new B._RepeatSpawn(minOrMax, max, spawn);
      else if (minOrMax != null)
        spawn = new B._RepeatSpawn(1, minOrMax, spawn);
      C.JSArray_methods.add$1(this._minions, spawn);
    },
    minion$1: function($name) {
      return this.minion$3($name, null, null);
    },
    attack$3: function(verb, damage, element) {
      C.JSArray_methods.add$1(this._attacks, U.Attack$(null, verb, damage, 0, element));
    },
    attack$2: function(verb, damage) {
      return this.attack$3(verb, damage, null);
    },
    drop$5$affixChance$count$depthOffset$percent: function($name, affixChance, count, depthOffset, percent) {
      var drop = new X._PercentDrop(percent, X.parseDrop($name, affixChance, this._builder0$_depth + depthOffset));
      if (count > 1)
        drop = new X._RepeatDrop(count, drop);
      C.JSArray_methods.add$1(this._builder0$_drops, drop);
    },
    drop$2$percent: function($name, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, 1, 0, percent);
    },
    drop$2$count: function($name, count) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, 0, 100);
    },
    drop$4$affixChance$count$depthOffset: function($name, affixChance, count, depthOffset) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, count, depthOffset, 100);
    },
    drop$3$count$depthOffset: function($name, count, depthOffset) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, depthOffset, 100);
    },
    drop$4$affixChance$depthOffset$percent: function($name, affixChance, depthOffset, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, 1, depthOffset, percent);
    },
    drop$3$count$percent: function($name, count, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, 0, percent);
    },
    drop$3$depthOffset$percent: function($name, depthOffset, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, 1, depthOffset, percent);
    },
    drop$3$affixChance$count: function($name, affixChance, count) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, count, 0, 100);
    },
    whip$2$damage$rate: function(damage, rate) {
      return this._bolt$6$damage$range$rate(null, "whips", $.$get$Element_none(), damage, 2, rate);
    },
    bolt$4$damage$range$rate: function(element, damage, range, rate) {
      var t1 = $.$get$_elementText();
      this._bolt$6$damage$range$rate(t1.$index(0, element)[0], t1.$index(0, element)[1], element, damage, range, rate);
    },
    cone$4$damage$range$rate: function(element, damage, range, rate) {
      var t1 = $.$get$_elementText(),
        t2 = t1.$index(0, element)[0];
      t1 = t1.$index(0, element)[1];
      if (rate == null)
        rate = 5;
      if (range == null)
        range = 10;
      C.JSArray_methods.add$1(this._moves, new Y.ConeMove(U.Attack$(new O.Noun(t2), t1, damage, range, element), rate));
    },
    cone$3$damage$rate: function(element, damage, rate) {
      return this.cone$4$damage$range$rate(element, damage, null, rate);
    },
    haste$1$rate: function(rate) {
      C.JSArray_methods.add$1(this._moves, new X.HasteMove(10, 1, rate));
      return;
    },
    haste$0: function() {
      return this.haste$1$rate(5);
    },
    _bolt$6$damage$range$rate: function(noun, verb, element, damage, range, rate) {
      C.JSArray_methods.add$1(this._moves, new O.BoltMove(U.Attack$(noun != null ? new O.Noun(noun) : null, verb, damage, range, element), rate));
    }
  };
  E.dragons_closure.prototype = {
    call$2: function($name, data) {
      var t1, element, youngColor, adultColor, t2, t3, t4, dragon, _null = null,
        _s8_ = "treasure",
        _s9_ = "equipment";
      H.stringTypeCheck($name);
      H.assertSubtype(data, "$isList", [P.Object], "$asList");
      t1 = J.getInterceptor$asx(data);
      element = H.interceptedTypeCast(t1.$index(data, 0), "$isElement0");
      youngColor = H.interceptedTypeCast(t1.$index(data, 1), "$isColor");
      adultColor = H.interceptedTypeCast(t1.$index(data, 1), "$isColor");
      t1 = R.family("d", _null, _null, _null, _null, _null, _null);
      t2 = [P.String];
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("dragon".split(" "), t2));
      t1._vision = 12;
      t1._hearing = 8;
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(10));
      t1._location = C.SpawnLocation_1;
      t1 = "juvenile " + H.S($name) + " dragon";
      t3 = this._box_0;
      t4 = t3.i;
      dragon = R.breed(t1, 46 + t4 * 2, youngColor, 150 + t4 * 20, _null, _null, _null, 0);
      dragon.attack$2("bite[s]", 20 + t3.i * 2);
      dragon.attack$2("claw[s]", 15 + t3.i);
      dragon.drop$2$count(_s8_, 2 + C.JSInt_methods._tdivFast$1(t3.i, 2));
      dragon.drop$2$count("magic", 1);
      dragon.drop$2$count(_s9_, 1);
      t1 = element != $.$get$Element_none();
      if (t1)
        dragon.cone$4$damage$range$rate(element, 40 + t3.i * 6, 5, 11);
      t4 = R.family("d", _null, _null, _null, _null, _null, _null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("dragon".split(" "), t2));
      t4._vision = 16;
      t4._hearing = 10;
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20));
      t4._location = C.SpawnLocation_1;
      t4 = H.S($name) + " dragon";
      t2 = t3.i;
      dragon = R.breed(t4, 50 + t2 * 2, adultColor, 350 + t2 * 50, _null, _null, _null, 0);
      dragon.attack$2("bite[s]", 30 + t3.i * 2);
      dragon.attack$2("claw[s]", 25 + t3.i);
      dragon.drop$2$count(_s8_, 5 + C.JSInt_methods._tdivFast$1(t3.i, 2));
      dragon.drop$2$count("magic", 3 + C.JSInt_methods._tdivFast$1(t3.i, 3));
      dragon.drop$2$count(_s9_, 2 + C.JSInt_methods._tdivFast$1(t3.i, 3));
      if (t1)
        dragon.cone$3$damage$rate(element, 70 + t3.i * 8, 8);
      ++t3.i;
    },
    $signature: 51
  };
  B._BreedSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]}).call$1(this._spawns$_breed._breed$_breed);
    },
    $isSpawn: 1
  };
  B._TagSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, tries, breed;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      for (t1 = this._spawns$_tag, tries = 0; tries < 10; ++tries) {
        breed = $.$get$Monsters_breeds().tryChoose$3$includeParents$tag(depth, false, t1);
        if (breed == null)
          continue;
        if (H.boolConversionCheck(breed.flags.unique))
          continue;
        addMonster.call$1(breed);
        break;
      }
    },
    $isSpawn: 1
  };
  B._RepeatSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, taper, t2, count, i;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      t1 = this._maxCount;
      taper = t1 > 3 ? 4 : 5;
      if (t1 > 6)
        taper = 3;
      t2 = $.$get$rng();
      count = t2.inclusive$2(this._minCount, t1) + t2.taper$2(0, taper);
      for (t1 = this._spawn, i = 0; i < count; ++i)
        t1.spawnBreed$2(depth, addMonster);
    },
    $isSpawn: 1
  };
  B._AllOfSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, t2, _i;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      for (t1 = this._spawns, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].spawnBreed$2(depth, addMonster);
    },
    $isSpawn: 1
  };
  Q.AmputateMove.prototype = {
    get$experience: function() {
      return this._amputate$_body._breed$_breed.maxHealth * 0.5;
    },
    toString$0: function(_) {
      return "Amputate " + H.S(O.Log__categorize(this._amputate$_body._breed$_breed._breed$_name, false, true)) + " + " + H.S(O.Log__categorize(this._part._breed$_breed._breed$_name, false, true));
    }
  };
  O.BoltMove.prototype = {
    get$experience: function() {
      var t1 = this.attack;
      return t1.damage * t1.element.experience * (1 + t1.range / 20);
    },
    toString$0: function(_) {
      return "Bolt " + this.attack.toString$0(0) + " rate: " + this.rate;
    }
  };
  Y.ConeMove.prototype = {
    get$experience: function() {
      var t1 = this.attack;
      return t1.damage * 3 * t1.element.experience * (1 + t1.range / 10);
    },
    toString$0: function(_) {
      return "Cone " + this.attack.toString$0(0) + " rate: " + this.rate;
    }
  };
  X.HasteMove.prototype = {
    get$experience: function() {
      return this._haste$_duration * this._haste$_speed;
    },
    toString$0: function(_) {
      return "Haste " + this._haste$_speed + " for " + this._haste$_duration + " turns rate: " + this.rate;
    }
  };
  O.HealMove.prototype = {
    get$experience: function() {
      return this._amount;
    },
    toString$0: function(_) {
      return "Heal " + this._amount + " rate: " + this.rate;
    }
  };
  U.HowlMove.prototype = {
    get$experience: function() {
      return this._howl$_range * 0.5;
    },
    toString$0: function(_) {
      return "Howl " + this._howl$_range;
    }
  };
  R.MissiveMove.prototype = {
    get$experience: function() {
      return 0;
    },
    toString$0: function(_) {
      return this._missive.toString$0(0) + " rate: " + this.rate;
    }
  };
  L.SpawnMove.prototype = {
    get$experience: function() {
      return 6;
    },
    toString$0: function(_) {
      return "Spawn rate: " + this.rate;
    }
  };
  S.TeleportMove.prototype = {
    get$experience: function() {
      return this._range * 0.7;
    },
    toString$0: function(_) {
      return "Teleport " + this._range;
    }
  };
  X.Archery.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    get$name: function(_) {
      return "Archery";
    },
    baseTrainingNeeded$1: function(level) {
      --level;
      return 100 * level * level * level;
    }
  };
  X._Archery_Discipline_TargetSkill.prototype = {};
  D.AxeMastery.prototype = {
    get$name: function(_) {
      return "Axe Mastery";
    }
  };
  M.BattleHardening.prototype = {
    get$maxLevel: function() {
      return 40;
    },
    get$name: function(_) {
      return "Battle Hardening";
    },
    baseTrainingNeeded$1: function(level) {
      return C.JSNumber_methods.ceil$0(60 * Math.pow(level, 1.5));
    }
  };
  A.ClubMastery.prototype = {
    get$name: function(_) {
      return "Club Mastery";
    }
  };
  Y.DualWield.prototype = {
    get$maxLevel: function() {
      return 10;
    },
    get$name: function(_) {
      return "Dual-wield";
    },
    baseTrainingNeeded$1: function(level) {
      return 100 * level * level * level;
    },
    dualWield$1: function(hero) {
      hero.discoverSkill$1(this);
    },
    modifyHeft$3: function(hero, level, heft) {
      var t1 = hero.save._equipment.get$weapons();
      if (t1.get$length(t1) !== 2)
        return heft;
      return heft * K.lerpDouble(level, 0, 10, 1, 0.8);
    }
  };
  S.MasteryDiscipline.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    baseTrainingNeeded$1: function(level) {
      if (level === 0)
        return 0;
      if (level === 1)
        return 1;
      --level;
      return 100 * level * level * level;
    }
  };
  A.SlayDiscipline.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    get$discoverMessage: function() {
      return "{1} are eager to learn to slay " + this._displayName.toLowerCase() + ".";
    },
    get$name: function(_) {
      return "Slay " + this._displayName;
    },
    seeBreed$2: function(hero, breed) {
      if (!$.$get$Monsters_breeds().hasTag$2(O.Log__categorize(breed._breed$_name, false, true), this._breedGroup))
        return;
      hero.discoverSkill$1(this);
    },
    baseTrainingNeeded$1: function(level) {
      return 100 * level * level * level;
    }
  };
  Z.SpearMastery.prototype = {
    get$name: function(_) {
      return "Spear Mastery";
    }
  };
  G.Swordfighting.prototype = {
    get$name: function(_) {
      return "Swordfighting";
    }
  };
  O.WhipMastery.prototype = {
    get$name: function(_) {
      return "Whip Mastery";
    }
  };
  O._WhipMastery_MasteryDiscipline_TargetSkill.prototype = {};
  Q.Skills_closure.prototype = {
    call$1: function(skill) {
      return J.get$name$x(skill);
    },
    $signature: 52
  };
  K.Flee.prototype = {
    get$name: function(_) {
      return "Flee";
    },
    get$baseComplexity: function() {
      return 10;
    }
  };
  K.Escape.prototype = {
    get$name: function(_) {
      return "Escape";
    },
    get$baseComplexity: function() {
      return 15;
    }
  };
  K.Disappear.prototype = {
    get$name: function(_) {
      return "Disappear";
    },
    get$baseComplexity: function() {
      return 30;
    }
  };
  D.SenseItems.prototype = {
    get$name: function(_) {
      return "Sense Items";
    },
    get$baseComplexity: function() {
      return 17;
    }
  };
  L.Icicle.prototype = {
    get$name: function(_) {
      return "Icicle";
    },
    get$baseComplexity: function() {
      return 10;
    }
  };
  L.BrilliantBeam.prototype = {
    get$name: function(_) {
      return "Brilliant Beam";
    },
    get$baseComplexity: function() {
      return 14;
    }
  };
  L.Windstorm.prototype = {
    get$name: function(_) {
      return "Windstorm";
    },
    get$baseComplexity: function() {
      return 18;
    }
  };
  L.FireBarrier.prototype = {
    get$name: function(_) {
      return "Fire Barrier";
    },
    get$baseComplexity: function() {
      return 30;
    }
  };
  L.TidalWave.prototype = {
    get$name: function(_) {
      return "Tidal Wave";
    },
    get$baseComplexity: function() {
      return 40;
    }
  };
  L._BrilliantBeam_Spell_TargetSkill.prototype = {};
  L._FireBarrier_Spell_TargetSkill.prototype = {};
  L._Icicle_Spell_TargetSkill.prototype = {};
  X.Region.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  X.Architect.prototype = {
    buildStage$1: function(placeHero) {
      return this.buildStage$body$Architect(H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]}));
    },
    buildStage$body$Architect: function($async$placeHero) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var placeHero = $async$placeHero;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, styles, lastFillable, i, possibleRegions, regions, architecture, unownedPassages, decorator;
        return function $async$buildStage$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  for (t1 = $async$self.stage.tiles, t2 = t1.bounds, t3 = X.RectIterator$(t2); t3.moveNext$0();) {
                    t4 = t3._x;
                    t5 = t1._elements;
                    t4 = t3._y * t2.size.x + t4;
                    if (t4 < 0 || t4 >= t5.length) {
                      H.ioore(t5, t4);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t5[t4].type = $.$get$Tiles_unformed();
                  }
                  styles = F.ArchitecturalStyle_pick($async$self.depth);
                  i = styles.length - 1;
                  while (true) {
                    if (!(i >= 0)) {
                      lastFillable = null;
                      break;
                    }
                    if (styles[i].canFill) {
                      lastFillable = i;
                      break;
                    }
                    --i;
                  }
                  possibleRegions = H.setRuntimeTypeInfo(C.List_0.slice(0), [H.getTypeArgumentByIndex(C.List_0, 0)]);
                  t3 = X.Region;
                  regions = H.setRuntimeTypeInfo([], [t3]);
                  for (i = 0; i < styles.length; ++i)
                    if (i === lastFillable || !styles[i].canFill)
                      C.JSArray_methods.add$1(regions, C.Region_everywhere);
                    else
                      C.JSArray_methods.add$1(regions, $.$get$rng().take$1$1(0, possibleRegions, t3));
                  i = 0;
                case 3:
                  // for condition
                  if (!(i < styles.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  t3 = styles[i];
                  if (i >= regions.length) {
                    H.ioore(regions, i);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t4 = regions[i];
                  architecture = t3._factory.call$0();
                  architecture._architect = $async$self;
                  architecture._style = t3;
                  architecture._region = t4;
                  $async$goto = 6;
                  return P._IterationMarker_yieldStar(architecture.build$0());
                case 6:
                  // after yield
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                  for (t3 = J.get$iterator$ax(t2.trace$0()); t3.moveNext$0();) {
                    t4 = t3.get$current();
                    t5 = t1._elements;
                    t4 = t4.y * t2.size.x + t4.x;
                    if (t4 < 0 || t4 >= t5.length) {
                      H.ioore(t5, t4);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t5[t4].type = $.$get$Tiles_solid();
                  }
                  unownedPassages = H.setRuntimeTypeInfo([], [L.Vec]);
                  $async$goto = 7;
                  return P._IterationMarker_yieldStar($async$self._fillPassages$1(unownedPassages));
                case 7:
                  // after yield
                  $async$goto = 8;
                  return P._IterationMarker_yieldStar($async$self._addShortcuts$1(unownedPassages));
                case 8:
                  // after yield
                  $async$goto = 9;
                  return P._IterationMarker_yieldStar($async$self._claimPassages$1(unownedPassages));
                case 9:
                  // after yield
                  decorator = new S.Decorator($async$self, P.LinkedHashMap_LinkedHashMap$_empty(X.Architecture, [P.List, L.Vec]), P.LinkedHashSet_LinkedHashSet(B.Breed));
                  $async$goto = 10;
                  return P._IterationMarker_yieldStar(decorator.decorate$0());
                case 10:
                  // after yield
                  placeHero.call$1(decorator._heroPos);
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _carve$4: function(architecture, x, y, tile) {
      var t3, t4, t5, t6, t7, _i, dir, t8, t9, t10,
        t1 = this.stage.tiles,
        t2 = t1.$get$2(x, y);
      t2.type = tile == null ? $.$get$Tiles_open() : tile;
      ++this._carvedTiles;
      t2 = this._owners;
      t2.$set$3(x, y, architecture);
      for (t3 = t2.bounds, t4 = H.getTypeArgumentByIndex(t2, 0), t2 = t2._elements, t5 = t3.size.x, t6 = t1._elements, t1 = t1.bounds.size.x, t7 = t6.length, _i = 0; _i < 8; ++_i) {
        dir = C.List_slV[_i];
        t8 = dir.x + x;
        t9 = dir.y + y;
        if (t3.contains$1(0, new L.Vec(t8, t9))) {
          t10 = t9 * t1 + t8;
          if (t10 < 0 || t10 >= t7)
            return H.ioore(t6, t10);
          t10 = t6[t10].type != $.$get$Tiles_unformedWet();
        } else
          t10 = false;
        if (t10)
          C.JSArray_methods.$indexSet(t2, t9 * t5 + t8, H.assertSubtypeOfRuntimeType(architecture, t4));
      }
    },
    _canCarve$2: function(architecture, pos) {
      var t3, t4, t5, t6, t7, _i, here, t8, t9, t10, t11, owner,
        t1 = this.stage.tiles,
        t2 = t1.bounds;
      if (!t2.contains$1(0, pos))
        return false;
      t3 = this._owners;
      if (t3.$index(0, pos) != null)
        return false;
      if (t1.$index(0, pos).type == $.$get$Tiles_unformedWet())
        return false;
      for (t4 = pos.get$neighbors(), t5 = t4.length, t6 = t3._elements, t3 = t3.bounds.size.x, t7 = t6.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
        here = t4[_i];
        if (!t2.contains$1(0, here))
          continue;
        t8 = t1._elements;
        t9 = here.y;
        t10 = here.x;
        t11 = t9 * t2.size.x + t10;
        if (t11 < 0 || t11 >= t8.length)
          return H.ioore(t8, t11);
        if (t8[t11].type == $.$get$Tiles_unformedWet())
          continue;
        t8 = t9 * t3 + t10;
        if (t8 < 0 || t8 >= t7)
          return H.ioore(t6, t8);
        owner = t6[t8];
        if (owner != null && owner !== architecture)
          return false;
      }
      return true;
    },
    _fillPassages$1: function(unownedPassages) {
      return this._fillPassages$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _fillPassages$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, openCount, start, startDistance, t12, t13, pos, tile, distance, reachability, count, _i, count0, t1, unformed;
        return function $async$_fillPassages$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = [L.Vec];
                  unformed = H.setRuntimeTypeInfo([], t1);
                  for (t2 = $async$self.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4.inflate$1(-1)), t3 = t3._elements, t6 = t4.size, t7 = t6.x, t8 = t3.length, t4 = t4.pos, t9 = t4.x, t10 = t9 + t7, t4 = t4.y, t6 = t6.y, t11 = t4 + t6, openCount = 0, start = C.Vec_0_0, startDistance = 99999; t5.moveNext$0();) {
                    t12 = t5._x;
                    t13 = t5._y;
                    pos = new L.Vec(t12, t13);
                    t12 = t13 * t7 + t12;
                    if (t12 < 0 || t12 >= t8) {
                      H.ioore(t3, t12);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    tile = t3[t12].type;
                    if (tile == $.$get$Tiles_open()) {
                      ++openCount;
                      t12 = pos.$sub(0, new L.Vec(C.JSInt_methods._tdivFast$1(Math.min(t9, t10) + Math.max(t9, t10), 2), C.JSInt_methods._tdivFast$1(Math.min(t4, t11) + Math.max(t4, t11), 2)));
                      distance = Math.abs(t12.x) + Math.abs(t12.y);
                      if (distance < startDistance) {
                        startDistance = distance;
                        start = pos;
                      }
                    } else if (!(tile != $.$get$Tiles_unformed() && tile != $.$get$Tiles_unformedWet()))
                      C.JSArray_methods.add$1(unformed, pos);
                  }
                  t4 = $.$get$rng();
                  t4.toString;
                  C.JSArray_methods.shuffle$1(H.assertSubtype(unformed, "$isList", t1, "$asList"), t4._random);
                  t4 = P.int;
                  t5 = M.Array2D$(t7, t6, -2, t4);
                  reachability = new D.Reachability(t2, start, t5, new U.VecSet(M.Array2D$(t7, t6, 0, t4), t7, t6));
                  reachability._setDistance$2(start, 0);
                  reachability._reachability$_process$1(H.setRuntimeTypeInfo([start], t1));
                  t1 = unformed.length, t4 = t5._elements, t5 = t5.bounds.size.x, t6 = t4.length, count = 0, _i = 0;
                case 3:
                  // for condition
                  if (!(_i < unformed.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  pos = unformed[_i];
                  t2.toString;
                  H.interceptedTypeCheck(pos, "$isVec");
                  t9 = pos.y;
                  t10 = pos.x;
                  t11 = t9 * t7 + t10;
                  if (t11 < 0 || t11 >= t8) {
                    H.ioore(t3, t11);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t11 = t3[t11];
                  t12 = t11.type;
                  t13 = t12 == $.$get$Tiles_unformed();
                  if (!t13 && t12 != $.$get$Tiles_unformedWet()) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  if (t13)
                    t11.type = $.$get$Tiles_solid();
                  else if (t12 == $.$get$Tiles_unformedWet())
                    t11.type = $.$get$Tiles_solidWet();
                  t9 = t9 * t5 + t10;
                  if (t9 < 0 || t9 >= t6) {
                    H.ioore(t4, t9);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t9 = t4[t9];
                  if (typeof t9 !== "number") {
                    t9.$ge();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  if (!(t9 >= 0)) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  reachability.fill$1(0, pos);
                  if (reachability._reachedOpenCount !== openCount) {
                    $async$self._makePassage$2(unownedPassages, pos);
                    reachability.undoFill$0();
                  }
                  count0 = count + 1;
                  $async$goto = C.JSInt_methods.$mod(count, 20) === 0 ? 6 : 7;
                  break;
                case 6:
                  // then
                  $async$goto = 8;
                  return H.S(pos);
                case 8:
                  // after yield
                case 7:
                  // join
                  count = count0;
                case 4:
                  // for update
                  unformed.length === t1 || (0, H.throwConcurrentModificationError)(unformed), ++_i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _addShortcuts$1: function(unownedPassages) {
      return this._addShortcuts$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _addShortcuts$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t2, t3, t4, t5, t6, t7, pos, type, _i, dir, t8, maxShortcuts, shortcuts, path, t1, possibleStarts;
        return function $async$_addShortcuts$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = [X._Path];
                  possibleStarts = H.setRuntimeTypeInfo([], t1);
                  for (t2 = $async$self.stage.tiles, t3 = t2.bounds, t4 = X.RectIterator$(t3.inflate$1(-1)), t2 = t2._elements, t3 = t3.size.x, t5 = t2.length; t4.moveNext$0();) {
                    t6 = t4._x;
                    t7 = t4._y;
                    pos = new L.Vec(t6, t7);
                    t6 = t7 * t3 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t2, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    type = t2[t6].type;
                    t6 = $.$get$Tiles_open();
                    if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                      continue;
                    for (_i = 0; _i < 4; ++_i) {
                      dir = C.List_aAW[_i];
                      t7 = pos.$add(0, dir.get$rotateLeft90());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                        continue;
                      t7 = pos.$add(0, dir.get$rotateLeft45());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      t7 = $.$get$Tiles_solid();
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t8 = pos.$add(0, dir);
                      t8 = t8.y * t3 + t8.x;
                      if (t8 < 0 || t8 >= t5) {
                        H.ioore(t2, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t8].type;
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t8 = pos.$add(0, dir.get$rotateRight45());
                      t8 = t8.y * t3 + t8.x;
                      if (t8 < 0 || t8 >= t5) {
                        H.ioore(t2, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t8].type;
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t7 = pos.$add(0, dir.get$rotateRight90());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                        continue;
                      C.JSArray_methods.add$1(possibleStarts, new X._Path(pos, dir));
                    }
                  }
                  t2 = $.$get$rng();
                  t2.toString;
                  C.JSArray_methods.shuffle$1(H.assertSubtype(possibleStarts, "$isList", t1, "$asList"), t2._random);
                  maxShortcuts = t2.range$2(5, 40);
                  t1 = possibleStarts.length, shortcuts = 0, _i = 0;
                case 3:
                  // for condition
                  if (!(_i < possibleStarts.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  path = possibleStarts[_i];
                  if (!H.boolConversionCheck($async$self._tryShortcut$3(unownedPassages, path.pos, path.dir))) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  $async$goto = 6;
                  return "Shortcut";
                case 6:
                  // after yield
                  ++shortcuts;
                  if (shortcuts >= maxShortcuts) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                case 4:
                  // for update
                  possibleStarts.length === t1 || (0, H.throwConcurrentModificationError)(possibleStarts), ++_i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _tryShortcut$3: function(unownedPassages, start, heading) {
      var tiles, pos, next, t2, t3, t4, t5, type, _i, t6,
        t1 = [L.Vec];
      H.assertSubtype(unownedPassages, "$isList", t1, "$asList");
      tiles = H.setRuntimeTypeInfo([], t1);
      pos = start.$add(0, heading);
      for (t1 = this.stage; true; pos = next) {
        C.JSArray_methods.add$1(tiles, pos);
        next = pos.$add(0, heading);
        t2 = t1.tiles;
        t3 = t2.bounds;
        if (!t3.contains$1(0, next))
          return false;
        t2 = t2._elements;
        t3 = t3.size.x;
        t4 = next.y * t3 + next.x;
        t5 = t2.length;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t2, t4);
        type = t2[t4].type;
        if (type == $.$get$Tiles_open() || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()) {
          t2 = tiles.length;
          t3 = $.$get$rng();
          if (!new X._LengthPathfinder(t2 * 2 + (t3._random.nextInt$1(8) + 8), t1, start, next).search$0(0)) {
            for (t1 = tiles.length, _i = 0; _i < tiles.length; tiles.length === t1 || (0, H.throwConcurrentModificationError)(tiles), ++_i)
              this._makePassage$2(unownedPassages, tiles[_i]);
            return true;
          }
          return false;
        }
        t4 = next.$add(0, heading.get$rotateLeft90());
        t4 = t4.y * t3 + t4.x;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t2, t4);
        type = t2[t4].type;
        t4 = $.$get$Tiles_solid();
        if (!(type == t4 || type == $.$get$Tiles_solidWet()))
          return false;
        t6 = next.$add(0, heading.get$rotateRight90());
        t6 = t6.y * t3 + t6.x;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t2, t6);
        type = t2[t6].type;
        if (!(type == t4 || type == $.$get$Tiles_solidWet()))
          return false;
        t2 = $.$get$rng();
        t3 = tiles.length;
        if (t2._random.nextInt$1(100) < t3 * 10)
          return false;
      }
    },
    _makePassage$2: function(unownedPassages, pos) {
      var t1, t2, owner;
      H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList");
      t1 = this.stage.tiles.$index(0, pos);
      t2 = t1.type;
      if (t2 == $.$get$Tiles_solid())
        t1.type = $.$get$Tiles_passage();
      else if (t2 == $.$get$Tiles_solidWet())
        t1.type = $.$get$Tiles_passageWet();
      owner = this._owners.$index(0, pos);
      if (owner == null)
        C.JSArray_methods.add$1(unownedPassages, pos);
      else
        this._claimNeighbors$2(pos, owner);
    },
    _claimPassages$1: function(unownedPassages) {
      return this._claimPassages$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _claimPassages$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, stillUnowned, t7, _i, pos, neighbors, t8, t9, _i0, neighbor, t10, owner, max;
        return function $async$_claimPassages$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._owners, t2 = t1._elements, t3 = t1.bounds.size.x, t4 = t2.length, t5 = [X.Architecture], t1 = H.getTypeArgumentByIndex(t1, 0), t6 = [L.Vec];
                case 3:
                  // for condition
                  // trivial condition
                  stillUnowned = H.setRuntimeTypeInfo([], t6);
                  for (t7 = unownedPassages.length, _i = 0; _i < unownedPassages.length; unownedPassages.length === t7 || (0, H.throwConcurrentModificationError)(unownedPassages), ++_i) {
                    pos = unownedPassages[_i];
                    neighbors = H.setRuntimeTypeInfo([], t5);
                    for (t8 = pos.get$neighbors(), t9 = t8.length, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i0) {
                      neighbor = t8[_i0];
                      t10 = neighbor.y * t3 + neighbor.x;
                      if (t10 < 0 || t10 >= t4) {
                        H.ioore(t2, t10);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      owner = t2[t10];
                      if (owner != null)
                        C.JSArray_methods.add$1(neighbors, owner);
                    }
                    max = neighbors.length;
                    if (max !== 0) {
                      t8 = $.$get$rng();
                      t8.toString;
                      H.assertSubtype(neighbors, "$isList", t5, "$asList");
                      t8 = t8._random.nextInt$1(max - 0);
                      if (t8 < 0 || t8 >= neighbors.length) {
                        H.ioore(neighbors, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      owner = neighbors[t8];
                      H.assertSubtypeOfRuntimeType(owner, t1);
                      C.JSArray_methods.$indexSet(t2, pos.y * t3 + pos.x, owner);
                      $async$self._claimNeighbors$2(pos, owner);
                    } else
                      C.JSArray_methods.add$1(stillUnowned, pos);
                  }
                  if (stillUnowned.length === 0) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  $async$goto = 6;
                  return "Claim";
                case 6:
                  // after yield
                case 4:
                  // for update
                  unownedPassages = stillUnowned;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _claimNeighbors$2: function(pos, owner) {
      var t1, t2, t3, t4, t5, t6, _i, neighbor, t7;
      for (t1 = pos.get$neighbors(), t2 = t1.length, t3 = this._owners, t4 = t3._elements, t5 = t3.bounds.size.x, t6 = t4.length, t3 = H.getTypeArgumentByIndex(t3, 0), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        neighbor = t1[_i];
        t7 = neighbor.y * t5 + neighbor.x;
        if (t7 < 0 || t7 >= t6)
          return H.ioore(t4, t7);
        if (t4[t7] == null)
          C.JSArray_methods.$indexSet(t4, t7, H.assertSubtypeOfRuntimeType(owner, t3));
      }
    },
    get$depth: function() {
      return this.depth;
    }
  };
  X._Path.prototype = {};
  X.Architecture.prototype = {
    get$depth: function() {
      return this._architect.depth;
    },
    get$paintStyle: function() {
      return $.$get$PaintStyle_rock();
    },
    spawnMonsters$1: function(painter) {
      return false;
    }
  };
  X._LengthPathfinder.prototype = {
    processStep$1: function(path) {
      if (path.length >= this._maxLength)
        return false;
      return;
    },
    stepCost$2: function(pos, tile) {
      var t1 = $.$get$Motility_doorAndWalk();
      if ((tile.type.motility._bitMask & t1._bitMask) !== 0)
        return 1;
      return;
    }
  };
  F.ArchitecturalStyle.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  F.ArchitecturalStyle__initialize_addStyle.prototype = {
    call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, endFrequency, itemDensity, monsterDensity, monsters, start, startFrequency) {
      var t1, t2, t3, t4;
      H.functionTypeCheck(create, {func: 1, ret: X.Architecture});
      t1 = H.setRuntimeTypeInfo((monsters == null ? "monster" : monsters).split(" "), [P.String]);
      t2 = monsterDensity == null ? 1 : monsterDensity;
      t3 = itemDensity == null ? 1 : itemDensity;
      t4 = $.$get$ArchitecturalStyle__styles();
      t4.toString;
      t4._resource$_add$7(H.assertSubtypeOfRuntimeType(new F.ArchitecturalStyle($name, decor, decorDensity, t1, t2, t3, create, canFill !== false), H.getTypeArgumentByIndex(t4, 0)), null, start, end, startFrequency, endFrequency, null);
    },
    call$1: function($name) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, null, null, null, 100, null, null, null, null, 1, null);
    },
    call$5$create$decor$decorDensity$startFrequency: function($name, create, decor, decorDensity, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, create, decor, decorDensity, 100, null, null, null, null, 1, startFrequency);
    },
    call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency: function($name, create, decor, decorDensity, endFrequency, monsters, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, create, decor, decorDensity, 100, endFrequency, null, null, monsters, 1, startFrequency);
    },
    call$7$canFill$create$decor$decorDensity$monsterDensity$monsters: function($name, canFill, create, decor, decorDensity, monsterDensity, monsters) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, 100, null, null, monsterDensity, monsters, 1, null);
    },
    call$3$end$start: function($name, end, start) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, null, null, null, end, null, null, null, null, start, null);
    },
    call$11$canFill$create$decor$decorDensity$end$itemDensity$monsterDensity$monsters$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, itemDensity, monsterDensity, monsters, start, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, end, null, itemDensity, monsterDensity, monsters, start, startFrequency);
    },
    call$8$canFill$create$decor$decorDensity$end$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, start, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, end, null, null, null, null, start, startFrequency);
    },
    $signature: 53
  };
  F.ArchitecturalStyle__initialize_closure.prototype = {
    call$0: function() {
      return new Q.Dungeon(0.3);
    },
    $signature: 54
  };
  F.ArchitecturalStyle__initialize_closure0.prototype = {
    call$0: function() {
      return new D.Catacomb(0.3, 8, 32);
    },
    $signature: 55
  };
  F.ArchitecturalStyle__initialize_closure1.prototype = {
    call$0: function() {
      return new Q.Cavern();
    },
    $signature: 56
  };
  F.ArchitecturalStyle__initialize_closure2.prototype = {
    call$0: function() {
      return new F.Lake();
    },
    $signature: 57
  };
  F.ArchitecturalStyle__initialize_closure3.prototype = {
    call$0: function() {
      return new G.River();
    },
    $signature: 58
  };
  F.ArchitecturalStyle__initialize_pit.prototype = {
    call$3$end$start: function(monsterGroup, end, start) {
      this.addStyle.call$8$canFill$create$decor$decorDensity$end$start$startFrequency(monsterGroup + " pit", false, new F.ArchitecturalStyle__initialize_pit_closure(monsterGroup), "glowing-moss", 0.05, end, start, 0.2);
    },
    call$1: function(monsterGroup) {
      return this.call$3$end$start(monsterGroup, null, null);
    },
    $signature: 14
  };
  F.ArchitecturalStyle__initialize_pit_closure.prototype = {
    call$0: function() {
      var t1 = H.setRuntimeTypeInfo([], [L.Vec]);
      return new A.Pit(this.monsterGroup, 12, 24, t1);
    },
    $signature: 60
  };
  F.ArchitecturalStyle__initialize_keep.prototype = {
    call$3$end$start: function(monsters, end, start) {
      this.addStyle.call$11$canFill$create$decor$decorDensity$end$itemDensity$monsterDensity$monsters$start$startFrequency(monsters + " keep", false, new F.ArchitecturalStyle__initialize_keep_closure(), "keep", 0.07, end, 1.5, 0, monsters, start, 2);
    },
    call$1: function(monsters) {
      return this.call$3$end$start(monsters, null, null);
    },
    $signature: 14
  };
  F.ArchitecturalStyle__initialize_keep_closure.prototype = {
    call$0: function() {
      return Z.Keep_Keep(5);
    },
    $signature: 61
  };
  D.Catacomb.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, failed, t2, t3, cave, placed, i, t4, t5, xMax, yMax, xMin, yMin, t1, maxSize, minSize;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._architect.stage.tiles.bounds.size;
                maxSize = Math.sqrt(Math.min(Math.min($async$self._catacomb$_maxSize, t1.y), t1.x));
                minSize = Math.min(Math.sqrt($async$self._catacomb$_minSize), maxSize);
                t1 = $async$self._catacomb$_density;
                failed = 0;
              case 2:
                // while condition
                t2 = $async$self._architect;
                t3 = t2.stage.tiles.bounds.size;
                if (!(t2._carvedTiles / ((t3.x - 2) * (t3.y - 2)) < t1 && failed < 100)) {
                  // goto after while
                  $async$goto = 3;
                  break;
                }
                cave = M.Blob_make(C.JSNumber_methods.toInt$0(Math.pow($.$get$rng().float$2(0, minSize, maxSize), 2)));
                t2 = cave.bounds.size;
                t3 = t2.x;
                t2 = t2.y;
                i = 0;
              case 4:
                // while condition
                if (!(i < 400)) {
                  placed = false;
                  // goto after while
                  $async$goto = 5;
                  break;
                }
                t4 = $async$self._architect.stage.tiles.bounds.size;
                t5 = t4.x;
                xMax = t5 - t3;
                t4 = t4.y;
                yMax = t4 - t2;
                switch ($async$self._region) {
                  case C.Region_everywhere:
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_n:
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_ne:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    yMin = 1;
                    break;
                  case C.Region_e:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = 1;
                    break;
                  case C.Region_se:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    break;
                  case C.Region_s:
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_sw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_w:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_nw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  default:
                    xMin = 1;
                    yMin = 1;
                }
                if (xMin >= xMax) {
                  // goto break c$1
                  $async$goto = 6;
                  break;
                }
                if (yMin >= yMax) {
                  // goto break c$1
                  $async$goto = 6;
                  break;
                }
                t4 = $.$get$rng();
                t5 = t4._random.nextInt$1(xMax - xMin);
                $async$goto = $async$self._catacomb$_tryPlaceCave$3(cave, t5 + xMin, t4._random.nextInt$1(yMax - yMin) + yMin) ? 7 : 8;
                break;
              case 7:
                // then
                $async$goto = 9;
                return "cave";
              case 9:
                // after yield
                placed = true;
                // goto after while
                $async$goto = 5;
                break;
              case 8:
                // join
              case 6:
                // break c$1
                ++i;
                // goto while condition
                $async$goto = 4;
                break;
              case 5:
                // after while
                if (!placed)
                  ++failed;
                // goto while condition
                $async$goto = 2;
                break;
              case 3:
                // after while
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _catacomb$_tryPlaceCave$3: function(cave, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      for (t1 = cave.bounds, t2 = X.RectIterator$(t1), t3 = cave._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t7 * t4 + t6;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        if (H.boolConversionCheck(t3[t8]))
          if (!_this._architect._canCarve$2(_this, new L.Vec(t6 + x, t7 + y)))
            return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t2;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        if (H.boolConversionCheck(t3[t7]))
          _this._architect._carve$4(_this, t2 + x, t6 + y, null);
      }
      return true;
    }
  };
  Q.Cavern.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, cells2, t3, t4, t5, t6, pos, i, t0, t7, t8, t9, t10, t11, t12, t13, walls, _i, here, t14, t1, t2, cells1;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._architect.stage.tiles.bounds.size;
                  t2 = P.bool;
                  cells1 = M.Array2D$(t1.x, t1.y, null, t2);
                  t1 = $async$self._architect.stage.tiles.bounds.size;
                  cells2 = M.Array2D$(t1.x, t1.y, null, t2);
                  for (t1 = cells1.bounds, t2 = X.RectIterator$(t1), t3 = H.getTypeArgumentByIndex(cells1, 0), t4 = cells1._elements, t1 = t1.size.x; t2.moveNext$0();) {
                    t5 = t2._x;
                    t6 = t2._y;
                    pos = new L.Vec(t5, t6);
                    if (!$async$self._architect._canCarve$2($async$self, pos))
                      continue;
                    C.JSArray_methods.$indexSet(t4, t6 * t1 + t5, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) < $async$self._cavern$_density$2($async$self._region, pos), t3));
                  }
                  i = 0;
                case 3:
                  // for condition
                  if (!(i < 4)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  for (t1 = cells1.bounds, t2 = new X.RectIterator(t1), t3 = t1.pos, t2._x = t3.x - 1, t2._y = t3.y, t3 = H.getTypeArgumentByIndex(cells2, 0), t4 = cells2._elements, t5 = cells2.bounds.size.x, t6 = cells1._elements, t7 = t1.size.x, t8 = t6.length; t2.moveNext$0();) {
                    t9 = t2._x;
                    t10 = t2._y;
                    t11 = t10 * t7 + t9;
                    if (t11 < 0 || t11 >= t8) {
                      H.ioore(t6, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (t6[t11] == null)
                      continue;
                    for (t12 = new L.Vec(t9, t10).get$neighbors(), t13 = t12.length, walls = 0, _i = 0; _i < t12.length; t12.length === t13 || (0, H.throwConcurrentModificationError)(t12), ++_i) {
                      here = t12[_i];
                      if (t1.contains$1(0, here)) {
                        t14 = here.y * t7 + here.x;
                        if (t14 < 0 || t14 >= t8) {
                          H.ioore(t6, t14);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t14 = !J.$eq$(t6[t14], false);
                      } else
                        t14 = true;
                      if (t14)
                        ++walls;
                    }
                    t9 = t10 * t5 + t9;
                    if (H.boolConversionCheck(t6[t11]))
                      C.JSArray_methods.$indexSet(t4, t9, H.assertSubtypeOfRuntimeType(walls >= 3, t3));
                    else
                      C.JSArray_methods.$indexSet(t4, t9, H.assertSubtypeOfRuntimeType(walls >= 5, t3));
                  }
                  $async$goto = 6;
                  return "Round";
                case 6:
                  // after yield
                case 4:
                  // for update
                  ++i, t0 = cells2, cells2 = cells1, cells1 = t0;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                  for (t1 = cells1.bounds, t2 = X.RectIterator$(t1), t3 = cells1._elements, t1 = t1.size.x, t4 = t3.length; t2.moveNext$0();) {
                    t5 = t2._x;
                    t6 = t2._y;
                    t7 = t6 * t1 + t5;
                    if (t7 < 0 || t7 >= t4) {
                      H.ioore(t3, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (J.$eq$(t3[t7], false))
                      $async$self._architect._carve$4($async$self, t5, t6, null);
                  }
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _cavern$_density$2: function(region, pos) {
      var t1, t2, distance, _this = this;
      switch (region) {
        case C.Region_everywhere:
          return 0.45;
        case C.Region_n:
          return K.lerpDouble(pos.y, 0, _this._architect.stage.tiles.bounds.size.y, 0.3, 0.7);
        case C.Region_ne:
          t1 = _this._architect.stage.tiles.bounds.size;
          t2 = t1.x;
          return K.lerpDouble(Math.max(t2 - pos.x - 1, pos.y), 0, Math.min(t2, t1.y), 0.3, 0.7);
        case C.Region_e:
          return K.lerpDouble(pos.x, 0, _this._architect.stage.tiles.bounds.size.x, 0.3, 0.7);
        case C.Region_se:
          t1 = _this._architect.stage.tiles.bounds.size;
          t2 = t1.x;
          t1 = t1.y;
          return K.lerpDouble(Math.max(t2 - pos.x - 1, t1 - pos.y - 1), 0, Math.min(t2, t1), 0.3, 0.7);
        case C.Region_s:
          return K.lerpDouble(pos.y, 0, _this._architect.stage.tiles.bounds.size.y, 0.7, 0.3);
        case C.Region_sw:
          t1 = _this._architect.stage.tiles.bounds.size;
          t2 = t1.y;
          return K.lerpDouble(Math.max(pos.x, t2 - pos.y - 1), 0, Math.min(t1.x, t2), 0.3, 0.7);
        case C.Region_w:
          return K.lerpDouble(pos.x, 0, _this._architect.stage.tiles.bounds.size.x, 0.7, 0.3);
        case C.Region_nw:
          distance = Math.max(pos.x, pos.y);
          t1 = _this._architect.stage.tiles.bounds.size;
          return K.lerpDouble(distance, 0, Math.min(t1.x, t1.y), 0.3, 0.7);
      }
      throw H.wrapException("unreachable");
    }
  };
  S.Decorator.prototype = {
    decorate$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, stairCount, i, pos;
        return function $async$decorate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$self._findDoorways$0();
                  for (t1 = $async$self._decorator$_architect, t2 = t1.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4), t1 = t1._owners, t6 = t1._elements, t1 = t1.bounds.size.x, t7 = t6.length, t8 = $async$self._tilesByArchitecture; t5.moveNext$0();) {
                    t9 = t5._x;
                    t10 = t5._y;
                    t11 = t10 * t1 + t9;
                    if (t11 < 0 || t11 >= t7) {
                      H.ioore(t6, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    J.add$1$ax(t8.putIfAbsent$2(t6[t11], new S.Decorator_decorate_closure()), new L.Vec(t9, t10));
                  }
                  $async$self._paintTiles$0();
                  $async$goto = 3;
                  return P._IterationMarker_yieldStar($async$self._placeDecor$0());
                case 3:
                  // after yield
                  stairCount = $.$get$rng().range$2(2, 4);
                  for (i = 0; i < stairCount; ++i) {
                    pos = t2.findOpenTile$0();
                    t1 = t3._elements;
                    t5 = pos.y * t4.size.x + pos.x;
                    if (t5 < 0 || t5 >= t1.length) {
                      H.ioore(t1, t5);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t5].type = $.$get$Tiles_stairs();
                  }
                  $async$self._heroPos = t2.findOpenTile$0();
                  $async$goto = 4;
                  return P._IterationMarker_yieldStar($async$self._spawnMonsters$0());
                case 4:
                  // after yield
                  $async$goto = 5;
                  return P._IterationMarker_yieldStar($async$self._dropItems$0());
                case 5:
                  // after yield
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _findDoorways$0: function() {
      var t2, t3, t4, t5, t6, t7, t8, pos, _i, dir, t9, behind, doorway, _i0, neighbor,
        t1 = [L.Vec],
        doorways = H.setRuntimeTypeInfo([], t1);
      for (t2 = this._decorator$_architect.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4.inflate$1(-1)), t3 = t3._elements, t4 = t4.size.x, t6 = t3.length; t5.moveNext$0();) {
        t7 = t5._x;
        t8 = t5._y;
        pos = new L.Vec(t7, t8);
        t7 = t8 * t4 + t7;
        if (t7 < 0 || t7 >= t6)
          return H.ioore(t3, t7);
        if (t3[t7].type != $.$get$Tiles_passage())
          continue;
        for (_i = 0; _i < 4; ++_i) {
          dir = C.List_aAW[_i];
          t8 = pos.$add(0, dir);
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          t8 = t3[t8].type;
          t9 = $.$get$Tiles_open();
          if (t8 != t9)
            continue;
          t8 = pos.$add(0, dir.get$rotate180());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          behind = t3[t8].type;
          if (behind != t9 && behind != $.$get$Tiles_passage() && behind != $.$get$Tiles_doorway())
            continue;
          t8 = pos.$add(0, dir.get$rotateLeft90());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          t8 = t3[t8].type;
          t9 = $.$get$Tiles_solid();
          if (t8 != t9)
            continue;
          t8 = pos.$add(0, dir.get$rotateRight90());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          if (t3[t8].type != t9)
            continue;
          t3[t7].type = $.$get$Tiles_doorway();
          C.JSArray_methods.add$1(doorways, pos);
          break;
        }
      }
      t5 = $.$get$rng();
      t5.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(doorways, "$isList", t1, "$asList"), t5._random);
      for (t1 = doorways.length, _i = 0; _i < doorways.length; doorways.length === t1 || (0, H.throwConcurrentModificationError)(doorways), ++_i) {
        doorway = doorways[_i];
        t2.toString;
        H.interceptedTypeCheck(doorway, "$isVec");
        t5 = doorway.y * t4 + doorway.x;
        if (t5 < 0 || t5 >= t6)
          return H.ioore(t3, t5);
        t5 = t3[t5].type;
        t7 = $.$get$Tiles_doorway();
        if (t5 != t7)
          continue;
        for (t5 = doorway.get$cardinalNeighbors(), t8 = t5.length, _i0 = 0; _i0 < t5.length; t5.length === t8 || (0, H.throwConcurrentModificationError)(t5), ++_i0) {
          neighbor = t5[_i0];
          t9 = neighbor.y * t4 + neighbor.x;
          if (t9 < 0 || t9 >= t6)
            return H.ioore(t3, t9);
          if (t3[t9].type == t7) {
            t9 = $.$get$rng();
            t9 = t9._random.nextInt$1(2) === 0 ? doorway : neighbor;
            t9 = t9.y * t4 + t9.x;
            if (t9 < 0 || t9 >= t6)
              return H.ioore(t3, t9);
            t3[t9].type = $.$get$Tiles_passage();
          }
        }
      }
    },
    _paintTiles$0: function() {
      var t1, t2, t3, architecture, paintStyle, painter, t4, t5, t6, t7, t8;
      for (t1 = this._tilesByArchitecture, t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = this._decorator$_architect; t1.moveNext$0();) {
        t3 = t1.get$current();
        architecture = t3.key;
        paintStyle = $.$get$PaintStyle_rock();
        if (architecture != null)
          paintStyle = architecture.get$paintStyle();
        painter = new Q.Painter(this, t2, architecture);
        for (t3 = J.get$iterator$ax(t3.value), t4 = t2.stage; t3.moveNext$0();) {
          t5 = t3.get$current();
          t6 = paintStyle.paintTile$2(painter, t5);
          t7 = t4.tiles;
          t8 = t7._elements;
          t5 = t5.y * t7.bounds.size.x + t5.x;
          if (t5 < 0 || t5 >= t8.length)
            return H.ioore(t8, t5);
          t8[t5].type = t6;
          ++painter._painted;
        }
      }
    },
    _placeDecor$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, architecture, tiles, painter, t6, result, decorTiles, tries, tries0, decor, i, tile, max, j;
        return function $async$_placeDecor$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._tilesByArchitecture, t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = $async$self._decorator$_architect, t3 = t2.depth, t4 = [L.Vec];
              case 3:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                t5 = t1.get$current();
                architecture = t5.key;
                if (architecture == null) {
                  // goto for condition
                  $async$goto = 3;
                  break;
                }
                tiles = J.toList$0$ax(t5.value);
                t5 = $.$get$rng();
                t5.toString;
                C.JSArray_methods.shuffle$1(H.assertSubtype(tiles, "$isList", t4, "$asList"), t5._random);
                painter = new Q.Painter($async$self, t2, architecture);
                t6 = tiles.length * architecture._style.decorDensity;
                result = C.JSNumber_methods.floor$0(t6);
                if (t5.float$1(0, 1) < t6 - result)
                  ++result;
                decorTiles = C.JSNumber_methods.ceil$0(t5.float$2(0, result * 0.8, result * 1.2));
                tries = 0;
              case 5:
                // while condition
                tries0 = tries + 1;
                if (!(tries < decorTiles && painter._painted < decorTiles)) {
                  // goto after while
                  $async$goto = 6;
                  break;
                }
                decor = Y.Decor_choose(t3, architecture._style.decorTheme);
                if (decor == null) {
                  // goto break c$1
                  $async$goto = 7;
                  break;
                }
                i = 0;
              case 8:
                // for condition
                if (!(i < tiles.length)) {
                  // goto after for
                  $async$goto = 10;
                  break;
                }
                tile = tiles[i];
                if (!decor.canPlace$2(painter, tile)) {
                  // goto for update
                  $async$goto = 9;
                  break;
                }
                decor.place$2(painter, tile);
                t5 = $.$get$rng();
                max = tiles.length;
                j = t5._random.nextInt$1(max - i) + i;
                t5 = tiles.length;
                if (j < 0 || j >= t5) {
                  H.ioore(tiles, j);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t6 = tiles[j];
                if (i >= t5) {
                  H.ioore(tiles, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                tiles[i] = t6;
                C.JSArray_methods.$indexSet(tiles, j, tile);
                $async$goto = 11;
                return "Placed decor";
              case 11:
                // after yield
                // goto after for
                $async$goto = 10;
                break;
              case 9:
                // for update
                ++i;
                // goto for condition
                $async$goto = 8;
                break;
              case 10:
                // after for
              case 7:
                // break c$1
                tries = tries0;
                // goto while condition
                $async$goto = 5;
                break;
              case 6:
                // after while
                // goto for condition
                $async$goto = 3;
                break;
              case 4:
                // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _spawnMonsters$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, densityMap, flow, t7, t8, t9, pos, distance, goalExperience, totalExperience, t10, t11, max, t12, group, breed, experience, spawned;
        return function $async$_spawnMonsters$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  spawned = P.LinkedHashSet_LinkedHashSet(X.Architecture);
                  $async$self._tilesByArchitecture.forEach$1(0, new S.Decorator__spawnMonsters_closure($async$self, spawned));
                  t1 = $async$self._decorator$_architect;
                  t2 = t1.stage;
                  t3 = t2.tiles;
                  t4 = t3.bounds;
                  t5 = t4.size;
                  t6 = t5.x;
                  densityMap = $.Debug_densityMap = new S.DensityMap(M.Array2D$(t6, t5.y, 0, P.int));
                  flow = N.MotilityFlow$(t2, $async$self._heroPos, $.$get$Motility_all(), false, null);
                  for (t2 = X.RectIterator$(t4.inflate$1(-1)), t4 = t1._owners, t5 = t4._elements, t4 = t4.bounds.size.x, t7 = t5.length; t2.moveNext$0();) {
                    t8 = t2._x;
                    t9 = t2._y;
                    pos = new L.Vec(t8, t9);
                    t8 = t9 * t4 + t8;
                    if (t8 < 0 || t8 >= t7) {
                      H.ioore(t5, t8);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t8 = t5[t8];
                    if (t8 == null)
                      continue;
                    if (spawned.contains$1(0, t8))
                      continue;
                    distance = flow.costAt$1(pos);
                    if (distance == null)
                      continue;
                    if (distance < 10)
                      continue;
                    densityMap.$indexSet(0, pos, C.JSNumber_methods.toInt$0((4 + Math.sqrt(distance - 10)) * t8._style.monsterDensity));
                  }
                  t1 = t1.depth;
                  if (typeof t1 !== "number") {
                    t1.$sub();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t2 = Math.pow(t1 - 1, 2);
                  goalExperience = densityMap._possibleTiles * (2 + t2 * 0.2);
                  t2 = $.$get$rng();
                  goalExperience += t2.float$1(0, goalExperience * 0.2);
                  t8 = [P.String], totalExperience = 0;
                case 3:
                  // for condition
                  if (!(totalExperience < goalExperience)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  pos = densityMap.choose$0();
                  if (pos == null) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  t9 = pos.y;
                  t10 = pos.x;
                  t11 = t9 * t4 + t10;
                  if (t11 < 0 || t11 >= t7) {
                    H.ioore(t5, t11);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t11 = H.assertSubtype(t5[t11]._style.monsterGroups, "$isList", t8, "$asList");
                  max = t11.length;
                  t12 = t2._random.nextInt$1(max - 0);
                  if (t12 < 0 || t12 >= t11.length) {
                    H.ioore(t11, t12);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  group = t11[t12];
                  breed = $.$get$Monsters_breeds().tryChoose$2$tag(t1, group);
                  t11 = t3._elements;
                  t10 = t9 * t6 + t10;
                  if (t10 < 0 || t10 >= t11.length) {
                    H.ioore(t11, t10);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t10 = t11[t10];
                  t11 = breed.motility;
                  if ((t10.type.motility._bitMask & t11._bitMask) === 0) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  if (!$async$self._canSpawn$1(breed)) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  experience = $async$self._spawnMonster$3(densityMap, pos, breed);
                  $async$goto = 5;
                  return "Spawned monster";
                case 5:
                  // after yield
                  totalExperience += experience;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                  // after for
                  $.Debug_densityMap = null;
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    chooseBreed$3$includeParentTags$tag: function(depth, includeParentTags, tag) {
      var breed;
      for (; true;) {
        breed = $.$get$Monsters_breeds().tryChoose$3$includeParents$tag(depth, includeParentTags, tag);
        if (this._canSpawn$1(breed))
          return breed;
      }
    },
    _canSpawn$1: function(breed) {
      if (!H.boolConversionCheck(breed.flags.unique))
        return true;
      this._decorator$_architect.lore._slainBreeds.$index(0, breed);
      if (this._spawnedUniques.contains$1(0, breed))
        return false;
      return true;
    },
    _spawnMonster$3: function(density, pos, breed) {
      var spawn, breeds, t1, t2, t3, t4, t5, t6, t7, flow, here, _box_0 = {},
        isCorpse = !H.boolConversionCheck(breed.flags.unique) && $.$get$rng().range$1(10) === 0;
      _box_0.experience = 0;
      spawn = new S.Decorator__spawnMonster_spawn(_box_0, this, isCorpse, density);
      breeds = breed.spawnAll$0();
      if (0 >= breeds.length)
        return H.ioore(breeds, 0);
      spawn.call$2(breeds[0], pos);
      for (t1 = H.SubListIterable$(breeds, 1, null, H.getTypeArgumentByIndex(breeds, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), [H.getTypeArgumentByIndex(t1, 0)]), t2 = L.Vec, t3 = [[P.Queue, L.Vec]], t4 = [t2], t2 = [t2], t5 = this._decorator$_architect.stage; t1.moveNext$0();) {
        t6 = t1.__internal$_current;
        t7 = t6.motility;
        flow = new N.MotilityFlow(t7, true, false, t5, pos, null, new B.BucketQueue(H.setRuntimeTypeInfo([], t3), t4), H.setRuntimeTypeInfo([], t2));
        flow.Flow$3$maxDistance(t5, pos, null);
        here = flow.get$reachable().firstWhere$2$orElse(0, new S.Decorator__spawnMonster_closure(), new S.Decorator__spawnMonster_closure0());
        if (here == null)
          break;
        spawn.call$2(t6, here);
      }
      return _box_0.experience;
    },
    _dropItems$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t7, t8, t9, t10, pos, t11, distance, t12, goalPrice, totalPrice, items, _i, item, price, affixScale, t1, t2, t3, t4, t5, t6, densityMap, flow;
        return function $async$_dropItems$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._decorator$_architect;
                  t2 = t1.stage;
                  t3 = t2.tiles;
                  t4 = t3.bounds;
                  t5 = t4.size;
                  t6 = t5.x;
                  densityMap = $.Debug_densityMap = new S.DensityMap(M.Array2D$(t6, t5.y, 0, P.int));
                  flow = N.MotilityFlow$(t2, $async$self._heroPos, $.$get$Motility_doorAndWalk(), false, null);
                  for (t4 = X.RectIterator$(t4.inflate$1(-1)), t5 = t1._owners, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length; t4.moveNext$0();) {
                    t9 = t4._x;
                    t10 = t4._y;
                    pos = new L.Vec(t9, t10);
                    t11 = t10 * t5 + t9;
                    if (t11 < 0 || t11 >= t8) {
                      H.ioore(t7, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t11 = t7[t11];
                    if (t11 == null)
                      continue;
                    distance = flow.costAt$1(pos);
                    if (distance == null)
                      continue;
                    t12 = t3._elements;
                    t9 = t10 * t6 + t9;
                    if (t9 < 0 || t9 >= t12.length) {
                      H.ioore(t12, t9);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t9 = t12[t9].type;
                    t9.toString;
                    t12 = $.$get$Motility_walk();
                    if ((t9.motility._bitMask & t12._bitMask) === 0)
                      continue;
                    densityMap.$indexSet(0, pos, C.JSNumber_methods.toInt$0((10 + Math.sqrt(distance + 1)) * t11._style.itemDensity));
                  }
                  t1 = t1.depth;
                  if (typeof t1 !== "number") {
                    t1.$sub();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  goalPrice = densityMap._possibleTiles * (0.05 + (t1 - 1) * 0.05);
                  goalPrice += $.$get$rng().float$1(0, goalPrice * 0.2);
                  totalPrice = 0;
                case 3:
                  // for condition
                  if (!(totalPrice < goalPrice)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  pos = densityMap.choose$0();
                  if (pos == null) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  t3 = $.$get$_floorDrops().tryChoose$1(t1);
                  items = t2.placeDrops$3(pos, $.$get$Motility_walk(), t3.drop);
                  for (t3 = items.length, _i = 0; _i < items.length; items.length === t3 || (0, H.throwConcurrentModificationError)(items), ++_i) {
                    item = items[_i];
                    price = item.type.price;
                    price.toString;
                    t4 = item.prefix;
                    t5 = t4 != null;
                    affixScale = t5 && item.suffix != null ? 1.5 : 1;
                    if (t5) {
                      t6 = t4.priceScale;
                      if (typeof price !== "number") {
                        price.$mul();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      price *= t6 * affixScale;
                    }
                    t6 = item.suffix;
                    t7 = t6 != null;
                    if (t7) {
                      t8 = t6.priceScale;
                      if (typeof price !== "number") {
                        price.$mul();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      price *= t8 * affixScale;
                    }
                    if (t5) {
                      t4 = t4.priceBonus;
                      if (typeof price !== "number") {
                        price.$add();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      price += t4 * affixScale;
                    }
                    if (t7) {
                      t4 = t6.priceBonus;
                      if (typeof price !== "number") {
                        price.$add();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      price += t4 * affixScale;
                    }
                    totalPrice += Math.max(J.ceil$0$n(price), 1);
                  }
                  densityMap.reduceAround$4(t2, pos, $.$get$Motility_doorAndWalk(), 3);
                  $async$goto = 5;
                  return "Spawned item";
                case 5:
                  // after yield
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                  // after for
                  $.Debug_densityMap = null;
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    }
  };
  S.Decorator_decorate_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [L.Vec]);
    },
    $signature: 62
  };
  S.Decorator__spawnMonsters_closure.prototype = {
    call$2: function(architecture, tiles) {
      var t1;
      H.interceptedTypeCheck(architecture, "$isArchitecture");
      H.assertSubtype(tiles, "$isList", [L.Vec], "$asList");
      if (architecture == null)
        return;
      t1 = this.$this;
      if (architecture.spawnMonsters$1(new Q.Painter(t1, t1._decorator$_architect, architecture)))
        this.spawned.add$1(0, architecture);
    },
    $signature: 63
  };
  S.Decorator__spawnMonster_spawn.prototype = {
    call$2: function(breed, pos) {
      var monster, _this = this,
        t1 = _this.$this,
        t2 = t1._decorator$_architect.stage;
      if (t2._actorsByTile.$index(0, pos) != null)
        return;
      if (!t1._canSpawn$1(breed))
        return;
      if (H.boolConversionCheck(breed.flags.unique))
        t1._spawnedUniques.add$1(0, breed);
      if (_this.isCorpse)
        t2.placeDrops$3(pos, breed.motility, breed.drop);
      else {
        t1 = t2.game;
        monster = B.Monster$(t1, breed, pos.x, pos.y, 1);
        t2.addActor$1(monster);
        t1 = _this._box_0;
        t1.experience = t1.experience + monster._breed.get$experience();
        t1 = _this.density;
        if (t1 != null)
          t1.reduceAround$4(t2, pos, $.$get$Motility_all(), 5);
      }
    },
    $signature: 64
  };
  S.Decorator__spawnMonster_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isVec");
      return true;
    },
    $signature: 4
  };
  S.Decorator__spawnMonster_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  S.DensityMap.prototype = {
    $indexSet: function(_, pos, value) {
      var _this = this,
        t1 = _this._density,
        old = t1.$index(0, pos),
        t2 = _this._total;
      if (typeof old !== "number")
        return H.iae(old);
      _this._total = t2 - old + value;
      t1.$indexSet(0, pos, value);
      if (old === 0 && value > 0)
        ++_this._possibleTiles;
      if (old > 0 && value === 0)
        --_this._possibleTiles;
    },
    choose$0: function() {
      var n, t2, t3, t4, t5, t6, pos, density,
        t1 = this._total;
      if (t1 === 0)
        return;
      n = $.$get$rng().range$1(t1);
      for (t1 = this._density, t2 = t1.bounds, t3 = X.RectIterator$(t2), t1 = t1._elements, t2 = t2.size.x, t4 = t1.length; t3.moveNext$0();) {
        t5 = t3._x;
        t6 = t3._y;
        pos = new L.Vec(t5, t6);
        t5 = t6 * t2 + t5;
        if (t5 < 0 || t5 >= t4)
          return H.ioore(t1, t5);
        density = t1[t5];
        if (typeof density !== "number")
          return H.iae(density);
        if (n < density)
          return pos;
        n -= density;
      }
      throw H.wrapException("unreachable");
    },
    reduceAround$4: function(stage, start, motility, range) {
      var flow, t1, t2, t3, t4, t5, t6, t7;
      this.$indexSet(0, start, 0);
      flow = N.MotilityFlow$(stage, start, motility, null, range);
      for (t1 = flow.get$reachable(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._density, t3 = t2._elements, t2 = t2.bounds.size.x, t4 = t3.length; t1.moveNext$0();) {
        t5 = t1.get$current();
        t6 = flow.costAt$1(t5);
        if (typeof t6 !== "number")
          return t6.$div();
        t7 = t5.y * t2 + t5.x;
        if (t7 < 0 || t7 >= t4)
          return H.ioore(t3, t7);
        t7 = t3[t7];
        if (typeof t7 !== "number")
          return t7.$mul();
        this.$indexSet(0, t5, C.JSNumber_methods.toInt$0(t7 * (t6 / range)));
      }
    }
  };
  Q.Dungeon.prototype = {
    get$paintStyle: function() {
      return $.$get$PaintStyle_flagstone();
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t2, t3, room, placed, i, t4, t5, xMax, yMax, xMin, yMin, t1, failed;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._dungeon$_density;
                failed = 0;
              case 2:
                // while condition
                t2 = $async$self._architect;
                t3 = t2.stage.tiles.bounds.size;
                if (!(t2._carvedTiles / ((t3.x - 2) * (t3.y - 2)) < t1 && failed < 100)) {
                  // goto after while
                  $async$goto = 3;
                  break;
                }
                room = R.Room_create(t2.depth);
                t2 = room.bounds.size;
                t3 = t2.x;
                t2 = t2.y;
                i = 0;
              case 4:
                // while condition
                if (!(i < 400)) {
                  placed = false;
                  // goto after while
                  $async$goto = 5;
                  break;
                }
                t4 = $async$self._architect.stage.tiles.bounds.size;
                t5 = t4.x;
                xMax = t5 - t3;
                t4 = t4.y;
                yMax = t4 - t2;
                switch ($async$self._region) {
                  case C.Region_everywhere:
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_n:
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_ne:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    yMin = 1;
                    break;
                  case C.Region_e:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = 1;
                    break;
                  case C.Region_se:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    break;
                  case C.Region_s:
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_sw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_w:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_nw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  default:
                    xMin = 1;
                    yMin = 1;
                }
                t4 = $.$get$rng();
                t5 = t4._random.nextInt$1(xMax - xMin);
                $async$goto = $async$self._dungeon$_tryPlaceRoom$3(room, t5 + xMin, t4._random.nextInt$1(yMax - yMin) + yMin) ? 6 : 7;
                break;
              case 6:
                // then
                $async$goto = 8;
                return "room";
              case 8:
                // after yield
                placed = true;
                // goto after while
                $async$goto = 5;
                break;
              case 7:
                // join
                ++i;
                // goto while condition
                $async$goto = 4;
                break;
              case 5:
                // after while
                if (!placed)
                  ++failed;
                // goto while condition
                $async$goto = 2;
                break;
              case 3:
                // after while
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _dungeon$_tryPlaceRoom$3: function(room, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, tile, _this = this;
      H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
      for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = room._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t6 + x;
        t9 = t7 + y;
        t6 = t7 * t4 + t6;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        tile = t3[t6];
        t6 = tile.tile;
        t7 = t6 == null;
        if (!(t7 && tile.direction === C.Direction_0_0) && !_this._architect.stage.tiles.bounds.contains$1(0, new L.Vec(t8, t9)))
          return false;
        if (!(t7 && tile.direction === C.Direction_0_0) && t6 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0 && !_this._architect._canCarve$2(_this, new L.Vec(t8, t9)))
          return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t2 + x;
        t8 = t6 + y;
        t2 = t6 * t4 + t2;
        if (t2 < 0 || t2 >= t5)
          return H.ioore(t3, t2);
        tile = t3[t2];
        t2 = tile.tile;
        if (!(t2 == null && tile.direction === C.Direction_0_0) && t2 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0)
          _this._architect._carve$4(_this, t7, t8, t2);
        else {
          t6 = $.$get$Tiles_solid();
          if (t2 == t6) {
            t2 = _this._architect.stage.tiles;
            t9 = t2._elements;
            t7 = t8 * t2.bounds.size.x + t7;
            if (t7 < 0 || t7 >= t9.length)
              return H.ioore(t9, t7);
            if (t9[t7].type == $.$get$Tiles_unformed())
              t9[t7].type = t6;
          }
        }
      }
      return true;
    }
  };
  Z.Keep.prototype = {
    get$paintStyle: function() {
      return $.$get$PaintStyle_granite();
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, startingRooms, i;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $.Keep_debugJunctions = $async$self._junctions;
                startingRooms = $async$self._region === C.Region_everywhere && $async$self._maxRooms == null ? 20 : 1;
                i = 0;
              case 2:
                // for condition
                if (!(i < startingRooms)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return P._IterationMarker_yieldStar($async$self._growRooms$0());
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    spawnMonsters$1: function(painter) {
      var t3, t4, t5, _i, pos, t6, max, t7, breed,
        t1 = painter._decorator,
        t2 = J.where$1$ax(t1._tilesByArchitecture.$index(0, painter._architecture), new Z.Keep_spawnMonsters_closure(painter)),
        tiles = P.List_List$from(t2, true, H.getTypeArgumentByIndex(t2, 0));
      t2 = $.$get$rng();
      t2.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(tiles, "$isList", [L.Vec], "$asList"), t2._random);
      for (t3 = tiles.length, t4 = painter._painter$_architect.depth, t5 = [P.String], _i = 0; _i < tiles.length; tiles.length === t3 || (0, H.throwConcurrentModificationError)(tiles), ++_i) {
        pos = tiles[_i];
        if (t2._random.nextInt$1(20) !== 0)
          continue;
        t6 = H.assertSubtype(this._style.monsterGroups, "$isList", t5, "$asList");
        max = t6.length;
        t7 = t2._random.nextInt$1(max - 0);
        if (t7 < 0 || t7 >= t6.length)
          return H.ioore(t6, t7);
        breed = t1.chooseBreed$3$includeParentTags$tag(t4, null, t6[t7]);
        t1._spawnMonster$3(null, H.interceptedTypeCheck(pos, "$isVec"), breed);
      }
      return true;
    },
    _growRooms$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, t7, junction, t8;
        return function $async$_growRooms$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  if (!$async$self._tryPlaceStartingRoom$0()) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = $async$self._junctions, t2 = t1._junctions, t3 = Z.Junction, t4 = t1._byPosition, t5 = $async$self._maxRooms, t6 = t5 != null;
                case 3:
                  // for condition
                  if (!(t7 = t2.length, t7 !== 0)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  switch (t1._takeFrom) {
                    case C.TakeFrom_0:
                      if (0 >= t7) {
                        H.ioore(t2, -1);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      junction = t2.pop();
                      break;
                    case C.TakeFrom_1:
                      junction = C.JSArray_methods.removeAt$1(t2, 0);
                      break;
                    case C.TakeFrom_2:
                      junction = $.$get$rng().take$1$1(0, t2, t3);
                      break;
                    default:
                      junction = null;
                  }
                  t7 = junction.position;
                  t4.remove$1(0, t7);
                  ++junction.tries;
                  t8 = t7.$add(0, junction.direction);
                  if (!$async$self._architect._canCarve$2($async$self, t8)) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  $async$goto = $async$self._tryAttachRoom$1(junction) ? 5 : 7;
                  break;
                case 5:
                  // then
                  $async$goto = 8;
                  return "Room";
                case 8:
                  // after yield
                  t7 = ++$async$self._placedRooms;
                  if (t6 && t7 >= t5) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  // goto join
                  $async$goto = 6;
                  break;
                case 7:
                  // else
                  if (junction.tries < 5) {
                    t4.$indexSet(0, t7, junction);
                    C.JSArray_methods.add$1(t2, junction);
                  }
                case 6:
                  // join
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _tryPlaceStartingRoom$0: function() {
      var t1, i, t2, t3, t4, xMax, yMax, yMin, xMin, _this = this,
        room = R.Room_create(_this._architect.depth);
      for (t1 = [R.RoomTile], i = 0; i < 100; ++i) {
        H.assertSubtype(room, "$isArray2D", t1, "$asArray2D");
        t2 = _this._architect.stage.tiles.bounds.size;
        t3 = room.bounds.size;
        t4 = t3.x;
        xMax = t2.x - t4 - 1;
        t2 = t2.y;
        t3 = t3.y;
        yMax = t2 - t3 - 1;
        switch (_this._region) {
          case C.Region_nw:
          case C.Region_n:
          case C.Region_ne:
            yMax = Math.max(1, C.JSNumber_methods.toInt$0(t2 * 0.25) - t3);
            yMin = 1;
            break;
          case C.Region_sw:
          case C.Region_s:
          case C.Region_se:
            yMin = C.JSNumber_methods.toInt$0(t2 * 0.75);
            break;
          default:
            yMin = 1;
        }
        switch (_this._region) {
          case C.Region_nw:
          case C.Region_w:
          case C.Region_sw:
            xMax = Math.max(1, C.JSNumber_methods.toInt$0(_this._architect.stage.tiles.bounds.size.x * 0.25) - t4);
            xMin = 1;
            break;
          case C.Region_ne:
          case C.Region_e:
          case C.Region_se:
            xMin = C.JSNumber_methods.toInt$0(_this._architect.stage.tiles.bounds.size.x * 0.75);
            break;
          default:
            xMin = 1;
        }
        if (xMax < xMin)
          xMax = xMin;
        if (yMax < yMin)
          yMax = yMin;
        t2 = $.$get$rng();
        t3 = t2._random.nextInt$1(xMax - xMin);
        if (_this._tryPlaceRoom$3(room, t3 + xMin, t2._random.nextInt$1(yMax - yMin) + yMin))
          return true;
      }
      return false;
    },
    _regionContains$1: function(pos) {
      var density, t1, _this = this,
        diagonal = new Z.Keep__regionContains_diagonal(_this);
      switch (_this._region) {
        case C.Region_everywhere:
          return true;
        case C.Region_n:
          density = K.lerpDouble(pos.y, 0, _this._architect.stage.tiles.bounds.size.y, 2, -3);
          break;
        case C.Region_ne:
          density = diagonal.call$2(_this._architect.stage.tiles.bounds.size.x - pos.x - 1, pos.y);
          break;
        case C.Region_e:
          density = K.lerpDouble(pos.x, 0, _this._architect.stage.tiles.bounds.size.x, -3, 2);
          break;
        case C.Region_se:
          t1 = _this._architect.stage.tiles.bounds.size;
          density = diagonal.call$2(t1.x - pos.x - 1, t1.y - pos.y - 1);
          break;
        case C.Region_s:
          density = K.lerpDouble(pos.y, 0, _this._architect.stage.tiles.bounds.size.y, -3, 2);
          break;
        case C.Region_sw:
          density = diagonal.call$2(pos.x, _this._architect.stage.tiles.bounds.size.y - pos.y - 1);
          break;
        case C.Region_w:
          density = K.lerpDouble(pos.x, 0, _this._architect.stage.tiles.bounds.size.x, 2, -3);
          break;
        case C.Region_nw:
          density = diagonal.call$2(pos.x, pos.y);
          break;
        default:
          density = 0;
      }
      t1 = $.$get$rng().float$1(0, 1);
      if (typeof density !== "number")
        return H.iae(density);
      return t1 < density;
    },
    _tryAttachRoom$1: function(junction) {
      var _i, roomPos,
        room = R.Room_create(this._architect.depth),
        t1 = room.bounds,
        t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0),
        junctions = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new Z.Keep__tryAttachRoom_closure(room, junction.direction.get$rotate180()), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      t2 = $.$get$rng();
      t2.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(junctions, "$isList", [L.Vec], "$asList"), t2._random);
      for (t1 = junctions.length, t2 = junction.position, _i = 0; _i < junctions.length; junctions.length === t1 || (0, H.throwConcurrentModificationError)(junctions), ++_i) {
        roomPos = t2.$sub(0, junctions[_i]);
        if (this._tryPlaceRoom$3(room, roomPos.x, roomPos.y))
          return true;
      }
      return false;
    },
    _tryPlaceRoom$3: function(room, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, tile, junctions, t10, t11, here, t12, junction, _i, junction0, _this = this;
      H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
      for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = room._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t6 + x;
        t9 = t7 + y;
        t6 = t7 * t4 + t6;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        tile = t3[t6];
        t6 = tile.tile;
        t7 = t6 == null;
        if (!(t7 && tile.direction === C.Direction_0_0) && !_this._architect.stage.tiles.bounds.contains$1(0, new L.Vec(t8, t9)))
          return false;
        if (!(t7 && tile.direction === C.Direction_0_0) && t6 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0 && !_this._architect._canCarve$2(_this, new L.Vec(t8, t9)))
          return false;
      }
      t2 = [Z.Junction];
      junctions = H.setRuntimeTypeInfo([], t2);
      for (t1 = X.RectIterator$(t1), t6 = _this._junctions, t7 = t6._byPosition, t6 = t6._junctions; t1.moveNext$0();) {
        t8 = t1._x;
        t9 = t1._y;
        t10 = t8 + x;
        t11 = t9 + y;
        here = new L.Vec(t10, t11);
        t8 = t9 * t4 + t8;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        tile = t3[t8];
        t8 = tile.direction;
        if (t8 !== C.Direction_0_0) {
          if (_this._regionContains$1(here))
            C.JSArray_methods.add$1(junctions, new Z.Junction(here, t8));
        } else {
          t8 = tile.tile;
          if (!(t8 == null && true) && t8 != $.$get$Tiles_solid() && true)
            _this._architect._carve$4(_this, t10, t11, t8);
          else {
            t9 = $.$get$Tiles_solid();
            if (t8 == t9) {
              t8 = _this._architect.stage.tiles;
              t12 = t8._elements;
              t10 = t11 * t8.bounds.size.x + t10;
              if (t10 < 0 || t10 >= t12.length)
                return H.ioore(t12, t10);
              if (t12[t10].type == $.$get$Tiles_unformed())
                t12[t10].type = t9;
              junction = t7.remove$1(0, here);
              if (junction != null)
                C.JSArray_methods.remove$1(t6, junction);
            }
          }
        }
      }
      t1 = $.$get$rng();
      t1.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(junctions, "$isList", t2, "$asList"), t1._random);
      for (t1 = junctions.length, _i = 0; _i < junctions.length; junctions.length === t1 || (0, H.throwConcurrentModificationError)(junctions), ++_i) {
        junction = junctions[_i];
        t2 = junction.position;
        junction0 = t7.remove$1(0, t2);
        if (junction0 != null)
          C.JSArray_methods.remove$1(t6, junction0);
        H.interceptedTypeCheck(junction, "$isJunction");
        t7.$indexSet(0, t2, junction);
        C.JSArray_methods.add$1(t6, junction);
      }
      return true;
    }
  };
  Z.Keep_spawnMonsters_closure.prototype = {
    call$1: function(pos) {
      var t1, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      t1 = this.painter._painter$_architect.stage.tiles.$index(0, pos).type;
      t1.toString;
      t2 = $.$get$Motility_walk();
      return (t1.motility._bitMask & t2._bitMask) !== 0;
    },
    $signature: 4
  };
  Z.Keep__regionContains_diagonal.prototype = {
    call$2: function(xDistance, yDistance) {
      var t1 = this.$this._architect.stage.tiles.bounds.size;
      return K.lerpDouble(xDistance + yDistance, 0, t1.x + t1.y, 2, -3);
    },
    $signature: 66
  };
  Z.Keep__tryAttachRoom_closure.prototype = {
    call$1: function(pos) {
      return this.room.$index(0, H.interceptedTypeCheck(pos, "$isVec")).direction === this.direction;
    },
    $signature: 4
  };
  Z.Junction.prototype = {};
  Z.TakeFrom.prototype = {
    toString$0: function(_) {
      return this._keep$_name;
    }
  };
  Z.JunctionSet.prototype = {};
  F.Lake.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, i, t1, lakeCount;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$rng();
                lakeCount = t1.inclusive$2(1, 2);
                i = 0;
              case 2:
                // for condition
                if (!(i < lakeCount)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$self._placeLake$1(M.Blob_make(t1._random.nextInt$1(16) + 16));
                $async$goto = 5;
                return "Placing lake";
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _placeLake$1: function(lake) {
      var t1, t2, t3, t4, x, y, t5, t6, t7, t8, t9, _this = this;
      H.assertSubtype(lake, "$isArray2D", [P.bool], "$asArray2D");
      t1 = $.$get$rng();
      t2 = lake.bounds;
      t3 = t2.size;
      t4 = t3.x;
      x = t1.range$2(0, _this._architect.stage.tiles.bounds.size.x - t4);
      y = t1.range$2(0, _this._architect.stage.tiles.bounds.size.y - t3.y);
      for (t1 = X.RectIterator$(t2), t2 = lake._elements, t3 = t2.length; t1.moveNext$0();) {
        t5 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t5;
        if (t7 < 0 || t7 >= t3)
          return H.ioore(t2, t7);
        if (H.boolConversionCheck(t2[t7])) {
          t5 += x;
          t6 += y;
          t7 = _this._architect;
          t8 = t7.stage.tiles;
          t9 = t8._elements;
          t8 = t6 * t8.bounds.size.x + t5;
          if (t8 < 0 || t8 >= t9.length)
            return H.ioore(t9, t8);
          t9[t8].type = $.$get$Tiles_unformedWet();
          t7 = t7._owners;
          C.JSArray_methods.$indexSet(t7._elements, t6 * t7.bounds.size.x + t5, H.assertSubtypeOfRuntimeType(_this, H.getTypeArgumentByIndex(t7, 0)));
        }
      }
    }
  };
  Q.Painter.prototype = {
    get$depth: function() {
      return this._painter$_architect.depth;
    }
  };
  Q.PaintStyle.prototype = {
    paintTile$2: function(painter, pos) {
      var t1, t2, _this = this,
        tile = painter._painter$_architect.stage.tiles.$index(0, pos).type;
      if (tile == $.$get$Tiles_open() || tile == $.$get$Tiles_passage())
        return _this._floorTile$0();
      if (tile == $.$get$Tiles_solid()) {
        t1 = _this._wall;
        if (t1 != null) {
          t2 = $.$get$rng();
          t2.toString;
          H.assertSubtype(t1, "$isList", [Q.TileType], "$asList");
          t2 = t2.range$1(1);
          if (t2 < 0 || t2 >= 1)
            return H.ioore(t1, t2);
          return t1[t2];
        }
        t1 = $.$get$rng();
        t2 = $.$get$PaintStyle__defaultWalls();
        t1.toString;
        H.assertSubtype(t2, "$isList", [Q.TileType], "$asList");
        t1 = t1.range$1(3);
        if (t1 < 0 || t1 >= 3)
          return H.ioore(t2, t1);
        return t2[t1];
      }
      if (tile == $.$get$Tiles_doorway()) {
        t1 = _this._closedDoor;
        t2 = t1 != null;
        if (t2 && _this._openDoor != null)
          switch ($.$get$rng().range$1(6)) {
            case 0:
              return _this._openDoor;
            case 1:
              return _this._floorTile$0();
            default:
              return t1;
          }
        else if (t2)
          return t1;
        else {
          t1 = _this._openDoor;
          if (t1 != null)
            return t1;
          else
            return _this._floorTile$0();
        }
      }
      if ($.$get$PaintStyle__defaultTypes().containsKey$1(tile)) {
        t1 = $.$get$rng();
        t2 = $.$get$PaintStyle__defaultTypes().$index(0, tile);
        t1.toString;
        H.assertSubtype(t2, "$isList", [Q.TileType], "$asList");
        t2.length;
        t1 = t1.range$1(1);
        if (t1 < 0 || t1 >= 1)
          return H.ioore(t2, t1);
        return t2[t1];
      }
      return tile;
    },
    _floorTile$0: function() {
      var t2,
        t1 = this._floor;
      if (t1 != null) {
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(t1, "$isList", [Q.TileType], "$asList");
        t2 = t2.range$1(1);
        if (t2 < 0 || t2 >= 1)
          return H.ioore(t1, t2);
        return t1[t2];
      }
      return $.$get$Tiles_flagstoneFloor();
    }
  };
  A.Pit.prototype = {
    get$paintStyle: function() {
      return $.$get$PaintStyle_stoneJail();
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, max, t1, i, t2, cave, bounds, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  max = $async$self._minSize, t1 = $async$self._maxSize - max, i = 0;
                case 3:
                  // for condition
                  if (!(i < 20)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  t2 = $.$get$rng();
                  cave = M.Blob_make(t2._random.nextInt$1(t1) + max);
                  bounds = $async$self._tryPlaceCave$2(cave, $async$self._architect.stage.tiles.bounds);
                  $async$goto = bounds != null ? 6 : 7;
                  break;
                case 6:
                  // then
                  $async$goto = 8;
                  return "pit";
                case 8:
                  // after yield
                  for (t1 = cave.bounds, t2 = new X.RectIterator(t1), t3 = t1.pos, t2._x = t3.x - 1, t2._y = t3.y, t3 = cave._elements, t1 = t1.size.x, t4 = t3.length, t5 = $async$self._monsterTiles, t6 = bounds.pos, t7 = t6.x, t8 = bounds.size, t9 = t7 + t8.x, t6 = t6.y, t8 = t6 + t8.y; t2.moveNext$0();) {
                    t10 = t2._x;
                    t11 = t2._y;
                    t12 = t11 * t1 + t10;
                    if (t12 < 0 || t12 >= t4) {
                      H.ioore(t3, t12);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (H.boolConversionCheck(t3[t12]))
                      C.JSArray_methods.add$1(t5, new L.Vec(t10, t11).$add(0, new L.Vec(Math.min(t7, t9), Math.min(t6, t8))));
                  }
                  $async$goto = 9;
                  return P._IterationMarker_yieldStar($async$self._placeAntechambers$1(bounds));
                case 9:
                  // after yield
                  // goto return
                  $async$goto = 1;
                  break;
                case 7:
                  // join
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    spawnMonsters$1: function(painter) {
      var depth, t4, t5, _i, pos, t6, t7, t8, t9, t10, t11, t12, openNeighbors, t13, _i0, neighbor, t14,
        t1 = painter._painter$_architect,
        t2 = t1.depth,
        t3 = $.$get$rng().float$2(0, 1, 1.4);
      if (typeof t2 !== "number")
        return t2.$mul();
      depth = C.JSNumber_methods.ceil$0(t2 * t3);
      for (t2 = this._monsterTiles, t3 = t2.length, t4 = this._monsterGroup, t5 = painter._decorator, t1 = t1.stage, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        pos = t2[_i];
        t6 = t1.tiles;
        t7 = t6._elements;
        t8 = pos.y;
        t6 = t6.bounds.size.x;
        t9 = pos.x;
        t10 = t8 * t6 + t9;
        t11 = t7.length;
        if (t10 < 0 || t10 >= t11)
          return H.ioore(t7, t10);
        t10 = t7[t10].type;
        t10.toString;
        t12 = $.$get$Motility_walk();
        t10 = t10.motility._bitMask;
        t12 = t12._bitMask;
        if ((t10 & t12) === 0)
          continue;
        t10 = pos.get$neighbors();
        t13 = t10.length;
        _i0 = 0;
        while (true) {
          if (!(_i0 < t13)) {
            openNeighbors = true;
            break;
          }
          neighbor = t10[_i0];
          t14 = neighbor.y * t6 + neighbor.x;
          if (t14 < 0 || t14 >= t11)
            return H.ioore(t7, t14);
          if ((t7[t14].type.motility._bitMask & t12) === 0) {
            openNeighbors = false;
            break;
          }
          ++_i0;
        }
        if (!openNeighbors)
          continue;
        t6 = t1._actorsByTile;
        t7 = t6._elements;
        t9 = t8 * t6.bounds.size.x + t9;
        if (t9 < 0 || t9 >= t7.length)
          return H.ioore(t7, t9);
        if (t7[t9] != null)
          continue;
        t5._spawnMonster$3(null, pos, t5.chooseBreed$3$includeParentTags$tag(depth, false, t4));
      }
      return true;
    },
    _tryPlaceCave$2: function(cave, bounds) {
      var t1, t2, t3, t4, t5, t6, j, t7, t8, t9, x, y;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      t1 = bounds.size;
      t2 = t1.x;
      t3 = cave.bounds.size;
      t4 = t3.x;
      if (t2 < t4)
        return;
      t1 = t1.y;
      t3 = t3.y;
      if (t1 < t3)
        return;
      for (t5 = bounds.pos, t6 = t5.y, t1 = t6 + t1, t5 = t5.x, t2 = t5 + t2, j = 0; j < 200; ++j) {
        t7 = $.$get$rng();
        t8 = Math.min(t5, t2);
        t9 = Math.max(t5, t2);
        x = t7._random.nextInt$1(t9 - t4 - t8) + t8;
        t8 = Math.min(t6, t1);
        t9 = Math.max(t6, t1);
        y = t7._random.nextInt$1(t9 - t3 - t8) + t8;
        if (this._tryPlaceCaveAt$3(cave, x, y))
          return new X.Rect(new L.Vec(x, y), new L.Vec(t4, t3));
      }
      return;
    },
    _tryPlaceCaveAt$3: function(cave, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      for (t1 = cave.bounds, t2 = X.RectIterator$(t1), t3 = cave._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t7 * t4 + t6;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        if (H.boolConversionCheck(t3[t8]))
          if (!_this._architect._canCarve$2(_this, new L.Vec(t6 + x, t7 + y)))
            return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t2;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        if (H.boolConversionCheck(t3[t7]))
          _this._architect._carve$4(_this, t2 + x, t6 + y, null);
      }
      return true;
    },
    _placeAntechambers$1: function($async$pitBounds) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var pitBounds = $async$pitBounds;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, i, t5, cave, t6, t7, t8, t9, t10, t11, t12, t13, left, right, $top, bottom;
        return function $async$_placeAntechambers$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = pitBounds.pos, t2 = t1.x, t3 = pitBounds.size, t4 = t2 + t3.x, t1 = t1.y, t3 = t1 + t3.y, i = 0;
              case 2:
                // for condition
                if (!(i < 8)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                t5 = $.$get$rng();
                cave = M.Blob_make(t5._random.nextInt$1(4) + 6);
                t5 = cave.bounds.size;
                t6 = t5.x;
                t7 = Math.min(t2, t4) - t6;
                t5 = t5.y;
                t8 = Math.min(t1, t3) - t5;
                t9 = Math.max(t2, t4);
                t10 = Math.max(t1, t3);
                t11 = $async$self._architect.stage.tiles.bounds.inflate$1(-1);
                t6 = t7 + (t9 + t6 - t7);
                t9 = t11.pos;
                t12 = t9.x;
                t11 = t11.size;
                t13 = t12 + t11.x;
                left = Math.max(Math.min(t7, t6), Math.min(t12, t13));
                right = Math.min(Math.max(t7, t6), Math.max(t12, t13));
                t5 = t8 + (t10 + t5 - t8);
                t9 = t9.y;
                t11 = t9 + t11.y;
                $top = Math.max(Math.min(t8, t5), Math.min(t9, t11));
                bottom = Math.min(Math.max(t8, t5), Math.max(t9, t11));
                $async$goto = $async$self._tryPlaceCave$2(cave, new X.Rect(new L.Vec(left, $top), new L.Vec(Math.max(0, right - left), Math.max(0, bottom - $top)))) != null ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return "antechamber";
              case 7:
                // after yield
              case 6:
                // join
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    }
  };
  D.Reachability.prototype = {
    fill$1: function(_, pos) {
      var t2, t3, t4, t5, t6, t7, t8, pos0, t9, distance, t10, _i, neighbor, t11, t12, t13, neighborDistance, border, _this = this,
        queue = P.ListQueue$(L.Vec),
        t1 = _this._affected;
      ++t1._sentinel;
      t2 = t1._values;
      t3 = t2.bounds.size;
      t4 = t3.x;
      t1._xMin = t4;
      t1._xMax = 0;
      t1._yMin = t3.y;
      t1._yMax = 0;
      t3 = H.getTypeArgumentByIndex(queue, 0);
      queue._add$1(H.assertSubtypeOfRuntimeType(pos, t3));
      t1.add$1(0, pos);
      t5 = _this._distances;
      _this.set$_beforeFill(H.setRuntimeTypeInfo([new D._FillStep(pos, t5.$index(0, pos))], [D._FillStep]));
      for (t2 = t2._elements, t6 = t2.length, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length; !queue.get$isEmpty(queue);) {
        pos0 = queue.removeFirst$0();
        t9 = pos0.y * t5 + pos0.x;
        if (t9 < 0 || t9 >= t8)
          return H.ioore(t7, t9);
        distance = t7[t9];
        for (t9 = pos0.get$cardinalNeighbors(), t10 = t9.length, _i = 0; _i < t9.length; t9.length === t10 || (0, H.throwConcurrentModificationError)(t9), ++_i) {
          neighbor = t9[_i];
          t11 = neighbor.y;
          t12 = neighbor.x;
          t13 = t11 * t5 + t12;
          if (t13 < 0 || t13 >= t8)
            return H.ioore(t7, t13);
          neighborDistance = t7[t13];
          if (neighborDistance === -1)
            continue;
          if (typeof distance !== "number")
            return distance.$add();
          if (neighborDistance !== distance + 1)
            continue;
          t11 = t11 * t4 + t12;
          if (t11 < 0 || t11 >= t6)
            return H.ioore(t2, t11);
          if (J.$eq$(t2[t11], t1._sentinel))
            continue;
          if (_this._hasOtherPath$1(neighbor))
            continue;
          queue._add$1(H.assertSubtypeOfRuntimeType(neighbor, t3));
          t1.add$1(0, neighbor);
          t11 = _this._beforeFill;
          (t11 && C.JSArray_methods).add$1(t11, new D._FillStep(neighbor, neighborDistance));
        }
      }
      _this._setDistance$2(pos, -1);
      border = _this._findBorder$1(pos);
      if (border._collection$_length === 0)
        for (t1 = t1.get$iterator(t1); t1.moveNext$0();)
          _this._setDistance$2(t1._current, -1);
      else {
        for (t1 = t1.get$iterator(t1); t1.moveNext$0();)
          _this._setDistance$2(t1._current, -2);
        _this._setDistance$2(pos, -1);
        _this._reachability$_process$1(border);
      }
    },
    undoFill$0: function() {
      var t1, t2, _i, step;
      for (t1 = this._beforeFill, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        step = t1[_i];
        this._setDistance$2(step.pos, step.distance);
      }
      this.set$_beforeFill(null);
    },
    _hasOtherPath$1: function(pos) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, _i, neighbor, t11, t12, t13,
        t1 = this._distances,
        distance = t1.$index(0, pos);
      for (t2 = pos.get$cardinalNeighbors(), t3 = t2.length, t4 = this._affected, t5 = t4._values, t6 = t5._elements, t5 = t5.bounds.size.x, t7 = t6.length, t8 = this.stage, t9 = t1._elements, t1 = t1.bounds.size.x, t10 = t9.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        neighbor = t2[_i];
        if (!t8.tiles.bounds.contains$1(0, neighbor))
          continue;
        t11 = neighbor.y;
        t12 = neighbor.x;
        t13 = t11 * t5 + t12;
        if (t13 < 0 || t13 >= t7)
          return H.ioore(t6, t13);
        if (!J.$eq$(t6[t13], t4._sentinel)) {
          t11 = t11 * t1 + t12;
          if (t11 < 0 || t11 >= t10)
            return H.ioore(t9, t11);
          t11 = t9[t11];
          if (typeof distance !== "number")
            return distance.$sub();
          t11 = J.$eq$(t11, distance - 1);
        } else
          t11 = false;
        if (t11)
          return true;
      }
      return false;
    },
    _findBorder$1: function(start) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, _i, neighbor, t11, t12, t13,
        border = P.LinkedHashSet_LinkedHashSet(L.Vec);
      for (t1 = this._affected, t2 = t1.get$iterator(t1), t3 = this._distances, t4 = t3._elements, t3 = t3.bounds.size.x, t5 = t4.length, t6 = t1._values, t7 = t6._elements, t6 = t6.bounds.size.x, t8 = t7.length; t2.moveNext$0();) {
        t9 = t2._current;
        if (J.$eq$(t9, start))
          continue;
        for (t9 = t9.get$cardinalNeighbors(), t10 = t9.length, _i = 0; _i < t9.length; t9.length === t10 || (0, H.throwConcurrentModificationError)(t9), ++_i) {
          neighbor = t9[_i];
          t11 = neighbor.y;
          t12 = neighbor.x;
          t13 = t11 * t3 + t12;
          if (t13 < 0 || t13 >= t5)
            return H.ioore(t4, t13);
          t13 = t4[t13];
          if (typeof t13 !== "number")
            return t13.$ge();
          if (t13 >= 0) {
            t11 = t11 * t6 + t12;
            if (t11 < 0 || t11 >= t8)
              return H.ioore(t7, t11);
            t11 = !J.$eq$(t7[t11], t1._sentinel);
          } else
            t11 = false;
          if (t11)
            border.add$1(0, neighbor);
        }
      }
      return border;
    },
    _reachability$_process$1: function(starting) {
      var frontier, t2, t3, t4, t5, t6, t7, pos, parentDistance, _i, here, t8, t9, t10, t11, distance, _this = this,
        t1 = L.Vec;
      H.assertSubtype(starting, "$isIterable", [t1], "$asIterable");
      frontier = new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t1]);
      for (t1 = J.get$iterator$ax(starting), t2 = _this._distances, t3 = t2._elements, t2 = t2.bounds, t4 = t2.size.x, t5 = t3.length; t1.moveNext$0();) {
        t6 = t1.get$current();
        t7 = t6.y * t4 + t6.x;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        frontier.add$2(0, t6, t3[t7]);
      }
      for (t1 = _this.stage; true;) {
        pos = frontier.removeNext$0();
        if (pos == null)
          break;
        t6 = pos.y * t4 + pos.x;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        parentDistance = t3[t6];
        for (t6 = pos.get$cardinalNeighbors(), t7 = t6.length, _i = 0; _i < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i) {
          here = t6[_i];
          if (!t2.contains$1(0, here))
            continue;
          t8 = here.y;
          t9 = here.x;
          t10 = t8 * t4 + t9;
          if (t10 < 0 || t10 >= t5)
            return H.ioore(t3, t10);
          if (!J.$eq$(t3[t10], -2))
            continue;
          t10 = t1.tiles;
          t11 = t10._elements;
          t9 = t8 * t10.bounds.size.x + t9;
          if (t9 < 0 || t9 >= t11.length)
            return H.ioore(t11, t9);
          t9 = t11[t9].type;
          t9.toString;
          t11 = $.$get$Motility_walk();
          if ((t9.motility._bitMask & t11._bitMask) !== 0) {
            if (typeof parentDistance !== "number")
              return parentDistance.$add();
            distance = parentDistance + 1;
            _this._setDistance$2(here, distance);
            frontier.add$2(0, here, distance);
          } else
            _this._setDistance$2(here, -1);
        }
      }
    },
    _setDistance$2: function(pos, distance) {
      var t1, _this = this;
      if (_this.stage.tiles.$index(0, pos).type == $.$get$Tiles_open()) {
        t1 = _this._distances.$index(0, pos);
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 0)
          --_this._reachedOpenCount;
        if (typeof distance !== "number")
          return distance.$ge();
        if (distance >= 0)
          ++_this._reachedOpenCount;
      }
      _this._distances.$indexSet(0, pos, distance);
    },
    set$_beforeFill: function(_beforeFill) {
      this._beforeFill = H.assertSubtype(_beforeFill, "$isList", [D._FillStep], "$asList");
    }
  };
  D._FillStep.prototype = {};
  G.River.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t2, t3, t4, startSide, endSide, mid, t1;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$rng();
                t1.toString;
                t2 = [Z.Direction];
                H.assertSubtype(C.List_aAW, "$isList", t2, "$asList");
                t3 = C.List_aAW.length;
                t4 = t1.range$1(t3);
                if (t4 < 0 || t4 >= t3) {
                  H.ioore(C.List_aAW, t4);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                startSide = C.List_aAW[t4];
                t3 = H.setRuntimeTypeInfo(C.List_aAW.slice(0), [H.getTypeArgumentByIndex(C.List_aAW, 0)]);
                C.JSArray_methods.remove$1(t3, startSide);
                H.assertSubtype(t3, "$isList", t2, "$asList");
                t1 = t1.range$1(t3.length);
                if (t1 < 0 || t1 >= t3.length) {
                  H.ioore(t3, t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                endSide = t3[t1];
                mid = $async$self._makePoint$1(C.Direction_0_0);
                $async$self._displace$2($async$self._makePoint$1(startSide), mid);
                $async$self._displace$2(mid, $async$self._makePoint$1(endSide));
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _makePoint$1: function(side) {
      var y, _this = this, _null = null,
        t1 = $.$get$rng(),
        t2 = _this._architect.stage.tiles.bounds.size.x,
        x = t1.float$2(0, t2 * 0.25, t2 * 0.75);
      t2 = _this._architect.stage.tiles.bounds.size.y;
      y = t1.float$2(0, t2 * 0.25, t2 * 0.75);
      switch (side) {
        case C.Direction_0_0:
          return G._RiverPoint$(x, y, _null);
        case C.Direction_0_m1:
          return G._RiverPoint$(x, -2, _null);
        case C.Direction_0_1:
          return G._RiverPoint$(x, _this._architect.stage.tiles.bounds.size.y + 2, _null);
        case C.Direction_1_0:
          return G._RiverPoint$(_this._architect.stage.tiles.bounds.size.x + 2, y, _null);
        case C.Direction_m1_0:
          return G._RiverPoint$(-2, y, _null);
      }
      throw H.wrapException("unreachable");
    },
    _displace$2: function(start, end) {
      var t5, t6, t7, mid, x1, y1, x2, y2, radiusSquared, y, yy, x, xx, _this = this,
        t1 = start.x,
        t2 = end.x,
        h = t1 - t2,
        t3 = start.y,
        t4 = end.y,
        v = t3 - t4,
        $length = Math.sqrt(h * h + v * v);
      if ($length > 1) {
        t5 = $.$get$rng();
        t6 = $length / 2;
        t7 = $length / 4;
        mid = G._RiverPoint$((t1 + t2) / 2 + t5.float$1(0, t6) - t7, (t3 + t4) / 2 + t5.float$1(0, t6) - t7, (start.radius + end.radius) / 2);
        _this._displace$2(start, mid);
        _this._displace$2(mid, end);
        return;
      }
      t2 = start.radius;
      x1 = C.JSNumber_methods.floor$0(t1 - t2);
      y1 = C.JSNumber_methods.floor$0(t3 - t2);
      x2 = C.JSNumber_methods.ceil$0(t1 + t2);
      y2 = C.JSNumber_methods.ceil$0(t3 + t2);
      x1 = H.intTypeCheck(C.JSInt_methods.clamp$2(x1, 1, _this._architect.stage.tiles.bounds.size.x - 2));
      y1 = H.intTypeCheck(C.JSInt_methods.clamp$2(y1, 1, _this._architect.stage.tiles.bounds.size.y - 2));
      x2 = H.intTypeCheck(C.JSInt_methods.clamp$2(x2, 1, _this._architect.stage.tiles.bounds.size.x - 2));
      y2 = H.intTypeCheck(C.JSInt_methods.clamp$2(y2, 1, _this._architect.stage.tiles.bounds.size.y - 2));
      radiusSquared = t2 * t2;
      for (y = y1; y <= y2; ++y)
        for (yy = t3 - y, t2 = yy * yy, x = x1; x <= x2; ++x) {
          xx = t1 - x;
          if (xx * xx + t2 <= radiusSquared) {
            t4 = _this._architect;
            t5 = t4.stage.tiles;
            t6 = t5._elements;
            t5 = y * t5.bounds.size.x + x;
            if (t5 < 0 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t6[t5].type = $.$get$Tiles_unformedWet();
            t4 = t4._owners;
            C.JSArray_methods.$indexSet(t4._elements, y * t4.bounds.size.x + x, H.assertSubtypeOfRuntimeType(_this, H.getTypeArgumentByIndex(t4, 0)));
          }
        }
    }
  };
  G._RiverPoint.prototype = {
    toString$0: function(_) {
      return H.S(this.x) + "," + H.S(this.y) + " (" + H.S(this.radius) + ")";
    }
  };
  R.Room__calculateEdges_isFloor.prototype = {
    call$1: function(dir) {
      var here = this.pos.$add(0, H.interceptedTypeCheck(dir, "$isDirection")),
        t1 = this.room;
      if (!t1.bounds.contains$1(0, here))
        return false;
      t1 = t1.$index(0, here);
      return !t1.get$isUnused() && t1.tile != $.$get$Tiles_solid() && t1.direction === C.Direction_0_0;
    },
    $signature: 67
  };
  R.RoomTile.prototype = {
    get$isUnused: function() {
      return this.tile == null && this.direction === C.Direction_0_0;
    }
  };
  D.Town.prototype = {
    buildStage$1: function(placeHero) {
      return this.buildStage$body$Town(H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]}));
    },
    buildStage$body$Town: function($async$placeHero) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var placeHero = $async$placeHero;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, entrances, i, x, y, rect, t7, t8, t9, door;
        return function $async$buildStage$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  for (t1 = $async$self.stage.tiles, t2 = t1.bounds, t3 = X.RectIterator$(t2), t1 = t1._elements, t4 = t2.size.x, t5 = t1.length; t3.moveNext$0();) {
                    t6 = t3._x;
                    t6 = t3._y * t4 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = $.$get$Tiles_flagstoneFloor();
                  }
                  for (t3 = J.get$iterator$ax(t2.trace$0()); t3.moveNext$0();) {
                    t6 = t3.get$current();
                    t6 = t6.y * t4 + t6.x;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = $.$get$Tiles_flagstoneWall();
                  }
                  entrances = [$.$get$Tiles_dungeonEntrance(), $.$get$Tiles_home(), $.$get$Tiles_shop1(), $.$get$Tiles_shop2(), $.$get$Tiles_shop3(), $.$get$Tiles_shop4(), $.$get$Tiles_shop5(), $.$get$Tiles_shop6()];
                  for (i = 0; i < 8; ++i) {
                    x = i % 4 * 13 + 5;
                    t3 = C.JSInt_methods._tdivFast$1(i, 4);
                    y = t3 * 14 + 6;
                    rect = new X.Rect(new L.Vec(x, y), new L.Vec(11, 8));
                    for (t6 = new X.RectIterator(rect), t6._x = x - 1, t6._y = y; t6.moveNext$0();) {
                      t7 = t6._x;
                      t7 = t6._y * t4 + t7;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t1, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t1[t7].type = $.$get$Tiles_flagstoneWall();
                    }
                    t6 = rect.pos;
                    t7 = rect.size;
                    t8 = t6.x;
                    t9 = t7.x;
                    t6 = t6.y;
                    t7 = t7.y;
                    if ((t3 & 1) === 1) {
                      t3 = t8 + t9;
                      t9 = Math.min(t8, t3);
                      t7 = Math.min(t6, t6 + t7);
                      t7 = new L.Vec(t9, t7).$add(0, new L.Vec(Math.max(t8, t3), t7));
                      door = new L.Vec(C.JSInt_methods._tdivFast$1(t7.x, 2), C.JSInt_methods._tdivFast$1(t7.y, 2));
                    } else {
                      t3 = t8 + t9;
                      t9 = Math.min(t8, t3);
                      t7 = Math.max(t6, t6 + t7);
                      t7 = new L.Vec(t9, t7).$add(0, new L.Vec(Math.max(t8, t3), t7));
                      door = new L.Vec(C.JSInt_methods._tdivFast$1(t7.x, 2), C.JSInt_methods._tdivFast$1(t7.y, 2) + -1);
                    }
                    t3 = door.y * t4;
                    t6 = door.x;
                    t7 = t3 + t6;
                    if (t7 < 0 || t7 >= t5) {
                      H.ioore(t1, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t7].type = entrances[i];
                    t7 = t3 + (t6 + -1);
                    if (t7 < 0 || t7 >= t5) {
                      H.ioore(t1, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t7 = t1[t7];
                    t8 = $.$get$Tiles_wallTorch();
                    t7.type = t8;
                    t6 = t3 + (t6 + 1);
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = t8;
                  }
                  for (t3 = X.RectIterator$(t2); t3.moveNext$0();) {
                    t6 = t3._x;
                    t6 = t3._y * t4 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t6 = t1[t6];
                    t6.updateExplored$1$force(true);
                    t7 = $.$get$Motility_fly();
                    if ((t6.type.motility._bitMask & t7._bitMask) !== 0)
                      t6._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t6._appliedEmanation + 64, 0, 192));
                  }
                  placeHero.call$1(t2.get$center());
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    }
  };
  Z.Tiles_closure0.prototype = {
    call$1: function(pos) {
      return new Q.OpenChestAction();
    },
    $signature: 68
  };
  Z.Tiles_closure1.prototype = {
    call$1: function(pos) {
      return new Q.OpenBarrelAction();
    },
    $signature: 69
  };
  Z.Tiles_closure.prototype = {
    call$2: function(tile, n) {
      tile._emanation = 192 - n * 12;
      return tile._tiles$_motility$1($.$get$Motility_fly());
    },
    $signature: 70
  };
  Z._TileBuilder.prototype = {
    blend$3: function(amount, fore, $back) {
      var t1, i, glyph, t2, t3, t4;
      for (t1 = this.glyphs, i = 0; i < t1.length; ++i) {
        glyph = t1[i];
        t2 = glyph.char;
        t3 = glyph.fore.blend$2(fore, amount);
        t4 = glyph.back.blend$2($back, amount);
        C.JSArray_methods.$indexSet(t1, i, new L.Glyph(t2, t3, t4));
      }
      return this;
    },
    animate$4: function(_, count, maxMix, fore, $back) {
      var i, mixedFore, mixedBack, t2,
        t1 = this.glyphs,
        glyph = C.JSArray_methods.get$first(t1);
      for (i = 1; i < count; ++i) {
        mixedFore = glyph.fore.blend$2(fore, K.lerpDouble(i, 0, count, 0, maxMix));
        mixedBack = glyph.back.blend$2($back, K.lerpDouble(i, 0, count, 0, maxMix));
        t2 = glyph.char;
        C.JSArray_methods.add$1(t1, new L.Glyph(t2, mixedFore, mixedBack));
      }
      return this;
    },
    emanate$1: function(emanation) {
      this._emanation = emanation;
      return this;
    },
    to$1: function(portal) {
      this._portal = portal;
      return this;
    },
    onClose$1: function(onClose) {
      this.set$_onClose(H.functionTypeCheck(onClose, {func: 1, ret: V.Action, args: [L.Vec]}));
      return this;
    },
    onOpen$1: function(onOpen) {
      this.set$_onOpen(H.functionTypeCheck(onOpen, {func: 1, ret: V.Action, args: [L.Vec]}));
      return this;
    },
    door$0: function() {
      return this._tiles$_motility$1($.$get$Motility_door());
    },
    obstacle$0: function() {
      return this._tiles$_motility$1($.$get$Motility_fly());
    },
    open$0: function(_) {
      return this._tiles$_motility$1($.$get$Motility_flyAndWalk());
    },
    solid$0: function() {
      return this._tiles$_motility$1($.$get$Motility_none());
    },
    _tiles$_motility$1: function(motility) {
      var t2,
        t1 = this.glyphs;
      if (t1.length === 1)
        t1 = C.JSArray_methods.get$first(t1);
      t2 = this._emanation;
      return new Q.TileType(this.name, t2, t1, motility);
    },
    set$_onClose: function(_onClose) {
      this._onClose = H.functionTypeCheck(_onClose, {func: 1, ret: V.Action, args: [L.Vec]});
    },
    set$_onOpen: function(_onOpen) {
      this._onOpen = H.functionTypeCheck(_onOpen, {func: 1, ret: V.Action, args: [L.Vec]});
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  V.Action.prototype = {};
  E.ConditionAction.prototype = {};
  R.DestroyActionMixin.prototype = {};
  B.OpenDoorAction.prototype = {};
  B.CloseDoorAction.prototype = {};
  S.Actor.prototype = {
    Actor$3: function(game, x, y) {
      var t1, t2, _i, _this = this;
      for (_this.game.content.toString, t1 = $.$get$Elements_all(), t2 = _this.resistances, _i = 0; _i < 12; ++_i)
        t2.$indexSet(0, t1[_i], new E.ResistCondition());
      t1 = H.setRuntimeTypeInfo([_this.haste, _this.cold, _this.poison, _this.blindness, _this.dazzle, _this.perception], [E.Condition]);
      C.JSArray_methods.addAll$1(t1, t2.get$values(t2));
      C.JSArray_methods.forEach$1(t1, new S.Actor_closure(_this));
    },
    toString$0: function(_) {
      return this.get$nounText();
    },
    $isNoun: 1
  };
  S.Actor_closure.prototype = {
    call$1: function(condition) {
      H.interceptedTypeCheck(condition, "$isCondition")._actor = this.$this;
      return;
    },
    $signature: 71
  };
  U.Attack.prototype = {
    toString$0: function(_) {
      var result = C.JSInt_methods.toString$0(this.damage),
        t1 = this.element;
      if (t1 != $.$get$Element_none())
        result = H.S(t1) + " " + result;
      t1 = this.range;
      return t1 > 0 ? result + ("@" + t1) : result;
    }
  };
  U.Hit.prototype = {};
  U.Defense.prototype = {};
  E.Condition.prototype = {};
  E.HasteCondition.prototype = {};
  E.ColdCondition.prototype = {};
  E.PoisonCondition.prototype = {};
  E.BlindnessCondition.prototype = {};
  E.ResistCondition.prototype = {};
  E.PerceiveCondition.prototype = {};
  G.Element0.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Y.Energy.prototype = {};
  D.Game.prototype = {
    generate$0: function() {
      return this.generate$body$Game();
    },
    generate$body$Game: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t2, t1;
        return function $async$generate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t1.heroPos = null;
                t2 = $async$self._save;
                $async$goto = 2;
                return P._IterationMarker_yieldStar($async$self.content.buildStage$4(t2._lore, $async$self._stage, $async$self.depth, new D.Game_generate_closure(t1)));
              case 2:
                // after yield
                t2 = G.Hero$($async$self, t1.heroPos, t2);
                $async$self.hero = t2;
                $async$self._stage.addActor$1(t2);
                $async$goto = 3;
                return "Calculating visibility";
              case 3:
                // after yield
                $async$self._stage._lighting.refresh$0();
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    get$depth: function() {
      return this.depth;
    }
  };
  D.Game_generate_closure.prototype = {
    call$1: function(pos) {
      this._box_0.heroPos = pos;
    },
    $signature: 13
  };
  D.Event0.prototype = {};
  O.Log.prototype = {
    error$1: function(_, message) {
      this.add$5(0, C.LogType_error, message, null, null, null);
    },
    gain$2: function(message, noun1) {
      this.add$5(0, C.LogType_gain, message, noun1, null, null);
    },
    gain$1: function(message) {
      return this.gain$2(message, null);
    },
    add$5: function(_, type, message, noun1, noun2, noun3) {
      var t1, last;
      message = this._format$4(message, noun1, noun2, noun3);
      t1 = this.messages;
      if (t1.length > 0) {
        last = C.JSArray_methods.get$last(t1);
        if (last.text === message) {
          ++last.count;
          return;
        }
      }
      C.JSArray_methods.add$1(t1, new O.Message(message));
      if (t1.length > 20)
        C.JSArray_methods.removeAt$1(t1, 0);
    },
    _format$4: function(text, noun1, noun2, noun3) {
      var result, i, t1,
        nouns = [noun1, noun2, noun3];
      for (result = text, i = 1; i <= 3; ++i)
        if (nouns[i - 1] != null) {
          t1 = "{" + i + "}";
          result = H.stringReplaceAllUnchecked(result, t1, "you");
          t1 = "{" + i + " he}";
          result = H.stringReplaceAllUnchecked(result, t1, "you");
          t1 = "{" + i + " him}";
          result = H.stringReplaceAllUnchecked(result, t1, "you");
          t1 = "{" + i + " his}";
          result = H.stringReplaceAllUnchecked(result, t1, "your");
        }
      if (noun1 != null)
        result = O.Log_conjugate(result, C.Pronoun_you_you_your);
      if (0 >= result.length)
        return H.ioore(result, 0);
      return result[0].toUpperCase() + C.JSString_methods.substring$1(result, 1);
    }
  };
  O.Noun.prototype = {
    toString$0: function(_) {
      return this.nounText;
    }
  };
  O.Pronoun.prototype = {};
  O.LogType.prototype = {
    toString$0: function(_) {
      return this._log$_name;
    }
  };
  O.Message.prototype = {};
  K.hashPoint_hashInt.prototype = {
    call$1: function(n) {
      n = ((n >>> 16 ^ n) >>> 0) * 73244475 & 4294967295;
      n = ((n >>> 16 ^ n) >>> 0) * 73244475 & 4294967295;
      return (n >>> 16 ^ n) >>> 0;
    },
    $signature: 73
  };
  Y.ResourceSet.prototype = {
    _resource$_add$7: function(object, $name, startDepth, endDepth, startFrequency, endFrequency, tags) {
      var t2, t3, t4, _i, tagName, tag, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(object, t1);
      if ($name == null) {
        t2 = _this._resources;
        $name = C.JSInt_methods.toString$0(t2.get$length(t2));
      }
      if (startDepth == null)
        startDepth = 1;
      if (endDepth == null)
        endDepth = startDepth;
      if (startFrequency == null)
        startFrequency = 1;
      if (endFrequency == null)
        endFrequency = startFrequency;
      t2 = _this._resources;
      if (t2.containsKey$1($name))
        throw H.wrapException(P.ArgumentError$('Already have a resource named "' + $name + '".'));
      t1 = P.LinkedHashSet_LinkedHashSet([Y._Tag, t1]);
      t2.$indexSet(0, $name, new Y._Resource(object, startDepth, endDepth, startFrequency, endFrequency, t1, _this.$ti));
      if (tags != null && tags !== "")
        for (t2 = tags.split(" "), t3 = t2.length, t4 = _this._tags, _i = 0; _i < t3; ++_i) {
          tagName = t2[_i];
          tag = t4.$index(0, tagName);
          if (tag == null)
            throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S(tagName) + '".'));
          t1.add$1(0, tag);
        }
    },
    defineTags$1: function(paths) {
      var t1, t2, t3, t4, _i, t5, t6, $parent, _i0, $name, tag;
      for (t1 = paths.split(" "), t2 = t1.length, t3 = this._tags, t4 = this.$ti, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t5 = J.split$1$s(t1[_i], "/"), t6 = t5.length, $parent = null, _i0 = 0; _i0 < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i0, $parent = tag) {
          $name = t5[_i0];
          tag = t3.$index(0, $name);
          if (tag == null) {
            tag = new Y._Tag($name, $parent, t4);
            t3.$indexSet(0, $name, tag);
          }
        }
    },
    find$1: function(_, $name) {
      var resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      return resource.object;
    },
    tryFind$1: function($name) {
      var resource = this._resources.$index(0, $name);
      if (resource == null)
        return;
      return resource.object;
    },
    hasTag$2: function($name, tagName) {
      var tag,
        resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      tag = this._tags.$index(0, tagName);
      if (tag == null)
        throw H.wrapException(P.ArgumentError$('Unknown tag "' + tagName + '".'));
      return resource._tags.any$1(0, new Y.ResourceSet_hasTag_closure(this, tag));
    },
    getTags$1: function($name) {
      var t1, t2, t3,
        resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      t1 = resource._tags;
      t2 = P.String;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_getTags_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
    },
    tryChoose$3$includeParents$tag: function(depth, includeParents, tag) {
      var t2, goalTag, label, _this = this, t1 = {};
      t1.includeParents = includeParents;
      t2 = includeParents == null ? t1.includeParents = true : includeParents;
      if (tag == null)
        return _this._runQuery$3("", depth, new Y.ResourceSet_tryChoose_closure(_this));
      goalTag = _this._tags.$index(0, tag);
      label = goalTag.name;
      if (!t2)
        label = J.$add$ansx(label, " (only)");
      return _this._runQuery$3(label, depth, new Y.ResourceSet_tryChoose_closure0(t1, _this, goalTag));
    },
    tryChoose$1: function(depth) {
      return this.tryChoose$3$includeParents$tag(depth, null, null);
    },
    tryChoose$2$tag: function(depth, tag) {
      return this.tryChoose$3$includeParents$tag(depth, null, tag);
    },
    tryChooseMatching$2: function(depth, tags) {
      var t1, t2, tagObjects, tagNames, _this = this;
      H.assertSubtype(tags, "$isIterable", [P.String], "$asIterable");
      t1 = [Y._Tag, H.getTypeArgumentByIndex(_this, 0)];
      t2 = H.getRuntimeTypeArgument(tags, "Iterable", 0);
      tagObjects = H.MappedIterable_MappedIterable(tags, H.functionTypeCheck(new Y.ResourceSet_tryChooseMatching_closure(_this), {func: 1, ret: t1, args: [t2]}), t2, t1);
      tagNames = P.List_List$from(tags, true, t2);
      C.JSArray_methods.sort$0(tagNames);
      return _this._runQuery$3(C.JSArray_methods.join$1(tagNames, "|") + " (match)", depth, new Y.ResourceSet_tryChooseMatching_closure0(_this, tagObjects));
    },
    _runQuery$3: function($name, depth, scale) {
      var key, t2, query, resources, chances, totalChance, t3, chance, t4, t5, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(scale, {func: 1, ret: P.double, args: [[Y._Resource, t1]]});
      key = new Y._QueryKey($name, depth);
      t2 = _this._queries;
      query = t2.$index(0, key);
      if (query == null) {
        resources = H.setRuntimeTypeInfo([], [[Y._Resource, t1]]);
        chances = H.setRuntimeTypeInfo([], [P.double]);
        for (t1 = _this._resources, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), totalChance = 0; t1.moveNext$0();) {
          t3 = t1.get$current();
          chance = scale.call$1(t3);
          if (chance === 0)
            continue;
          t4 = t3.frequencyAtDepth$1(depth);
          t5 = t3.chanceAtDepth$1(depth);
          if (typeof chance !== "number")
            return chance.$mul();
          totalChance += Math.max(1e-7, chance * (t4 * t5));
          C.JSArray_methods.add$1(resources, t3);
          C.JSArray_methods.add$1(chances, totalChance);
        }
        query = new Y._ResourceQuery(depth, resources, chances, totalChance, _this.$ti);
        t2.$indexSet(0, key, query);
      }
      return query.choose$0();
    }
  };
  Y.ResourceSet_hasTag_closure.prototype = {
    call$1: function(thisTag) {
      return H.assertSubtype(thisTag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.tag);
    },
    $signature: function() {
      return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_getTags_closure.prototype = {
    call$1: function(tag) {
      return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").name;
    },
    $signature: function() {
      return {func: 1, ret: P.String, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChoose_closure.prototype = {
    call$1: function(_) {
      H.assertSubtype(_, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
      return 1;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChoose_closure0.prototype = {
    call$1: function(resource) {
      var thisTag, t1, scale, t2, t3;
      H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
      for (thisTag = this.goalTag, t1 = this._box_0, scale = 1; thisTag != null; thisTag = thisTag.parent) {
        for (t2 = resource._tags, t3 = new P._LinkedHashSetIterator(t2, t2._modifications, [H.getTypeArgumentByIndex(t2, 0)]), t3._cell = t2._first; t3.moveNext$0();)
          if (t3._collection$_current.contains$1(0, thisTag))
            return scale;
        if (!H.boolConversionCheck(t1.includeParents))
          break;
        scale /= 10;
      }
      return 0;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChooseMatching_closure.prototype = {
    call$1: function($name) {
      var tag;
      H.stringTypeCheck($name);
      tag = this.$this._tags.$index(0, $name);
      if (tag == null)
        throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S($name) + '".'));
      return tag;
    },
    $signature: function() {
      return {func: 1, ret: [Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)], args: [P.String]};
    }
  };
  Y.ResourceSet_tryChooseMatching_closure0.prototype = {
    call$1: function(resource) {
      var t2, t3,
        t1 = this.$this;
      for (t2 = H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(t1, 0)], "$as_Resource")._tags, t2 = P._LinkedHashSetIterator$(t2, t2._modifications, H.getTypeArgumentByIndex(t2, 0)), t3 = this.tagObjects; t2.moveNext$0();)
        if (t3.any$1(0, new Y.ResourceSet_tryChooseMatching__closure(t1, t2._collection$_current)))
          return 1;
      return 0;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChooseMatching__closure.prototype = {
    call$1: function(tag) {
      return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.resourceTag);
    },
    $signature: function() {
      return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y._Resource.prototype = {
    frequencyAtDepth$1: function(depth) {
      var _this = this,
        t1 = _this.startDepth,
        t2 = _this.endDepth;
      if (t1 === t2)
        return _this.startFrequency;
      return K.lerpDouble(depth, t1, t2, _this.startFrequency, _this.endFrequency);
    },
    chanceAtDepth$1: function(depth) {
      var relative, deviation,
        t1 = this.startDepth;
      if (typeof depth !== "number")
        return depth.$lt();
      if (depth < t1) {
        relative = t1 - depth;
        deviation = 0.6 + depth * 0.2;
        return Math.exp(-0.5 * relative * relative / (deviation * deviation));
      } else {
        t1 = this.endDepth;
        if (depth > t1) {
          relative = depth - t1;
          deviation = 1 + depth * 0.1;
          return Math.exp(-0.5 * relative * relative / (deviation * deviation));
        } else
          return 1;
      }
    }
  };
  Y._Tag.prototype = {
    contains$1: function(_, tag) {
      var thisTag;
      H.assertSubtype(tag, "$is_Tag", this.$ti, "$as_Tag");
      for (thisTag = this; thisTag != null; thisTag = thisTag.parent)
        if (tag === thisTag)
          return true;
      return false;
    },
    toString$0: function(_) {
      var t1 = this.parent;
      if (t1 == null)
        return this.name;
      return t1.toString$0(0) + "/" + H.S(this.name);
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Y._QueryKey.prototype = {
    get$hashCode: function(_) {
      return J.get$hashCode$(this.name) ^ J.get$hashCode$(this.depth);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this.name == J.get$name$x(other)) {
        t1 = this.depth;
        t2 = other.get$depth();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    toString$0: function(_) {
      return H.S(this.name) + " (" + H.S(this.depth) + ")";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$depth: function() {
      return this.depth;
    }
  };
  Y._ResourceQuery.prototype = {
    choose$0: function() {
      var t, t2, last, t3, t4, first, middle, t5,
        t1 = this.resources;
      if (t1.length === 0)
        return;
      t = $.$get$rng().float$1(0, this.totalChance);
      t2 = t1.length;
      last = t2 - 1;
      for (t3 = this.chances, t4 = t3.length, first = 0; true;) {
        middle = C.JSInt_methods._tdivFast$1(first + last, 2);
        if (middle > 0) {
          t5 = middle - 1;
          if (t5 >= t4)
            return H.ioore(t3, t5);
          t5 = t < t3[t5];
        } else
          t5 = false;
        if (t5)
          last = middle - 1;
        else {
          if (middle < 0 || middle >= t4)
            return H.ioore(t3, middle);
          if (t < t3[middle]) {
            if (middle >= t2)
              return H.ioore(t1, middle);
            return t1[middle].object;
          } else
            first = middle + 1;
        }
      }
    },
    get$depth: function() {
      return this.depth;
    }
  };
  U.VecSet.prototype = {
    get$iterator: function(_) {
      var y, t1, t2, t3, x, t4, t5, _this = this,
        result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (y = _this._yMin, t1 = _this._values, t2 = t1._elements, t1 = t1.bounds.size.x, t3 = t2.length; y <= _this._yMax; ++y)
        for (x = _this._xMin, t4 = y * t1; x <= _this._xMax; ++x) {
          t5 = t4 + x;
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t2, t5);
          if (J.$eq$(t2[t5], _this._sentinel))
            C.JSArray_methods.add$1(result, new L.Vec(x, y));
        }
      return new J.ArrayIterator(result, result.length, [H.getTypeArgumentByIndex(result, 0)]);
    },
    add$1: function(_, pos) {
      var t1, t2, _this = this;
      _this._values.$indexSet(0, pos, _this._sentinel);
      t1 = _this._xMin;
      t2 = pos.x;
      _this._xMin = H.intTypeCheck(Math.min(t1, t2));
      _this._xMax = H.intTypeCheck(Math.max(_this._xMax, t2));
      t2 = _this._yMin;
      t1 = pos.y;
      _this._yMin = H.intTypeCheck(Math.min(t2, t1));
      _this._yMax = H.intTypeCheck(Math.max(_this._yMax, t1));
    },
    $asIterable: function() {
      return [L.Vec];
    }
  };
  G.Hero.prototype = {
    get$nounText: function() {
      return "you";
    },
    get$maxHealth: function() {
      var t1 = this.save.fortitude;
      return C.JSNumber_methods.toInt$0(Math.pow(t1._modify$1(t1._stat$_value), 1.4) + 1.23 * t1._modify$1(t1._stat$_value) + 18);
    },
    get$emanationLevel: function() {
      return this.save.get$emanationLevel();
    },
    Hero$3: function(game, pos, save) {
      var t1, _this = this;
      _this.refreshProperties$0();
      t1 = _this.save;
      H.intTypeCheck(C.JSInt_methods.clamp$2(t1.fortitude.get$maxHealth(), 0, _this.get$maxHealth()));
      for (t1 = t1._inventory._items, t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        _this._gainItemSkills$1(t1._current);
    },
    get$appearance: function(_) {
      return "hero";
    },
    _gainItemSkills$1: function(item) {
      var t1, t2, t3, t4, _i, skill, t5, level, _this = this, _null = null;
      for (t1 = item.type.skills, t2 = t1.length, t3 = _this.save, t4 = _this.game.log, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        t5 = t3.heroClass;
        t5.toString;
        H.interceptedTypeCheck(skill, "$isSkill");
        t5 = t5._proficiency.$index(0, skill);
        if ((t5 == null ? 1 : t5) !== 0 && t3.skills.discover$1(skill)) {
          skill.toString;
          t5 = t3.skills;
          t5._points.$index(0, skill);
          level = skill.onCalculateLevel$2(t3, 0);
          if (t5.gain$2(skill, level))
            t4.add$5(0, C.LogType_gain, skill.gainMessage$1(level), _this, _null, _null);
          else
            t4.add$5(0, C.LogType_gain, skill.get$discoverMessage(), _this, _null, _null);
        }
      }
    },
    seeMonster$1: function(monster) {
      var t1, t2, t3, _i, _this = this;
      if (_this._seenMonsters.add$1(0, monster)) {
        t1 = _this.save._lore;
        t2 = monster._breed;
        t1.seeBreed$1(t2);
        t1 = t1._seenBreeds.$index(0, t2);
        if ((t1 == null ? 0 : t1) === 1)
          for (_this.game.content.toString, t1 = $.$get$Skills_all(), t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            t1[_i].seeBreed$2(_this, t2);
      }
    },
    refreshProperties$0: function() {
      var level, t2, t3, t4, weapons, i, t5, weapon, t6, _i, heftModifier, t7, t8, t9, result, heft, relative, scale, _this = this,
        t1 = _this.save;
      t1.toString;
      level = G.experienceLevel(0);
      _this._level.update$2(level, new G.Hero_refreshProperties_closure(_this, level));
      t2 = t1.strength;
      t3 = _this.game;
      t2.refresh$1(t3);
      t1.agility.refresh$1(t3);
      t1.fortitude.refresh$1(t3);
      t1.intellect.refresh$1(t3);
      t1.will.refresh$1(t3);
      t4 = t1._equipment.get$weapons();
      weapons = P.List_List$from(t4, true, H.getTypeArgumentByIndex(t4, 0));
      for (t4 = _this._heftScales, t3 = t3.content, i = 0; t5 = weapons.length, i < t5; ++i) {
        weapon = weapons[i];
        if (t5 === 2) {
          for (t3.toString, t5 = $.$get$Skills_all(), t6 = t5.length, _i = 0; _i < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i)
            t5[_i].dualWield$1(_this);
          heftModifier = 1.3;
        } else
          heftModifier = 1;
        for (t5 = t1.skills, t6 = t5.get$acquired(), t7 = J.get$iterator$ax(t6.__internal$_iterable), t6 = new H.WhereIterator(t7, t6._f, [H.getTypeArgumentByIndex(t6, 0)]); t6.moveNext$0();) {
          t8 = t7.get$current();
          t9 = t5._levels.$index(0, t8);
          heftModifier = t8.modifyHeft$3(_this, t9 == null ? 0 : t9, heftModifier);
        }
        result = weapon.type.heft;
        t5 = weapon.prefix;
        if (t5 != null)
          result *= t5.heftScale;
        t5 = weapon.suffix;
        heft = C.JSNumber_methods.round$0(C.JSNumber_methods.round$0(t5 != null ? result * t5.heftScale : result) * heftModifier);
        relative = C.JSInt_methods.clamp$2(t2._modify$1(t2._stat$_value) - heft, -20, 50);
        if (relative < -10)
          scale = K.lerpDouble(relative, -20, -10, 0.05, 0.3);
        else if (relative < 0)
          scale = K.lerpDouble(relative, -10, -1, 0.3, 0.8);
        else
          scale = relative < 30 ? K.lerpDouble(relative, 0, 30, 1, 2) : K.lerpDouble(relative, 30, 50, 2, 3);
        if (i >= 2)
          return H.ioore(t4, i);
        t4[i].update$2(scale, new G.Hero_refreshProperties_closure0(_this, scale, weapon));
      }
      t1 = t1.skills._levels.get$keys();
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      C.JSArray_methods.sort$0(t1);
      C.JSArray_methods.forEach$1(t1, _this.get$refreshSkill());
    },
    discoverSkill$1: function(skill) {
      var t1 = this.save;
      if (t1.heroClass.proficiency$1(skill) === 0)
        return;
      if (!t1.skills.discover$1(skill))
        return;
      this.game.log.gain$2(skill.get$discoverMessage(), this);
    },
    refreshSkill$1: function(skill) {
      var t1, t2, level;
      H.interceptedTypeCheck(skill, "$isSkill");
      t1 = this.save;
      skill.toString;
      t2 = t1.skills;
      level = skill.onCalculateLevel$2(t1, t2.points$1(0, skill));
      if (t2.gain$2(skill, level))
        this.game.log.gain$2(skill.gainMessage$1(level), this);
    }
  };
  G.Hero_refreshProperties_closure.prototype = {
    call$1: function(previous) {
      H.intTypeCheck(previous);
      this.$this.game.log.gain$1("You have reached level " + this.level + ".");
    },
    $signature: 20
  };
  G.Hero_refreshProperties_closure0.prototype = {
    call$1: function(previous) {
      var _this = this,
        t1 = _this.heftScale;
      if (t1 < 1 && previous >= 1)
        _this.$this.game.log.error$1(0, "You are too weak to effectively wield " + _this.weapon.toString$0(0) + ".");
      else if (t1 >= 1 && previous < 1)
        _this.$this.game.log.add$5(0, C.LogType_message, "You feel comfortable wielding " + _this.weapon.toString$0(0) + ".", null, null, null);
    },
    $signature: 76
  };
  T.HeroClass.prototype = {
    proficiency$1: function(skill) {
      var t1 = this._proficiency.$index(0, skill);
      return t1 == null ? 1 : t1;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  K.HeroSave.prototype = {
    get$emanationLevel: function() {
      var t1, t2, level;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, level = 0; t1.moveNext$0();)
        level += t2.get$current().type.emanationLevel;
      return level;
    },
    get$weight: function() {
      var t1, t2, total, t3, result, t4;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, total = 0; t1.moveNext$0();) {
        t3 = t2.get$current();
        result = t3.type.weight;
        t4 = t3.prefix;
        if (t4 != null)
          result += t4.weightBonus;
        t3 = t3.suffix;
        if (t3 != null)
          result += t3.weightBonus;
        total += Math.max(0, result);
      }
      return total;
    },
    statBonus$1: function(stat) {
      var t1, t2, bonus, t3, t4;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, bonus = 0; t1.moveNext$0();) {
        t3 = t2.get$current();
        t4 = t3.prefix;
        if (t4 != null) {
          t4 = t4._statBonuses.$index(0, stat);
          bonus += t4 == null ? 0 : t4;
        }
        t3 = t3.suffix;
        if (t3 != null) {
          t3 = t3._statBonuses.$index(0, stat);
          bonus += t3 == null ? 0 : t3;
        }
      }
      return bonus;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  V.Lore.prototype = {
    seeBreed$1: function(breed) {
      var t2,
        t1 = this._seenBreeds;
      t1.putIfAbsent$2(breed, new V.Lore_seeBreed_closure());
      t2 = t1.$index(0, breed);
      if (typeof t2 !== "number")
        return t2.$add();
      t1.$indexSet(0, breed, t2 + 1);
    }
  };
  V.Lore_seeBreed_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 7
  };
  N.Race.prototype = {
    rollStats$0: function() {
      var t1, t2, t3, base, t4, value, t5,
        rolled = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
      for (t1 = this.stats, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        base = t1.$index(0, t3);
        t4 = $.$get$rng();
        t4 = t4._random.nextInt$1(4);
        if (typeof base !== "number")
          return base.$add();
        value = base + t4;
        t4 = (base / 2 | 0) + 30;
        while (true) {
          if (value < 50) {
            t5 = $.$get$rng();
            t5 = t5._random.nextInt$1(100) < t4;
          } else
            t5 = false;
          if (!t5)
            break;
          ++value;
        }
        rolled.$indexSet(0, t3, value);
      }
      return N.RaceStats$(this, rolled, $.$get$rng().range$1(100000));
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  N.RaceStats.prototype = {
    RaceStats$3: function(_race, _max, seed) {
      var t3, t4, totalMin, totalMax, t5, t6, random, previous, level, lerp, points, gained, point, worstStats, worstError, t7, ideal, t8, error, max, stat,
        t1 = D.Stat,
        t2 = P.int,
        min = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
        current = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      for (t3 = this._max, t4 = t3.get$keys(), t4 = t4.get$iterator(t4), totalMin = 0, totalMax = 0; t4.moveNext$0();) {
        t5 = t4.get$current();
        t6 = t3.$index(0, t5);
        if (typeof t6 !== "number")
          return t6.$tdiv();
        min.$indexSet(0, t5, 10 + C.JSInt_methods._tdivFast$1(t6, 15));
        t6 = min.$index(0, t5);
        if (typeof t6 !== "number")
          return H.iae(t6);
        totalMin += t6;
        t6 = t3.$index(0, t5);
        if (typeof t6 !== "number")
          return H.iae(t6);
        totalMax += t6;
        current.$indexSet(0, t5, 0);
      }
      random = new N.Rng();
      t4 = P._Random$(this.seed);
      random._random = t4;
      for (t4 = this._stats, t5 = [t1], previous = 0, level = 0; level < 50; ++level, previous = points) {
        lerp = new N.RaceStats_lerp(level);
        points = J.toInt$0$n(lerp.call$2(totalMin, totalMax));
        gained = points - previous;
        for (point = 0; point < gained; ++point) {
          worstStats = H.setRuntimeTypeInfo([], t5);
          for (t6 = t3.get$keys(), t6 = t6.get$iterator(t6), worstError = -100; t6.moveNext$0();) {
            t7 = t6.get$current();
            ideal = lerp.call$2(min.$index(0, t7), t3.$index(0, t7));
            t8 = current.$index(0, t7);
            if (typeof ideal !== "number")
              return ideal.$sub();
            if (typeof t8 !== "number")
              return H.iae(t8);
            error = ideal - t8;
            if (error > worstError) {
              worstStats = H.setRuntimeTypeInfo([t7], t5);
              worstError = error;
            } else if (error === worstError)
              C.JSArray_methods.add$1(worstStats, t7);
          }
          H.assertSubtype(worstStats, "$isList", t5, "$asList");
          max = worstStats.length;
          t6 = random._random.nextInt$1(max - 0);
          if (t6 < 0 || t6 >= worstStats.length)
            return H.ioore(worstStats, t6);
          stat = worstStats[t6];
          t6 = current.$index(0, stat);
          if (typeof t6 !== "number")
            return t6.$add();
          current.$indexSet(0, stat, t6 + 1);
        }
        C.JSArray_methods.add$1(t4, P.LinkedHashMap_LinkedHashMap$from(current, t1, t2));
      }
    },
    get$name: function(_) {
      return this._race.name;
    }
  };
  N.RaceStats_lerp.prototype = {
    call$2: function(from, to) {
      var t = this.level / 49;
      if (typeof from !== "number")
        return H.iae(from);
      if (typeof to !== "number")
        return H.iae(to);
      return (1 - t) * from + t * to;
    },
    $signature: 78
  };
  M.Skill.prototype = {
    seeBreed$2: function(hero, breed) {
    },
    dualWield$1: function(hero) {
    },
    modifyHeft$3: function(hero, level, heftModifier) {
      return heftModifier;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._sortOrder, H.interceptedTypeCheck(other, "$isSkill")._sortOrder);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [M.Skill];
    }
  };
  M.UsableSkill.prototype = {};
  M.TargetSkill.prototype = {};
  M.Discipline.prototype = {
    gainMessage$1: function(level) {
      return "You have reached level " + level + " in " + this.get$name(this) + ".";
    },
    get$discoverMessage: function() {
      return "{1} can begin training in " + this.get$name(this) + ".";
    },
    onCalculateLevel$2: function(hero, points) {
      var level, t1, _this = this,
        training = hero.skills.points$1(0, _this);
      for (level = 1; level <= _this.get$maxLevel(); ++level) {
        t1 = _this.trainingNeeded$2(hero.heroClass, level);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (training < t1)
          return level - 1;
      }
      return _this.get$maxLevel();
    },
    trainingNeeded$2: function(heroClass, level) {
      var profiency = heroClass.proficiency$1(this);
      if (profiency === 0)
        return;
      return C.JSDouble_methods.ceil$0(this.baseTrainingNeeded$1(level) / profiency);
    }
  };
  M.Spell.prototype = {
    gainMessage$1: function(level) {
      return "{1} have learned the spell " + this.get$name(this) + ".";
    },
    get$discoverMessage: function() {
      return "{1} are not wise enough to cast " + this.get$name(this) + ".";
    },
    get$maxLevel: function() {
      return 1;
    },
    onCalculateLevel$2: function(hero, points) {
      var t2,
        t1 = hero.heroClass;
      if (t1.proficiency$1(this) === 0)
        return 0;
      t2 = hero.intellect;
      return t2._modify$1(t2._stat$_value) >= C.JSDouble_methods.round$0((this.get$baseComplexity() - 9) / t1.proficiency$1(this)) + 9 ? 1 : 0;
    }
  };
  M.SkillSet.prototype = {
    get$acquired: function() {
      var t1 = this._levels.get$keys(),
        t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return new H.WhereIterable(t1, H.functionTypeCheck(new M.SkillSet_acquired_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    points$1: function(_, skill) {
      this._points.$index(0, skill);
      return 0;
    },
    discover$1: function(skill) {
      var t1 = this._levels;
      if (t1.containsKey$1(skill))
        return false;
      t1.$indexSet(0, skill, 0);
      return true;
    },
    gain$2: function(skill, level) {
      var t1;
      level = Math.min(level, skill.get$maxLevel());
      t1 = this._levels;
      if (t1.$index(0, skill) === level)
        return false;
      if (level === 0 && !t1.containsKey$1(skill))
        return false;
      t1.$indexSet(0, skill, level);
      return true;
    }
  };
  M.SkillSet_acquired_closure.prototype = {
    call$1: function(skill) {
      var t1 = this.$this._levels.$index(0, H.interceptedTypeCheck(skill, "$isSkill"));
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    $signature: 79
  };
  M._Spell_Skill_UsableSkill.prototype = {};
  D.Property.prototype = {
    update$2: function(value, onChange) {
      var t1 = H.getRuntimeTypeArgument(this, "Property", 0);
      H.assertSubtypeOfRuntimeType(value, t1);
      H.functionTypeCheck(onChange, {func: 1, args: [t1]});
      t1 = this._stat$_value;
      if (t1 === value)
        return;
      this.set$_stat$_value(value);
      if (t1 != null)
        onChange.call$1(t1);
    },
    set$_stat$_value: function(_value) {
      this._stat$_value = H.assertSubtypeOfRuntimeType(_value, H.getRuntimeTypeArgument(this, "Property", 0));
    }
  };
  D.Stat.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  D.StatBase.prototype = {
    get$name: function(_) {
      return this.get$_stat().name;
    },
    _modify$1: function(base) {
      var t1;
      H.intTypeCheck(base);
      t1 = this.get$_statOffset();
      if (typeof base !== "number")
        return base.$add();
      return H.intTypeCheck(C.JSInt_methods.clamp$2(base + t1 + this._hero.statBonus$1(this.get$_stat()), 1, 60));
    },
    get$_statOffset: function() {
      return 0;
    },
    bindHero$1: function(hero) {
      var t1, t2, t3, _this = this;
      _this._hero = hero;
      t1 = _this.get$_stat();
      _this._hero.toString;
      t2 = hero.race._stats;
      t3 = G.experienceLevel(0) - 1;
      if (t3 < 0 || t3 >= t2.length)
        return H.ioore(t2, t3);
      _this.set$_stat$_value(H.intTypeCheck(J.clamp$2$n(t2[t3].$index(0, t1), 1, 60)));
    },
    refresh$1: function(game) {
      var t3, _this = this,
        t1 = _this._hero.race,
        t2 = _this.get$_stat();
      _this._hero.toString;
      t1 = t1._stats;
      t3 = G.experienceLevel(0) - 1;
      if (t3 < 0 || t3 >= t1.length)
        return H.ioore(t1, t3);
      t2 = H.intTypeCheck(J.clamp$2$n(t1[t3].$index(0, t2), 1, 60));
      _this.update$2(t2, new D.StatBase_refresh_closure(_this, t2, game));
    },
    $asProperty: function() {
      return [P.int];
    }
  };
  D.StatBase_refresh_closure.prototype = {
    call$1: function(previous) {
      var gain = this.newValue - H.intTypeCheck(previous),
        t1 = this.$this,
        t2 = this.game.log;
      if (gain > 0)
        t2.gain$1("You feel " + t1.get$_gainAdjective() + "! Your " + t1.get$_stat().name + " increased by " + H.S(gain) + ".");
      else
        t2.error$1(0, "You feel " + t1.get$_loseAdjective() + "! Your " + t1.get$_stat().name + " decreased by " + H.S(-gain) + ".");
    },
    $signature: 20
  };
  D.Strength.prototype = {
    get$_stat: function() {
      return C.Stat_Strength;
    },
    get$_gainAdjective: function() {
      return "mighty";
    },
    get$_loseAdjective: function() {
      return "weak";
    },
    get$_statOffset: function() {
      return -this._hero.get$weight();
    }
  };
  D.Agility.prototype = {
    get$_stat: function() {
      return C.Stat_Agility;
    },
    get$_gainAdjective: function() {
      return "dextrous";
    },
    get$_loseAdjective: function() {
      return "clumsy";
    }
  };
  D.Fortitude.prototype = {
    get$_stat: function() {
      return C.Stat_Fortitude;
    },
    get$_gainAdjective: function() {
      return "tough";
    },
    get$_loseAdjective: function() {
      return "sickly";
    },
    get$maxHealth: function() {
      var _this = this;
      return C.JSNumber_methods.toInt$0(Math.pow(_this._modify$1(_this._stat$_value), 1.4) + 1.23 * _this._modify$1(_this._stat$_value) + 18);
    }
  };
  D.Intellect.prototype = {
    get$_stat: function() {
      return C.Stat_Intellect;
    },
    get$_gainAdjective: function() {
      return "smart";
    },
    get$_loseAdjective: function() {
      return "stupid";
    }
  };
  D.Will.prototype = {
    get$_stat: function() {
      return C.Stat_Will;
    },
    get$_gainAdjective: function() {
      return "invincible";
    },
    get$_loseAdjective: function() {
      return "foolish";
    }
  };
  L.Affix.prototype = {
    resist$2: function(element, power) {
      this._affix$_resists.$indexSet(0, H.interceptedTypeCheck(element, "$isElement0"), H.intTypeCheck(power));
    },
    setStatBonus$2: function(stat, bonus) {
      this._statBonuses.$indexSet(0, H.interceptedTypeCheck(stat, "$isStat"), H.intTypeCheck(bonus));
    },
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  E.Equipment.prototype = {
    get$location: function(_) {
      return C.ItemLocation_Equipment;
    },
    get$weapons: function() {
      var t1 = this.slots,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.WhereIterable(t1, H.functionTypeCheck(new E.Equipment_weapons_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    get$length: function(_) {
      return C.JSArray_methods.fold$1$2(this.slots, 0, new E.Equipment_length_closure(), P.int);
    },
    get$iterator: function(_) {
      var t1 = this.slots,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = H.functionTypeCheck(new E.Equipment_iterator_closure(), {func: 1, ret: P.bool, args: [t2]});
      return new H.WhereIterator(C.JSArray_methods.get$iterator(t1), t3, [t2]);
    },
    $asIterable: function() {
      return [R.Item];
    }
  };
  E.Equipment_weapons_closure.prototype = {
    call$1: function(item) {
      H.interceptedTypeCheck(item, "$isItem");
      return item != null && item.type.weaponType != null;
    },
    $signature: 9
  };
  E.Equipment_length_closure.prototype = {
    call$2: function(count, item) {
      var t1;
      H.intTypeCheck(count);
      t1 = H.interceptedTypeCheck(item, "$isItem") == null ? 0 : 1;
      if (typeof count !== "number")
        return count.$add();
      return count + t1;
    },
    $signature: 83
  };
  E.Equipment_iterator_closure.prototype = {
    call$1: function(item) {
      return H.interceptedTypeCheck(item, "$isItem") != null;
    },
    $signature: 9
  };
  E._Equipment_IterableBase_ItemCollection.prototype = {};
  O.ItemLocation.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  O.ItemCollection.prototype = {
    get$name: function(_) {
      return this.get$location(this).name;
    }
  };
  O.Inventory.prototype = {
    get$length: function(_) {
      return this._items.length;
    },
    tryAdd$2$wasUnequipped: function(item, wasUnequipped) {
      var t1, t2, t3, _i, t4,
        adding = item._count;
      for (t1 = this._items, t2 = t1.length, t3 = adding, _i = 0; t4 = t1.length, _i < t4; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t1[_i].stack$1(item);
        t3 = item._count;
        if (t3 === 0)
          return new O.AddItemResult(0);
      }
      t2 = this._capacity;
      if (t2 != null && t4 >= t2) {
        if (typeof adding !== "number")
          return adding.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return new O.AddItemResult(t3);
      }
      C.JSArray_methods.add$1(t1, item);
      C.JSArray_methods.sort$0(t1);
      return new O.AddItemResult(0);
    },
    tryAdd$1: function(item) {
      return this.tryAdd$2$wasUnequipped(item, false);
    },
    get$iterator: function(_) {
      var t1 = this._items;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asIterableMixin: function() {
      return [R.Item];
    },
    $asIterable: function() {
      return [R.Item];
    },
    get$location: function(receiver) {
      return this.location;
    }
  };
  O.AddItemResult.prototype = {};
  O._Inventory_IterableMixin_ItemCollection.prototype = {};
  R.Item.prototype = {
    compareTo$1: function(_, other) {
      var t1, t2;
      H.interceptedTypeCheck(other, "$isItem");
      t1 = this.type.sortIndex;
      t2 = other.type.sortIndex;
      if (t1 !== t2)
        return C.JSInt_methods.compareTo$1(t1, t2);
      t1 = this._count;
      t2 = other._count;
      if (t1 != t2)
        return J.compareTo$1$ns(t2, t1);
      return 0;
    },
    canStack$1: function(item) {
      if (this.type != item.type)
        return false;
      if (this.prefix != null || item.prefix != null)
        return false;
      if (this.suffix != null || item.suffix != null)
        return false;
      return true;
    },
    stack$1: function(item) {
      var t1, t2, total, _this = this;
      if (!_this.canStack$1(item))
        return;
      t1 = _this._count;
      t2 = item._count;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      total = t1 + t2;
      t1 = _this.type.maxStack;
      if (total <= t1) {
        _this._count = total;
        item._count = 0;
      } else {
        _this._count = t1;
        item._count = total - t1;
      }
    },
    toString$0: function(_) {
      var t2, text, quantity, _this = this,
        $name = _this.type.quantifiableName,
        t1 = _this.prefix;
      if (t1 != null)
        $name = t1.displayName + " " + H.S($name);
      t1 = _this.suffix;
      if (t1 != null)
        $name = H.S($name) + " " + t1.displayName;
      t1 = _this._count;
      t2 = t1 === 1;
      if (t2)
        if (J.getInterceptor$s($name).startsWith$1($name, "(a) ")) {
          text = C.JSString_methods.substring$1($name, 4);
          quantity = "a";
        } else {
          if (0 >= $name.length)
            return H.ioore($name, 0);
          quantity = C.JSString_methods.contains$1("aeiouAEIOU", $name[0]) ? "an" : "a";
          text = $name;
        }
      else {
        quantity = J.toString$0$(t1);
        text = $name;
      }
      return quantity + " " + H.S(O.Log__categorize(text, true, t2));
    },
    $isComparable: 1,
    $asComparable: function() {
      return [R.Item];
    },
    $isNoun: 1
  };
  L.Drop.prototype = {};
  L.ItemUse.prototype = {};
  L.ItemType.prototype = {
    get$name: function(_) {
      return O.Log__categorize(this.quantifiableName, false, true);
    },
    toString$0: function(_) {
      return O.Log__categorize(this.quantifiableName, false, true);
    },
    get$depth: function() {
      return this.depth;
    }
  };
  O.Shop.prototype = {
    update$1: function(inventory) {
      var t2, max, t3, item, count, tries, tries0, t4, i, t5, t6,
        t1 = $.$get$rng(),
        remainCount = C.JSNumber_methods.toInt$0(t1.float$2(0, 5.2, 10.4));
      for (t2 = inventory._items; max = t2.length, max > remainCount;) {
        t3 = t1._random.nextInt$1(max - 0);
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        item = t2[t3];
        C.JSArray_methods.removeAt$1(t2, t3);
        if (inventory._lastUnequipped == item)
          inventory._lastUnequipped = null;
      }
      count = C.JSNumber_methods.toInt$0(t1.float$2(0, 7.8, 18.2));
      t1 = this._drop;
      t3 = inventory.get$tryAdd();
      tries = 0;
      while (true) {
        if (t2.length < count) {
          tries0 = tries + 1;
          t4 = tries < 100;
          tries = tries0;
        } else
          t4 = false;
        if (!t4)
          break;
        t1.dropItem$2(1, t3);
        for (i = 1; t4 = t2.length, i < t4; ++i) {
          t5 = i - 1;
          if (t5 < 0)
            return H.ioore(t2, t5);
          t6 = t2[t5];
          if (i < 0)
            return H.ioore(t2, i);
          t4 = t2[i];
          if (t6.type == t4.type && t6.prefix == t4.prefix && t6.suffix == t4.suffix) {
            C.JSArray_methods.removeAt$1(t2, i);
            if (inventory._lastUnequipped == t4)
              inventory._lastUnequipped = null;
            i = t5;
          }
        }
      }
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  B.BreedRef.prototype = {};
  B.Breed.prototype = {
    get$name: function(_) {
      return O.Log__categorize(this._breed$_name, false, true);
    },
    get$experience: function() {
      var t1, t2, _i, t3, attackTotal, attack, t4, moveTotal, moveRateTotal, move, t5, scale, _this = this,
        totalDodge = _this.dodge;
      for (t1 = _this.defenses, t2 = t1.length, _i = 0; _i < t2; ++_i)
        totalDodge += t1[_i].amount;
      t1 = 6 + _this.speed;
      if (t1 < 0 || t1 >= 13)
        return H.ioore(C.List_mC8, t1);
      t1 = C.List_mC8[t1];
      for (t2 = _this.attacks, t3 = t2.length, attackTotal = 0, _i = 0; _i < t3; ++_i) {
        attack = t2[_i];
        attackTotal += attack.damage * attack.element.experience;
      }
      for (t2 = _this.moves, t4 = t2.length, moveTotal = 0, moveRateTotal = 0, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        move = t2[_i];
        t5 = move.rate;
        moveTotal += move.get$experience() / t5;
        moveRateTotal += 1 / t5;
      }
      t2 = _this.flags;
      scale = H.boolConversionCheck(t2.berzerk) ? 1.1 : 1;
      if (H.boolConversionCheck(t2.cowardly))
        scale *= 0.9;
      if (H.boolConversionCheck(t2.fearless))
        scale *= 1.05;
      if (H.boolConversionCheck(t2.immobile))
        scale *= 0.7;
      if (H.boolConversionCheck(t2.protective))
        scale *= 1.1;
      return C.JSDouble_methods.ceil$0(_this.maxHealth * (1 + totalDodge / 100) * t1 * (attackTotal / t3 * (1 - moveRateTotal) + moveTotal) * scale * K.lerpDouble(_this.meander, 0, 100, 1, 0.7) / 40);
    },
    spawnAll$0: function() {
      var i, t1, _this = this,
        breeds = H.setRuntimeTypeInfo([], [B.Breed]),
        count = $.$get$rng().inclusive$2(_this.countMin, _this.countMax);
      for (i = 0; i < count; ++i)
        C.JSArray_methods.add$1(breeds, _this);
      t1 = _this.minions;
      if (t1 != null)
        t1.spawnBreed$2(C.JSNumber_methods.floor$0(_this.depth * 0.9), C.JSArray_methods.get$add(breeds));
      return breeds;
    },
    toString$0: function(_) {
      return O.Log__categorize(this._breed$_name, false, true);
    },
    get$depth: function() {
      return this.depth;
    }
  };
  B.SpawnLocation.prototype = {
    toString$0: function(_) {
      return this._breed$_name;
    }
  };
  B.Spawn.prototype = {};
  B.BreedFlags.prototype = {
    toString$0: function(_) {
      var _this = this, names = [];
      if (H.boolConversionCheck(_this.berzerk))
        names.push("berzerk");
      if (H.boolConversionCheck(_this.cowardly))
        names.push("cowardly");
      if (H.boolConversionCheck(_this.fearless))
        names.push("fearless");
      if (H.boolConversionCheck(_this.immobile))
        names.push("immobile");
      if (H.boolConversionCheck(_this.protective))
        names.push("protective");
      if (H.boolConversionCheck(_this.unique))
        names.push("unique");
      return C.JSArray_methods.join$1(names, " ");
    }
  };
  B.Monster.prototype = {
    get$appearance: function(_) {
      return this._breed.appearance;
    },
    get$nounText: function() {
      return "the " + H.S(O.Log__categorize(this._breed._breed$_name, false, true));
    },
    get$maxHealth: function() {
      return this._breed.maxHealth;
    },
    get$emanationLevel: function() {
      return this._breed.emanationLevel;
    },
    Monster$5: function(game, _breed, x, y, generation) {
      var t2, t3, _i, _this = this,
        t1 = _this._breed;
      H.intTypeCheck(C.JSInt_methods.clamp$2(t1.maxHealth, 0, _this.get$maxHealth()));
      _this._monster$_state = new M.AsleepState();
      t2 = $.$get$rng().range$2(60, 200);
      _this._frightenThreshold = t2;
      if (H.boolConversionCheck(t1.flags.cowardly))
        _this._frightenThreshold = t2 * 0.7;
      for (t1 = t1.moves, t2 = t1.length, t3 = _this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t3.$indexSet(0, t1[_i], 0);
    }
  };
  M.MonsterState.prototype = {};
  M.AsleepState.prototype = {};
  O.Move.prototype = {};
  O.RangedMove.prototype = {};
  B.BucketQueue.prototype = {
    add$2: function(_, value, cost) {
      var t2, t3, t4, bucket, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(value, t1);
      _this._bucket = H.intTypeCheck(Math.min(_this._bucket, H.checkNum(cost)));
      t2 = _this._buckets;
      t3 = t2.length;
      if (typeof cost !== "number")
        return cost.$add();
      t4 = cost + 1;
      if (t3 <= t4)
        C.JSArray_methods.set$length(t2, t4);
      if (cost < 0 || cost >= t2.length)
        return H.ioore(t2, cost);
      bucket = t2[cost];
      if (bucket == null) {
        bucket = P.ListQueue$(t1);
        C.JSArray_methods.$indexSet(t2, cost, bucket);
      }
      bucket._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(bucket, 0)));
    },
    removeNext$0: function() {
      var t2, t3, t4,
        t1 = this._buckets;
      while (true) {
        t2 = this._bucket;
        t3 = t1.length;
        if (t2 < t3) {
          if (t2 < 0)
            return H.ioore(t1, t2);
          t4 = t1[t2];
          t4 = t4 == null || t4._head === t4._tail;
        } else
          t4 = false;
        if (!t4)
          break;
        this._bucket = t2 + 1;
      }
      if (t2 >= t3)
        return;
      if (t2 < 0)
        return H.ioore(t1, t2);
      return t1[t2].removeFirst$0();
    }
  };
  N.Flow.prototype = {
    Flow$3$maxDistance: function(stage, _start, maxDistance) {
      var width, height, t3, t4, left, $top, right, bottom, start, _this = this,
        t1 = _this._maxDistance,
        t2 = _this.stage;
      if (t1 == null) {
        _this._offset = new L.Vec(1, 1);
        t1 = t2.tiles.bounds.size;
        width = t1.x - 2;
        height = t1.y - 2;
      } else {
        t3 = _this._start;
        t4 = t3.x;
        left = Math.max(1, t4 - t1);
        t3 = t3.y;
        $top = Math.max(1, t3 - t1);
        t2 = t2.tiles.bounds.size;
        right = Math.min(t2.x - 1, t4 + t1 + 1);
        bottom = Math.min(t2.y - 1, t3 + t1 + 1);
        _this._offset = new L.Vec(left, $top);
        width = right - left;
        height = bottom - $top;
      }
      _this.set$_costs(M.Array2D$(width, height, -2, P.int));
      start = _this._start.$sub(0, _this._offset);
      _this._open.add$2(0, start, 0);
      _this._costs.$indexSet(0, start, 0);
    },
    get$reachable: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, i;
        return function $async$get$reachable($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._found, i = 0;
                case 3:
                  // for condition
                  // trivial condition
                  for (; i >= t1.length;)
                    if (!$async$self._processNext$0()) {
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  $async$goto = 6;
                  return t1[i].$add(0, $async$self._offset);
                case 6:
                  // after yield
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, L.Vec);
    },
    bestWhere$1: function(predicate) {
      var t2,
        results = this._findAllBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]})),
        t1 = results.length;
      if (t1 === 0)
        return;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(results, "$isList", [L.Vec], "$asList");
      t1 = t2.range$1(t1);
      if (t1 < 0 || t1 >= results.length)
        return H.ioore(results, t1);
      return results[t1].$add(0, this._offset);
    },
    costAt$1: function(pos) {
      var t1, t2, t3, t4, distance, _this = this;
      pos = pos.$sub(0, _this._offset);
      if (!_this._costs.bounds.contains$1(0, pos))
        return;
      t1 = pos.y;
      t2 = pos.x;
      while (true) {
        t3 = _this._costs;
        t4 = t3._elements;
        t3 = t1 * t3.bounds.size.x + t2;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        if (!(J.$eq$(t4[t3], -2) && _this._processNext$0()))
          break;
      }
      distance = _this._costs.$index(0, pos);
      if (distance === -2 || distance === -1)
        return;
      return distance;
    },
    _findAllBestWhere$1: function(predicate) {
      var goals, t1, lowestCost, i, pos, t2, t3, cost, _this = this;
      H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]});
      goals = H.setRuntimeTypeInfo([], [L.Vec]);
      for (t1 = _this._found, lowestCost = null, i = 0; true; ++i) {
        for (; i >= t1.length;)
          if (!_this._processNext$0())
            return goals;
        pos = t1[i];
        if (!H.boolConversionCheck(predicate.call$1(pos.$add(0, _this._offset))))
          continue;
        t2 = _this._costs;
        t3 = t2._elements;
        t2 = pos.y * t2.bounds.size.x + pos.x;
        if (t2 < 0 || t2 >= t3.length)
          return H.ioore(t3, t2);
        cost = t3[t2];
        if (lowestCost == null || cost === lowestCost)
          C.JSArray_methods.add$1(goals, pos);
        else
          break;
        lowestCost = cost;
      }
      return goals;
    },
    _processNext$0: function() {
      var t1,
        start = this._open.removeNext$0();
      if (start == null)
        return false;
      t1 = new N.Flow__processNext_processNeighbor(this, start, this._costs.$index(0, start));
      t1.call$2(C.Direction_0_m1, false);
      t1.call$2(C.Direction_0_1, false);
      t1.call$2(C.Direction_1_0, false);
      t1.call$2(C.Direction_m1_0, false);
      t1.call$2(C.Direction_m1_m1, true);
      t1.call$2(C.Direction_1_m1, true);
      t1.call$2(C.Direction_m1_1, true);
      t1.call$2(C.Direction_1_1, true);
      return true;
    },
    set$_costs: function(_costs) {
      this._costs = H.assertSubtype(_costs, "$isArray2D", [P.int], "$asArray2D");
    }
  };
  N.Flow__processNext_processNeighbor.prototype = {
    call$2: function(dir, isDiagonal) {
      var t2, t3, relative, total,
        here = this.start.$add(0, dir),
        t1 = this.$this;
      if (!t1._costs.bounds.contains$1(0, here))
        return;
      if (!J.$eq$(t1._costs.$index(0, here), -2))
        return;
      t2 = here.$add(0, t1._offset);
      t2 = t1.stage.tiles.$index(0, t2);
      t3 = this.parentCost;
      relative = t1.tileCost$4(t3, here.$add(0, t1._offset), t2, isDiagonal);
      t2 = t1._costs;
      if (relative == null)
        t2.$indexSet(0, here, -1);
      else {
        if (typeof t3 !== "number")
          return t3.$add();
        total = t3 + relative;
        t2.$indexSet(0, here, total);
        C.JSArray_methods.add$1(t1._found, here);
        t1._open.add$2(0, here, total);
      }
    },
    $signature: 85
  };
  N.MotilityFlow.prototype = {
    tileCost$4: function(parentCost, pos, tile, isDiagonal) {
      var t1, _this = this;
      if ((tile.type.motility._bitMask & _this._motility._bitMask) === 0)
        return;
      if (_this._avoidActors && _this.stage._actorsByTile.$index(0, pos) != null)
        return;
      t1 = _this._maxDistance;
      if (t1 != null) {
        if (typeof parentCost !== "number")
          return parentCost.$ge();
        t1 = parentCost >= t1;
      } else
        t1 = false;
      if (t1)
        return;
      return 1;
    }
  };
  B.Fov.prototype = {
    refresh$1: function(pos) {
      var octant,
        t1 = this._fov$_stage;
      t1.game.hero.blindness;
      for (octant = 0; octant < 8; ++octant)
        this._refreshOctant$2(pos, octant);
      t1.setVisibility$3(pos, false, 0);
    },
    _refreshOctant$2: function(start, octant) {
      var t1, rowInc, colInc, t2, bounds, t3, t4, t5, t6, fullShadow, row, pos, t7, row0, pastMaxDistance, col, t8, t9, distance, fallOff, normalized, projection, _this = this;
      if (octant >= 8)
        return H.ioore($.Fov__octantCoordinates, octant);
      t1 = $.Fov__octantCoordinates[octant];
      rowInc = t1[0];
      colInc = t1[1];
      _this.set$_shadows(H.setRuntimeTypeInfo([], [B._Shadow]));
      t1 = _this._fov$_stage;
      t2 = t1.tiles;
      bounds = t2.bounds;
      for (t2 = t2._elements, t3 = bounds.size.x, t4 = t2.length, t5 = rowInc.x, t6 = rowInc.y, fullShadow = false, row = 1; true; row = row0) {
        pos = start.$add(0, new L.Vec(t5 * row, t6 * row));
        if (!bounds.contains$1(0, pos))
          break;
        for (t7 = row + 2, row0 = row + 1, pastMaxDistance = false, col = 0; col <= row; ++col) {
          if (fullShadow || pastMaxDistance)
            t1.setVisibility$3(pos, true, 255);
          else {
            t8 = start.$sub(0, pos);
            t9 = t8.x;
            t8 = t8.y;
            distance = Math.sqrt(t9 * t9 + t8 * t8);
            if (distance > 24) {
              pastMaxDistance = true;
              fallOff = 255;
            } else {
              normalized = distance / 24;
              fallOff = C.JSDouble_methods.toInt$0(normalized * normalized * 255);
            }
            projection = new B._Shadow(col / t7, (col + 1) / row0);
            t1.setVisibility$3(pos, _this._isInShadow$1(projection), fallOff);
            t8 = pos.y * t3 + pos.x;
            if (t8 < 0 || t8 >= t4)
              return H.ioore(t2, t8);
            t8 = t2[t8];
            t8.toString;
            t9 = $.$get$Motility_fly();
            if ((t8.type.motility._bitMask & t9._bitMask) === 0)
              fullShadow = _this._addShadow$1(projection);
          }
          pos = pos.$add(0, colInc);
          if (!bounds.contains$1(0, pos))
            break;
        }
      }
    },
    _isInShadow$1: function(projection) {
      var t1, t2, t3, t4, _i, shadow;
      for (t1 = this._shadows, t2 = t1.length, t3 = projection.start, t4 = projection.end, _i = 0; _i < t2; ++_i) {
        shadow = t1[_i];
        if (shadow.start <= t3 && shadow.end >= t4)
          return true;
      }
      return false;
    },
    _addShadow$1: function(shadow) {
      var t1, t2, t3, index, t4, t5, overlapsPrev;
      for (t1 = this._shadows, t2 = t1.length, t3 = shadow.start, index = 0; t4 = index < t2, t4; ++index)
        if (t1[index].start > t3)
          break;
      if (index > 0) {
        t5 = index - 1;
        if (t5 >= t2)
          return H.ioore(t1, t5);
        overlapsPrev = t1[t5].end > t3;
      } else
        overlapsPrev = false;
      if (t4 && t1[index].start < shadow.end)
        if (overlapsPrev) {
          t3 = index - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          t4 = t3.end;
          if (index >= t2)
            return H.ioore(t1, index);
          t3.end = Math.max(t4, t1[index].end);
          t1 = this._shadows;
          (t1 && C.JSArray_methods).removeAt$1(t1, index);
        } else {
          if (index >= t2)
            return H.ioore(t1, index);
          t1 = t1[index];
          t1.start = Math.min(t1.start, t3);
        }
      else if (overlapsPrev) {
        t3 = index - 1;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t3 = t1[t3];
        t3.end = Math.max(t3.end, shadow.end);
      } else {
        t1.toString;
        H.assertSubtypeOfRuntimeType(shadow, H.getTypeArgumentByIndex(t1, 0));
        if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
          H.throwExpression(P.UnsupportedError$("insert"));
        if (index > t2)
          H.throwExpression(P.RangeError$value(index, null));
        t1.splice(index, 0, shadow);
      }
      t1 = this._shadows;
      t2 = t1.length;
      if (t2 === 1) {
        if (0 >= t2)
          return H.ioore(t1, 0);
        t1 = t1[0];
        t1 = t1.start === 0 && t1.end === 1;
      } else
        t1 = false;
      return t1;
    },
    set$_shadows: function(_shadows) {
      this._shadows = H.assertSubtype(_shadows, "$isList", [B._Shadow], "$asList");
    }
  };
  B._Shadow.prototype = {
    toString$0: function(_) {
      return "(" + H.S(this.start) + "-" + H.S(this.end) + ")";
    }
  };
  F.Lighting.prototype = {
    refresh$0: function() {
      var _this = this;
      if (_this._floorLightDirty)
        _this._lightFloor$0();
      if (_this._actorLightDirty)
        _this._lightActors$0();
      if (_this._visibilityDirty)
        _this._fov.refresh$1(_this._lighting$_stage.game.hero._pos);
      if (_this._floorLightDirty || _this._actorLightDirty || _this._visibilityDirty) {
        _this._mergeLayers$0();
        _this._lightWalls$0();
        _this._updateExplored$0();
      }
      _this._visibilityDirty = _this._actorLightDirty = _this._floorLightDirty = false;
    },
    _lightFloor$0: function() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, y, t12, t13, x, pos, t14, emanation, t15, itemEmanation, _this = this,
        t1 = _this._lighting$_queue;
      C.JSArray_methods.set$length(t1._buckets, 0);
      for (t2 = _this._lighting$_stage, t3 = t2.tiles, t4 = t3.bounds.size, t5 = t4.y, t4 = t4.x, t6 = _this._floorLight, t7 = H.getTypeArgumentByIndex(t6, 0), t8 = t6._elements, t9 = t6.bounds.size.x, t2 = t2._itemsByTile, t3 = t3._elements, t10 = t3.length, t11 = [R.Item], y = 0; y < t5; ++y)
        for (t12 = y * t9, t13 = y * t4, x = 0; x < t4; ++x) {
          pos = new L.Vec(x, y);
          t14 = t13 + x;
          if (t14 < 0 || t14 >= t10)
            return H.ioore(t3, t14);
          t14 = t3[t14];
          emanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t14.type.emanation + t14._appliedEmanation, 0, 192));
          t15 = t2.$index(0, pos);
          if (t15 == null)
            t15 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t11), null);
          t15 = t15._items;
          t15 = new J.ArrayIterator(t15, t15.length, [H.getTypeArgumentByIndex(t15, 0)]);
          itemEmanation = 0;
          for (; t15.moveNext$0();)
            itemEmanation = Math.max(itemEmanation, t15._current.type.emanationLevel);
          emanation += F.Lighting_emanationForLevel(itemEmanation) / 2 | 0;
          if (t14.element.emanates)
            t14.toString;
          t14 = t12 + x;
          if (emanation > 0) {
            emanation = Math.min(emanation, 192);
            C.JSArray_methods.$indexSet(t8, t14, H.assertSubtypeOfRuntimeType(emanation, t7));
            t1.add$2(0, pos, 255 - emanation);
          } else
            C.JSArray_methods.$indexSet(t8, t14, H.assertSubtypeOfRuntimeType(0, t7));
        }
      _this._process$2(t6, 21);
    },
    _lightActors$0: function() {
      var t4, t5, t6, t7, _i, actor, emanation, t8, _this = this,
        t1 = _this._actorLight,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = t1._elements;
      C.JSArray_methods.fillRange$3(t3, 0, t3.length, H.assertSubtypeOfRuntimeType(0, t2));
      t4 = _this._lighting$_queue;
      C.JSArray_methods.set$length(t4._buckets, 0);
      for (t5 = _this._lighting$_stage._actors, t6 = t5.length, t7 = t1.bounds.size.x, _i = 0; _i < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i) {
        actor = t5[_i];
        emanation = F.Lighting_emanationForLevel(actor.get$emanationLevel());
        if (emanation > 0) {
          t8 = actor._pos;
          C.JSArray_methods.$indexSet(t3, t8.y * t7 + t8.x, H.assertSubtypeOfRuntimeType(emanation, t2));
          t4.add$2(0, t8, 255 - emanation);
        }
      }
      _this._process$2(t1, 42);
    },
    _mergeLayers$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, y, t11, t12, t13, x, t14, t15, t16;
      for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = this._floorLight, t5 = t4._elements, t4 = t4.bounds.size.x, t6 = t5.length, t7 = this._actorLight, t8 = t7._elements, t7 = t7.bounds.size.x, t9 = t8.length, t1 = t1._elements, t10 = t1.length, y = 0; y < t3; ++y)
        for (t11 = y * t4, t12 = y * t7, t13 = y * t2, x = 0; x < t2; ++x) {
          t14 = t13 + x;
          if (t14 < 0 || t14 >= t10)
            return H.ioore(t1, t14);
          t14 = t1[t14];
          t14.toString;
          t15 = $.$get$Motility_fly();
          if ((t14.type.motility._bitMask & t15._bitMask) === 0)
            continue;
          t15 = t11 + x;
          if (t15 < 0 || t15 >= t6)
            return H.ioore(t5, t15);
          t15 = t5[t15];
          t16 = t12 + x;
          if (t16 < 0 || t16 >= t9)
            return H.ioore(t8, t16);
          t16 = t8[t16];
          if (typeof t15 !== "number")
            return t15.$add();
          if (typeof t16 !== "number")
            return H.iae(t16);
          t14.illumination = H.intTypeCheck(C.JSNumber_methods.clamp$2(t15 + t16, 0, 255));
        }
    },
    _lightWalls$0: function() {
      var t1, t2, t3, t4, y, t5, x, _box_0, t6, t7, checkNeighbor, _i;
      for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, y = 0; y < t3; ++y)
        for (t5 = y * t2, x = 0; x < t2; ++x) {
          _box_0 = {};
          t6 = t5 + x;
          if (t6 < 0 || t6 >= t4)
            return H.ioore(t1, t6);
          t6 = t1[t6];
          t6.toString;
          t7 = $.$get$Motility_fly();
          if ((t6.type.motility._bitMask & t7._bitMask) !== 0)
            continue;
          _box_0.illumination = 0;
          _box_0.openNeighbor = false;
          checkNeighbor = new F.Lighting__lightWalls_checkNeighbor(_box_0, this, x, y);
          for (_i = 0; _i < 4; ++_i)
            checkNeighbor.call$1(C.List_aAW[_i]);
          if (!_box_0.openNeighbor)
            for (_i = 0; _i < 4; ++_i)
              checkNeighbor.call$1(C.List_izR[_i]);
          t6.illumination = _box_0.illumination;
        }
    },
    _updateExplored$0: function() {
      var t1, t2, t3, y, x;
      for (t1 = this._lighting$_stage, t2 = t1.tiles.bounds.size, t3 = t2.y, t2 = t2.x, y = 0; y < t3; ++y)
        for (x = 0; x < t2; ++x)
          t1.exploreAt$2(x, y);
      t2 = t1.game.hero._pos;
      t1.exploreAt$3$force(t2.x, t2.y, true);
    },
    _process$2: function(tiles, attenuate) {
      var diagonalAttenuate, t1, t2, t3, t4, pos, t5;
      H.assertSubtype(tiles, "$isArray2D", [P.int], "$asArray2D");
      diagonalAttenuate = C.JSNumber_methods.ceil$0(attenuate * 1.5);
      for (t1 = tiles._elements, t2 = tiles.bounds.size.x, t3 = t1.length, t4 = this._lighting$_queue; true;) {
        pos = t4.removeNext$0();
        if (pos == null)
          break;
        t5 = pos.y * t2 + pos.x;
        if (t5 < 0 || t5 >= t3)
          return H.ioore(t1, t5);
        t5 = new F.Lighting__process_checkNeighbor(this, pos, t1[t5], tiles, attenuate);
        t5.call$2(C.Direction_0_m1, attenuate);
        t5.call$2(C.Direction_0_1, attenuate);
        t5.call$2(C.Direction_1_0, attenuate);
        t5.call$2(C.Direction_m1_0, attenuate);
        t5.call$2(C.Direction_1_m1, diagonalAttenuate);
        t5.call$2(C.Direction_1_1, diagonalAttenuate);
        t5.call$2(C.Direction_m1_m1, diagonalAttenuate);
        t5.call$2(C.Direction_m1_1, diagonalAttenuate);
      }
    }
  };
  F.Lighting__lightWalls_checkNeighbor.prototype = {
    call$1: function(offset) {
      var t1, t2, _this = this,
        neighborX = _this.x + offset.x,
        neighborY = _this.y + offset.y;
      if (neighborX < 0)
        return;
      t1 = _this.$this._lighting$_stage.tiles;
      t2 = t1.bounds.size;
      if (neighborX >= t2.x)
        return;
      if (neighborY < 0)
        return;
      if (neighborY >= t2.y)
        return;
      t1 = t1.$get$2(neighborX, neighborY);
      if (t1._isOccluded)
        return;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) === 0)
        return;
      t2 = _this._box_0;
      t2.openNeighbor = true;
      t2.illumination = Math.max(t2.illumination, t1.illumination);
    },
    $signature: 13
  };
  F.Lighting__process_checkNeighbor.prototype = {
    call$2: function(dir, attenuation) {
      var t3, illumination, _this = this,
        neighborPos = _this.pos.$add(0, dir),
        t1 = _this.$this,
        t2 = t1._lighting$_stage.tiles;
      if (!t2.bounds.contains$1(0, neighborPos))
        return;
      t2 = t2.$index(0, neighborPos);
      t2.toString;
      t3 = $.$get$Motility_fly();
      if ((t2.type.motility._bitMask & t3._bitMask) === 0)
        return;
      t2 = _this.parentLight;
      if (typeof t2 !== "number")
        return t2.$sub();
      illumination = t2 - attenuation;
      t2 = _this.tiles;
      t3 = t2.$index(0, neighborPos);
      if (typeof t3 !== "number")
        return t3.$ge();
      if (t3 >= illumination)
        return;
      t2.$indexSet(0, neighborPos, illumination);
      if (illumination <= _this.attenuate)
        return;
      t1._lighting$_queue.add$2(0, neighborPos, 255 - illumination);
    },
    $signature: 86
  };
  Y.Path.prototype = {
    toString$0: function(_) {
      return H.S(this.startDirection) + " pos:" + this.pos.toString$0(0) + " cost:" + this.cost;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  Y.Pathfinder.prototype = {
    search$0: function(_) {
      var path, t3, result, t4, t5, t6, t7, _i, dir, neighbor, t8, t9, cost, t10, _this = this,
        paths = new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, Y.Path]]), [Y.Path]),
        explored = P.LinkedHashSet_LinkedHashSet(L.Vec),
        t1 = _this.start,
        t2 = _this.end;
      paths.add$2(0, new Y.Path(C.Direction_0_0, t1, 0, 0), t2.$sub(0, t1).get$kingLength());
      for (t1 = _this.stage; true;) {
        path = paths.removeNext$0();
        if (path == null)
          break;
        t3 = path.pos;
        if (t3.$eq(0, t2))
          return true;
        if (!explored.add$1(0, t3))
          continue;
        result = _this.processStep$1(path);
        if (result != null)
          return result;
        for (t4 = path.length + 1, t5 = path.cost, t6 = path.startDirection, t7 = t6 === C.Direction_0_0, _i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          neighbor = t3.$add(0, dir);
          if (explored.contains$1(0, neighbor))
            continue;
          t8 = t1.tiles;
          t9 = t8.bounds;
          if (!t9.contains$1(0, neighbor))
            continue;
          t8 = t8._elements;
          t9 = neighbor.y * t9.size.x + neighbor.x;
          if (t9 < 0 || t9 >= t8.length)
            return H.ioore(t8, t9);
          cost = _this.stepCost$2(neighbor, t8[t9]);
          if (cost == null)
            continue;
          t8 = t7 ? dir : t6;
          t9 = t5 + cost;
          t10 = t2.$sub(0, neighbor);
          paths.add$2(0, new Y.Path(t8, neighbor, t4, t9), t9 + Math.max(Math.abs(t10.x), Math.abs(t10.y)));
        }
      }
      return false;
    }
  };
  L.Stage.prototype = {
    get$allItems: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t1, t1;
        return function $async$get$allItems($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._itemsByTile;
                t1 = t1.get$values(t1);
                t1 = t1.get$iterator(t1);
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                $async$goto = 4;
                return P._IterationMarker_yieldStar(t1.get$current());
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, R.Item);
    },
    addActor$1: function(actor) {
      C.JSArray_methods.add$1(this._actors, actor);
      this._actorsByTile.$indexSet(0, actor._pos, actor);
    },
    placeDrops$3: function(pos, motility, drop) {
      var items = H.setRuntimeTypeInfo([], [R.Item]);
      drop.dropItem$2(this.game.depth, new L.Stage_placeDrops_closure(this, items, N.MotilityFlow$(this, pos, motility, false, null), pos));
      return items;
    },
    addItem$2: function(item, pos) {
      this._itemsByTile.putIfAbsent$2(pos, new L.Stage_addItem_closure()).tryAdd$1(item);
      if (item.type.emanationLevel > 0)
        this._lighting._floorLightDirty = true;
    },
    itemsAt$1: function(pos) {
      var t1 = this._itemsByTile.$index(0, pos);
      return t1 == null ? O.Inventory$(C.ItemLocation_46y, null) : t1;
    },
    exploreAt$3$force: function(x, y, force) {
      var t1,
        tile = this.tiles.$get$2(x, y);
      if (tile.updateExplored$1$force(force))
        if (!tile._isOccluded && tile.illumination - tile._fallOff > 0) {
          t1 = this._actorsByTile.$index(0, new L.Vec(x, y));
          if (t1 != null && !!t1.$isMonster)
            this.game.hero.seeMonster$1(t1);
        }
    },
    exploreAt$2: function(x, y) {
      return this.exploreAt$3$force(x, y, null);
    },
    setVisibility$3: function(pos, isOccluded, fallOff) {
      var t1,
        tile = this.tiles.$index(0, pos);
      tile._isOccluded = isOccluded;
      tile._fallOff = fallOff;
      if (!isOccluded && tile.illumination - fallOff > 0) {
        t1 = this._actorsByTile.$index(0, pos);
        if (t1 != null && !!t1.$isMonster)
          this.game.hero.seeMonster$1(t1);
      }
    },
    findOpenTile$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, pos;
      for (t1 = this._actorsByTile, t2 = t1._elements, t1 = t1.bounds.size.x, t3 = t2.length, t4 = this.tiles, t5 = t4._elements, t4 = t4.bounds, t6 = t4.size, t7 = t6.x, t8 = t5.length, t4 = t4.pos, t9 = t4.x, t10 = t9 + t7; true;) {
        t11 = $.$get$rng();
        t11.toString;
        t12 = Math.min(t9, t10);
        t13 = Math.max(t9, t10);
        t12 = t11._random.nextInt$1(t13 - t12) + t12;
        t13 = t4.y;
        t14 = t13 + t6.y;
        t15 = Math.min(t13, t14);
        t14 = Math.max(t13, t14);
        t11 = t11._random.nextInt$1(t14 - t15) + t15;
        pos = new L.Vec(t12, t11);
        t13 = t11 * t7 + t12;
        if (t13 < 0 || t13 >= t8)
          return H.ioore(t5, t13);
        t13 = t5[t13].type;
        t13.toString;
        t14 = $.$get$Motility_walk();
        if ((t13.motility._bitMask & t14._bitMask) === 0)
          continue;
        t11 = t11 * t1 + t12;
        if (t11 < 0 || t11 >= t3)
          return H.ioore(t2, t11);
        if (t2[t11] != null)
          continue;
        return pos;
      }
    }
  };
  L.Stage_closure.prototype = {
    call$0: function() {
      return new Q.Tile($.$get$Element_none());
    },
    $signature: 87
  };
  L.Stage_placeDrops_closure.prototype = {
    call$1: function(item) {
      var t1, t2, itemPos, allowed, t3, _this = this;
      C.JSArray_methods.add$1(_this.items, item);
      t1 = _this.flow;
      t2 = _this.$this;
      itemPos = t1.bestWhere$1(new L.Stage_placeDrops__closure(t2));
      if (itemPos == null) {
        t1 = t1.get$reachable();
        t1.toString;
        t1 = H.TakeIterable_TakeIterable(t1, 10, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        allowed = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        t1 = allowed.length;
        if (t1 !== 0) {
          t3 = $.$get$rng();
          t3.toString;
          H.assertSubtype(allowed, "$isList", [L.Vec], "$asList");
          t1 = t3.range$1(t1);
          if (t1 < 0 || t1 >= allowed.length)
            return H.ioore(allowed, t1);
          itemPos = allowed[t1];
        } else
          itemPos = _this.pos;
      }
      t2.addItem$2(item, itemPos);
    },
    $signature: 88
  };
  L.Stage_placeDrops__closure.prototype = {
    call$1: function(pos) {
      var t1;
      if ($.$get$rng().range$1(5) === 0)
        return true;
      t1 = this.$this;
      return t1._actorsByTile.$index(0, pos) == null && !t1._itemsByTile.containsKey$1(pos);
    },
    $signature: 4
  };
  L.Stage_addItem_closure.prototype = {
    call$0: function() {
      return O.Inventory$(C.ItemLocation_46y, null);
    },
    $signature: 89
  };
  Q.Motility.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof Q.Motility)
        return this._bitMask === other._bitMask;
      return false;
    },
    $or: function(_, other) {
      return new Q.Motility(this._bitMask | other._bitMask);
    },
    toString$0: function(_) {
      return C.JSInt_methods.toString$0(this._bitMask);
    }
  };
  Q.TilePortal.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.TileType.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Tile.prototype = {
    updateExplored$1$force: function(force) {
      var t1, _this = this;
      if (force !== true)
        t1 = !_this._isOccluded && _this.illumination - _this._fallOff > 0;
      else
        t1 = true;
      if (t1 && !_this._isExplored)
        return _this._isExplored = true;
      return false;
    }
  };
  D.Display.prototype = {
    setGlyph$3: function(x, y, glyph) {
      var t1 = this._glyphs,
        t2 = t1.bounds.size;
      if (x >= t2.x)
        return;
      if (y >= t2.y)
        return;
      t2 = this._changedGlyphs;
      if (!J.$eq$(t1.$get$2(x, y), glyph))
        t2.$set$3(x, y, glyph);
      else
        t2.$set$3(x, y, null);
    },
    render$1: function(renderGlyph) {
      var t1, t2, t3, t4, t5, t6, t7, t8, y, t9, t10, x, t11, glyph;
      H.functionTypeCheck(renderGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      for (t1 = this._glyphs, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = H.getTypeArgumentByIndex(t1, 0), t1 = t1._elements, t5 = this._changedGlyphs, t6 = H.getTypeArgumentByIndex(t5, 0), t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length, y = 0; y < t3; ++y)
        for (t9 = y * t2, t10 = y * t5, x = 0; x < t2; ++x) {
          t11 = t10 + x;
          if (t11 < 0 || t11 >= t8)
            return H.ioore(t7, t11);
          glyph = t7[t11];
          if (glyph == null)
            continue;
          renderGlyph.call$3(x, y, glyph);
          C.JSArray_methods.$indexSet(t1, t9 + x, H.assertSubtypeOfRuntimeType(glyph, t4));
          C.JSArray_methods.$indexSet(t7, t11, H.assertSubtypeOfRuntimeType(null, t6));
        }
    }
  };
  L.Color.prototype = {
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this.r) ^ C.JSInt_methods.get$hashCode(this.g) ^ C.JSInt_methods.get$hashCode(this.b);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.Color)
        return this.r === other.r && this.g === other.g && this.b === other.b;
      return false;
    },
    blend$2: function(other, fractionOther) {
      var fractionThis = 1 - fractionOther;
      return new L.Color(C.JSNumber_methods.toInt$0(this.r * fractionThis + other.r * fractionOther), C.JSNumber_methods.toInt$0(this.g * fractionThis + other.g * fractionOther), C.JSNumber_methods.toInt$0(this.b * fractionThis + other.b * fractionOther));
    }
  };
  L.Glyph.prototype = {
    get$hashCode: function(_) {
      var t1 = this.fore,
        t2 = this.back;
      return J.get$hashCode$(this.char) ^ t1.get$hashCode(t1) ^ t2.get$hashCode(t2);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.Glyph)
        return this.char == other.char && this.fore.$eq(0, other.fore) && this.back.$eq(0, other.back);
      return false;
    }
  };
  S.RetroTerminal.prototype = {
    RetroTerminal$_$6: function(_display, _charWidth, _charHeight, canvas, _font, _scale) {
      var t1 = W.Event;
      W._EventStreamSubscription$(this._font, "load", H.functionTypeCheck(new S.RetroTerminal$__closure(this), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    render$0: function() {
      if (!this._imageLoaded)
        return;
      this._display.render$1(new S.RetroTerminal_render_closure(this));
    },
    _getColorFont$1: function(color) {
      var t2, t3, tint, context,
        t1 = this._fontColorCache,
        cached = t1.$index(0, color);
      if (cached != null)
        return cached;
      t2 = this._font;
      t3 = t2.width;
      tint = W.CanvasElement_CanvasElement(t2.height, t3);
      context = tint.getContext("2d");
      context.drawImage(t2, 0, 0);
      context.globalCompositeOperation = "source-atop";
      context.fillStyle = "rgb(" + color.r + ", " + color.g + ", " + color.b + ")";
      context.fillRect(0, 0, t2.width, t2.height);
      t1.$indexSet(0, color, tint);
      return tint;
    }
  };
  S.RetroTerminal$__closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1._imageLoaded = true;
      t1.render$0();
    },
    $signature: 16
  };
  S.RetroTerminal_render_closure.prototype = {
    call$3: function(x, y, glyph) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, color,
        char = glyph.char,
        char0 = C.Map_6xa1A.$index(0, char);
      char = char0 == null ? char : char0;
      if (typeof char !== "number")
        return char.$mod();
      t1 = C.JSInt_methods.$mod(char, 32);
      t2 = this.$this;
      t3 = t2._charWidth;
      t4 = t2._charHeight;
      t5 = t2._context;
      t6 = glyph.back;
      t5.fillStyle = "rgb(" + t6.r + ", " + t6.g + ", " + t6.b + ")";
      t6 = t2._scale;
      t7 = x * t3 * t6;
      t8 = y * t4 * t6;
      t9 = t3 * t6;
      t6 = t4 * t6;
      t5.fillRect(t7, t8, t9, t6);
      if (char === 0 || char === 32)
        return;
      color = t2._getColorFont$1(glyph.fore);
      t5.imageSmoothingEnabled = false;
      t5.drawImage(color, t1 * t3, (char / 32 | 0) * t4, t3, t4, t7, t8, t9, t6);
    },
    $signature: 91
  };
  K.Terminal.prototype = {};
  K.RenderableTerminal.prototype = {};
  M.Array2D.prototype = {
    $index: function(_, pos) {
      var t1 = this._elements,
        t2 = pos.y * this.bounds.size.x + pos.x;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    $indexSet: function(_, pos, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      C.JSArray_methods.$indexSet(this._elements, pos.y * this.bounds.size.x + pos.x, value);
    },
    $get$2: function(x, y) {
      var t1 = this._elements,
        t2 = y * this.bounds.size.x + x;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    $set$3: function(x, y, value) {
      C.JSArray_methods.$indexSet(this._elements, y * this.bounds.size.x + x, H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
    },
    generate$1: function(generator) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      if (H.functionTypeTest(generator, {func: 1, ret: t1}))
        for (t2 = _this.bounds, t3 = X.RectIterator$(t2), t4 = _this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          C.JSArray_methods.$indexSet(t4, t3._y * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$0(), t1));
        }
      else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [L.Vec]}))
        for (t2 = _this.bounds, t3 = X.RectIterator$(t2), t4 = _this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          t6 = t3._y;
          C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$1(new L.Vec(t5, t6)), t1));
        }
      else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [P.int, P.int]}))
        for (t2 = _this.bounds, t3 = X.RectIterator$(t2), t4 = _this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          t6 = t3._y;
          C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$2(t5, t6), t1));
        }
      else
        throw H.wrapException(P.ArgumentError$("Generator must take zero arguments, one Vec, or two ints."));
    },
    get$iterator: function(_) {
      var t1 = this._elements;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    }
  };
  Z.Direction.prototype = {
    get$rotateLeft45: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_m1_m1;
        case C.Direction_1_m1:
          return C.Direction_0_m1;
        case C.Direction_1_0:
          return C.Direction_1_m1;
        case C.Direction_1_1:
          return C.Direction_1_0;
        case C.Direction_0_1:
          return C.Direction_1_1;
        case C.Direction_m1_1:
          return C.Direction_0_1;
        case C.Direction_m1_0:
          return C.Direction_m1_1;
        case C.Direction_m1_m1:
          return C.Direction_m1_0;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateRight45: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_1_m1;
        case C.Direction_1_m1:
          return C.Direction_1_0;
        case C.Direction_1_0:
          return C.Direction_1_1;
        case C.Direction_1_1:
          return C.Direction_0_1;
        case C.Direction_0_1:
          return C.Direction_m1_1;
        case C.Direction_m1_1:
          return C.Direction_m1_0;
        case C.Direction_m1_0:
          return C.Direction_m1_m1;
        case C.Direction_m1_m1:
          return C.Direction_0_m1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateLeft90: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_m1_0;
        case C.Direction_1_m1:
          return C.Direction_m1_m1;
        case C.Direction_1_0:
          return C.Direction_0_m1;
        case C.Direction_1_1:
          return C.Direction_1_m1;
        case C.Direction_0_1:
          return C.Direction_1_0;
        case C.Direction_m1_1:
          return C.Direction_1_1;
        case C.Direction_m1_0:
          return C.Direction_0_1;
        case C.Direction_m1_m1:
          return C.Direction_m1_1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateRight90: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_1_0;
        case C.Direction_1_m1:
          return C.Direction_1_1;
        case C.Direction_1_0:
          return C.Direction_0_1;
        case C.Direction_1_1:
          return C.Direction_m1_1;
        case C.Direction_0_1:
          return C.Direction_m1_0;
        case C.Direction_m1_1:
          return C.Direction_m1_m1;
        case C.Direction_m1_0:
          return C.Direction_0_m1;
        case C.Direction_m1_m1:
          return C.Direction_1_m1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotate180: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_0_1;
        case C.Direction_1_m1:
          return C.Direction_m1_1;
        case C.Direction_1_0:
          return C.Direction_m1_0;
        case C.Direction_1_1:
          return C.Direction_m1_m1;
        case C.Direction_0_1:
          return C.Direction_0_m1;
        case C.Direction_m1_1:
          return C.Direction_1_m1;
        case C.Direction_m1_0:
          return C.Direction_1_0;
        case C.Direction_m1_m1:
          return C.Direction_1_1;
      }
      throw H.wrapException("unreachable");
    },
    toString$0: function(_) {
      switch (this) {
        case C.Direction_0_0:
          return "none";
        case C.Direction_0_m1:
          return "n";
        case C.Direction_1_m1:
          return "ne";
        case C.Direction_1_0:
          return "e";
        case C.Direction_1_1:
          return "se";
        case C.Direction_0_1:
          return "s";
        case C.Direction_m1_1:
          return "sw";
        case C.Direction_m1_0:
          return "w";
        case C.Direction_m1_m1:
          return "nw";
      }
      throw H.wrapException("unreachable");
    },
    $isVec: 1
  };
  X.Rect.prototype = {
    get$left: function(_) {
      var t1 = this.pos.x;
      return Math.min(t1, t1 + this.size.x);
    },
    get$top: function(_) {
      var t1 = this.pos.y;
      return Math.min(t1, t1 + this.size.y);
    },
    get$right: function(_) {
      var t1 = this.pos.x;
      return Math.max(t1, t1 + this.size.x);
    },
    get$bottom: function(_) {
      var t1 = this.pos.y;
      return Math.max(t1, t1 + this.size.y);
    },
    get$center: function() {
      var _this = this;
      return new L.Vec(C.JSInt_methods._tdivFast$1(_this.get$left(_this) + _this.get$right(_this), 2), C.JSInt_methods._tdivFast$1(_this.get$top(_this) + _this.get$bottom(_this), 2));
    },
    toString$0: function(_) {
      return "(" + this.pos.toString$0(0) + ")-(" + this.size.toString$0(0) + ")";
    },
    inflate$1: function(distance) {
      var t1 = this.pos,
        t2 = this.size,
        t3 = distance * 2;
      return new X.Rect(new L.Vec(t1.x - distance, t1.y - distance), new L.Vec(t2.x + t3, t2.y + t3));
    },
    contains$1: function(_, object) {
      var t1, t2, t3, t4;
      if (!J.getInterceptor$(object).$isVec)
        return false;
      t1 = object.x;
      t2 = this.pos;
      t3 = t2.x;
      if (t1 < t3)
        return false;
      t4 = this.size;
      if (t1 >= t3 + t4.x)
        return false;
      t1 = object.y;
      t2 = t2.y;
      if (t1 < t2)
        return false;
      if (t1 >= t2 + t4.y)
        return false;
      return true;
    },
    get$iterator: function(_) {
      var t1 = new X.RectIterator(this),
        t2 = this.pos;
      t1._x = t2.x - 1;
      t1._y = t2.y;
      return t1;
    },
    trace$0: function() {
      var result, x, t4, t5, y, _this = this,
        t1 = _this.size,
        t2 = t1.x,
        t3 = t2 > 1;
      if (t3 && t1.y > 1) {
        result = H.setRuntimeTypeInfo([], [L.Vec]);
        for (x = _this.get$left(_this), t3 = _this.pos, t4 = t3.x, t2 = t4 + t2, t5 = Math.max(t4, t2), t3 = t3.y, t1 = t3 + t1.y; x < t5; ++x) {
          C.JSArray_methods.add$1(result, new L.Vec(x, Math.min(t3, t1)));
          C.JSArray_methods.add$1(result, new L.Vec(x, Math.max(t3, t1) - 1));
        }
        for (y = _this.get$top(_this) + 1, t1 = Math.max(t3, t1); y < t1 - 1; ++y) {
          C.JSArray_methods.add$1(result, new L.Vec(Math.min(t4, t2), y));
          C.JSArray_methods.add$1(result, new L.Vec(t5 - 1, y));
        }
        return result;
      } else if (t3 && t1.y === 1)
        return new X.Rect(new L.Vec(_this.get$left(_this), _this.get$top(_this)), new L.Vec(t2, 1));
      else {
        t1 = t1.y;
        if (t1 >= 1 && t2 === 1)
          return new X.Rect(new L.Vec(_this.get$left(_this), _this.get$top(_this)), new L.Vec(1, t1));
      }
      return C.List_empty0;
    },
    $asIterable: function() {
      return [L.Vec];
    }
  };
  X.RectIterator.prototype = {
    get$current: function() {
      return new L.Vec(this._x, this._y);
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._rect;
      if (++_this._x >= t1.get$right(t1)) {
        _this._x = t1.pos.x;
        ++_this._y;
      }
      return _this._y < t1.get$bottom(t1);
    },
    $isIterator: 1,
    $asIterator: function() {
      return [L.Vec];
    }
  };
  N.Rng.prototype = {
    range$2: function(minOrMax, max) {
      if (max == null) {
        max = minOrMax;
        minOrMax = 0;
      }
      return this._random.nextInt$1(max - minOrMax) + minOrMax;
    },
    range$1: function(minOrMax) {
      return this.range$2(minOrMax, null);
    },
    inclusive$2: function(minOrMax, max) {
      var t1;
      if (max == null) {
        max = minOrMax;
        minOrMax = 0;
      }
      if (typeof max !== "number")
        return max.$add();
      t1 = this._random;
      if (typeof minOrMax !== "number")
        return H.iae(minOrMax);
      return t1.nextInt$1(max + 1 - minOrMax) + minOrMax;
    },
    inclusive$1: function(minOrMax) {
      return this.inclusive$2(minOrMax, null);
    },
    float$2: function(_, minOrMax, max) {
      var t1 = this._random;
      if (max == null)
        return t1.nextDouble$0() * minOrMax;
      else
        return t1.nextDouble$0() * (max - minOrMax) + minOrMax;
    },
    float$1: function($receiver, minOrMax) {
      return this.float$2($receiver, minOrMax, null);
    },
    round$1: function(_, value) {
      var result = C.JSNumber_methods.floor$0(value);
      return this.float$1(0, 1) < value - result ? result + 1 : result;
    },
    take$1$1: function(_, items, $T) {
      var index, result;
      H.assertSubtype(items, "$isList", [$T], "$asList");
      index = $.$get$rng().range$1(items.length);
      if (index < 0 || index >= items.length)
        return H.ioore(items, index);
      result = items[index];
      C.JSArray_methods.$indexSet(items, index, C.JSArray_methods.get$last(items));
      C.JSArray_methods.removeLast$0(items);
      return result;
    },
    triangleInt$2: function(center, range) {
      var x = this.inclusive$1(range);
      if (x <= this.inclusive$1(range))
        return center + x;
      else
        return center - range - 1 + x;
    },
    taper$2: function(start, chanceOfIncrement) {
      while (true) {
        if (!(this._random.nextInt$1(chanceOfIncrement - 0) === 0))
          break;
        ++start;
      }
      return start;
    }
  };
  L.VecBase.prototype = {
    get$kingLength: function() {
      return Math.max(Math.abs(this.x), Math.abs(this.y));
    },
    get$lengthSquared: function() {
      var t1 = this.x,
        t2 = this.y;
      return t1 * t1 + t2 * t2;
    },
    get$length: function(_) {
      return Math.sqrt(this.get$lengthSquared());
    },
    get$neighbors: function() {
      var _i,
        result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (_i = 0; _i < 8; ++_i)
        C.JSArray_methods.add$1(result, this.$add(0, C.List_slV[_i]));
      return result;
    },
    get$cardinalNeighbors: function() {
      var _i,
        result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (_i = 0; _i < 4; ++_i)
        C.JSArray_methods.add$1(result, this.$add(0, C.List_aAW[_i]));
      return result;
    },
    $add: function(_, other) {
      if (other instanceof L.VecBase)
        return new L.Vec(this.x + other.x, this.y + other.y);
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $sub: function(_, other) {
      if (other instanceof L.VecBase)
        return new L.Vec(this.x - other.x, this.y - other.y);
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    toString$0: function(_) {
      return "" + this.x + ", " + this.y;
    }
  };
  L.Vec.prototype = {
    get$hashCode: function(_) {
      var b,
        t1 = this.x,
        a = t1 >= 0 ? 2 * t1 : -2 * t1 - 1;
      t1 = this.y;
      b = t1 >= 0 ? 2 * t1 : -2 * t1 - 1;
      t1 = a + b;
      return C.JSInt_methods._tdivFast$1(t1 * (t1 + 1), 2) + b;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.VecBase)
        return this.x === other.x && this.y === other.y;
      return false;
    }
  };
  Q.main_closure.prototype = {
    call$1: function($event) {
      Q.generate();
    },
    $signature: 16
  };
  Q.main_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isMouseEvent");
      Q.generate();
    },
    $signature: 8
  };
  Q.main_closure1.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isMouseEvent");
      Q.generate();
    },
    $signature: 8
  };
  Q.main_closure2.prototype = {
    call$1: function($event) {
      var t1, t2;
      H.interceptedTypeCheck($event, "$isMouseEvent");
      t1 = J.getInterceptor$x($event);
      t2 = t1.get$offset($event).x;
      if (typeof t2 !== "number")
        return t2.$tdiv();
      t2 = C.JSNumber_methods._tdivFast$1(t2, 8);
      t1 = t1.get$offset($event).y;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      Q.hover(new L.Vec(t2, C.JSNumber_methods._tdivFast$1(t1, 8)));
    },
    $signature: 8
  };
  Q.generate_closure.prototype = {
    call$1: function(attack) {
      H.interceptedTypeCheck(attack, "$isAttack");
      return H.S(O.Log_conjugate(attack.verb, this.breed.pronoun)) + " (" + attack.damage + ")";
    },
    $signature: 93
  };
  Q.render_closure.prototype = {
    call$0: function() {
      return $.hues.get$length($.hues) * 49;
    },
    $signature: 7
  };
  T.Histogram.prototype = {
    add$1: function(_, object) {
      var t1, t2;
      H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0));
      t1 = this._counts;
      t1.putIfAbsent$2(object, new T.Histogram_add_closure());
      t2 = t1.$index(0, object);
      if (typeof t2 !== "number")
        return t2.$add();
      ++t2;
      t1.$indexSet(0, object, t2);
      return t2;
    },
    count$1: function(object) {
      var t1;
      H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0));
      t1 = this._counts;
      if (!t1.containsKey$1(object))
        return 0;
      return t1.$index(0, object);
    },
    descending$0: function() {
      var t1 = this._counts.get$keys(),
        objects = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      C.JSArray_methods.sort$1(objects, new T.Histogram_descending_closure(this));
      return objects;
    }
  };
  T.Histogram_add_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 7
  };
  T.Histogram_descending_closure.prototype = {
    call$2: function(a, b) {
      var t1 = this.$this,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtypeOfRuntimeType(a, t2);
      t1 = t1._counts;
      return J.compareTo$1$ns(t1.$index(0, H.assertSubtypeOfRuntimeType(b, t2)), t1.$index(0, a));
    },
    $signature: function() {
      var t1 = H.getTypeArgumentByIndex(this.$this, 0);
      return {func: 1, ret: P.int, args: [t1, t1]};
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = W.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance = hunkHelpers.installInstanceTearOff,
      _static = hunkHelpers.installStaticTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 94);
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 33);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 5);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 5);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 5);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 90, 0);
    _instance(P._SyncCompleter.prototype, "get$complete", 1, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 75, 0);
    _static_1(P, "collection_MapBase__id$closure", "MapBase__id", 6);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 15, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 15, 0);
    _static_1(T, "furnishing_builder___mirrorCharBoth$closure", "_mirrorCharBoth", 3);
    _static_1(T, "furnishing_builder___mirrorCharHorizontal$closure", "_mirrorCharHorizontal", 3);
    _static_1(T, "furnishing_builder___mirrorCharVertical$closure", "_mirrorCharVertical", 3);
    _instance(R._ItemBuilder.prototype, "get$depth", 0, 1, null, ["call$2$to", "call$1"], ["depth$2$to", "depth$1"], 18, 0);
    _instance(R._AffixBuilder.prototype, "get$depth", 0, 1, null, ["call$2$to", "call$1"], ["depth$2$to", "depth$1"], 18, 0);
    _static_1(Q, "skills_Skills_find$closure", "Skills_find", 97);
    _static_1(Z, "tiles___closeDoor$closure", "_closeDoor", 2);
    _static_1(Z, "tiles___openDoor$closure", "_openDoor", 2);
    _static_1(Z, "tiles___closeSquareDoor$closure", "_closeSquareDoor", 2);
    _static_1(Z, "tiles___openSquareDoor$closure", "_openSquareDoor", 2);
    _static_1(Z, "tiles___closeBarredDoor$closure", "_closeBarredDoor", 2);
    _static_1(Z, "tiles___openBarredDoor$closure", "_openBarredDoor", 2);
    _instance_1_i(Y.ResourceSet.prototype, "get$find", "find$1", function() {
      return H.computeSignature(function(T) {
        return {func: 1, ret: T, args: [P.String]};
      }, this.$receiver, "ResourceSet");
    });
    _instance_1_u(G.Hero.prototype, "get$refreshSkill", "refreshSkill$1", 74);
    var _;
    _instance_2_u(_ = L.Affix.prototype, "get$resist", "resist$2", 80);
    _instance_2_u(_, "get$setStatBonus", "setStatBonus$2", 81);
    _instance(O.Inventory.prototype, "get$tryAdd", 0, 1, null, ["call$2$wasUnequipped", "call$1"], ["tryAdd$2$wasUnequipped", "tryAdd$1"], 84, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, P.Iterator, H.UnmodifiableListMixin, H.ConstantMap, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H.Closure, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H.StringMatch, P._TimerImpl, P._AsyncAwaitCompleter, P._IterationMarker, P._SyncStarIterator, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P._StreamIterator, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.ListMixin, P.Queue, P._ListQueueIterator, P.bool, P.DateTime, P.num, P.Duration, P.StackOverflowError, P._Exception, P.FormatException, P.Function, P.List, P.Map, P.MapEntry, P.Null, P.StackTrace, P.String, P.StringBuffer, W.CssStyleDeclarationBase, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W._DOMWindowCrossFrame, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P._JSRandom, P._Random, P.Point, T.GameContent, V.Action, T.DetectType, R.Missive, Y.Decor, S.Cell, T.Symmetry, R._BaseBuilder, R._AffixBuilder, X._ItemDrop, X._TagDrop, X._PercentDrop, X._AllOfDrop, X._OneOfDrop, X._RepeatDrop, F.FloorDrop, R._BaseBuilder0, B._BreedSpawn, B._TagSpawn, B._RepeatSpawn, B._AllOfSpawn, O.Move, M.Skill, X.Region, X.Architect, X._Path, X.Architecture, Y.Pathfinder, F.ArchitecturalStyle, S.Decorator, S.DensityMap, Z.Junction, Z.TakeFrom, Z.JunctionSet, Q.Painter, Q.PaintStyle, D.Reachability, D._FillStep, G._RiverPoint, R.RoomTile, D.Town, Z._TileBuilder, R.DestroyActionMixin, S.Actor, U.Attack, U.Hit, U.Defense, E.Condition, G.Element0, Y.Energy, D.Game, D.Event0, O.Log, O.Noun, O.Pronoun, O.LogType, O.Message, Y.ResourceSet, Y._Resource, Y._Tag, Y._QueryKey, Y._ResourceQuery, T.HeroClass, K.HeroSave, V.Lore, N.Race, N.RaceStats, M.UsableSkill, M.TargetSkill, M.SkillSet, D.Property, D.Stat, L.Affix, O.ItemLocation, O.ItemCollection, O.AddItemResult, R.Item, L.Drop, L.ItemUse, L.ItemType, O.Shop, B.BreedRef, B.Breed, B.SpawnLocation, B.Spawn, B.BreedFlags, M.MonsterState, B.BucketQueue, N.Flow, B.Fov, B._Shadow, F.Lighting, Y.Path, L.Stage, Q.Motility, Q.TilePortal, Q.TileType, Q.Tile, D.Display, L.Color, L.Glyph, K.Terminal, L.VecBase, X.RectIterator, N.Rng, T.Histogram]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, W.EventTarget, W.CanvasRenderingContext2D, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DomError, W.DomException, W.DomRectReadOnly, W.Event, W.Location, W.NavigatorUserMediaError, W._NodeList_Interceptor_ListMixin, W.OverconstrainedError, W.__NamedNodeMap_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, W._ChildNodeListLazy]);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.TakeIterable, P.IterableBase]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P.ListQueue]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.GeneralConstantMap, H.ConstantMap);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.Closure, [H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._AsyncAwaitCompleter_complete_closure, P._AsyncAwaitCompleter_completeError_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.MapMixin_entries_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W.Element_Element$html_closure, W.Window_animationFrame_closure, W._EventStreamSubscription_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, T.GameContent_createHero_closure, T.furnishing_closure, A.Elements_closure8, A.Elements_closure6, A.Elements_closure7, A.Elements_closure4, A.Elements_closure5, A.Elements_closure2, A.Elements_closure3, A.Elements_closure1, A.Elements_closure, A.Elements_closure0, R._ItemBuilder_food_closure, R._ItemBuilder_detection_closure, R._ItemBuilder_perception_closure, R._ItemBuilder_resistSalve_closure, R._ItemBuilder_mapping_closure, R._ItemBuilder_haste_closure, R._ItemBuilder_teleport_closure, R._ItemBuilder_heal_closure, R._ItemBuilder_ball_closure, R._ItemBuilder_ball_closure0, R._ItemBuilder_flow_closure, R._ItemBuilder_flow_closure0, R._ItemBuilder_lightSource_closure, X._OneOfDrop_closure, R.shop_closure, E.dragons_closure, Q.Skills_closure, F.ArchitecturalStyle__initialize_addStyle, F.ArchitecturalStyle__initialize_closure, F.ArchitecturalStyle__initialize_closure0, F.ArchitecturalStyle__initialize_closure1, F.ArchitecturalStyle__initialize_closure2, F.ArchitecturalStyle__initialize_closure3, F.ArchitecturalStyle__initialize_pit, F.ArchitecturalStyle__initialize_pit_closure, F.ArchitecturalStyle__initialize_keep, F.ArchitecturalStyle__initialize_keep_closure, S.Decorator_decorate_closure, S.Decorator__spawnMonsters_closure, S.Decorator__spawnMonster_spawn, S.Decorator__spawnMonster_closure, S.Decorator__spawnMonster_closure0, Z.Keep_spawnMonsters_closure, Z.Keep__regionContains_diagonal, Z.Keep__tryAttachRoom_closure, R.Room__calculateEdges_isFloor, Z.Tiles_closure0, Z.Tiles_closure1, Z.Tiles_closure, S.Actor_closure, D.Game_generate_closure, K.hashPoint_hashInt, Y.ResourceSet_hasTag_closure, Y.ResourceSet_getTags_closure, Y.ResourceSet_tryChoose_closure, Y.ResourceSet_tryChoose_closure0, Y.ResourceSet_tryChooseMatching_closure, Y.ResourceSet_tryChooseMatching_closure0, Y.ResourceSet_tryChooseMatching__closure, G.Hero_refreshProperties_closure, G.Hero_refreshProperties_closure0, V.Lore_seeBreed_closure, N.RaceStats_lerp, M.SkillSet_acquired_closure, D.StatBase_refresh_closure, E.Equipment_weapons_closure, E.Equipment_length_closure, E.Equipment_iterator_closure, N.Flow__processNext_processNeighbor, F.Lighting__lightWalls_checkNeighbor, F.Lighting__process_checkNeighbor, L.Stage_closure, L.Stage_placeDrops_closure, L.Stage_placeDrops__closure, L.Stage_addItem_closure, S.RetroTerminal$__closure, S.RetroTerminal_render_closure, Q.main_closure, Q.main_closure0, Q.main_closure1, Q.main_closure2, Q.generate_closure, Q.render_closure, T.Histogram_add_closure, T.Histogram_descending_closure]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, W._AttributeMap]);
    _inheritMany(P.IterableBase, [P._SyncStarIterable, U.VecSet, E._Equipment_IterableBase_ItemCollection, M.Array2D, X.Rect]);
    _inherit(P._SyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.Node, W.Window]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W._Attr]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.IFrameElement, W.ImageElement, W.InputElement, W.MapElement, W.MetaElement, W.ObjectElement, W.OutputElement, W.ParamElement, W.SelectElement, W.SlotElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inheritMany(W.Event, [W.UIEvent, W.SpeechSynthesisEvent]);
    _inherit(W.MouseEvent, W.UIEvent);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inherit(P.ScriptElement, P.SvgElement);
    _inheritMany(V.Action, [E.ConditionAction, T.DetectAction, X.EatAction, G._BurnActorAction_Action_DestroyActionMixin, G._BurnFloorAction_Action_DestroyActionMixin, G._FreezeFloorAction_Action_DestroyActionMixin, G._PoisonFloorAction_Action_DestroyActionMixin, G.WindAction, G.LightFloorAction, N.FlowSelfAction, N.FlowFromAction, O.HealAction, F.IlluminateSelfAction, Q.MappingAction, Q.PerceiveAction, G.RingSelfAction, G.RingFromAction, S.TeleportAction, Q._OpenTileAction, B.OpenDoorAction, B.CloseDoorAction]);
    _inheritMany(E.ConditionAction, [E.HasteAction, E._FreezeActorAction_ConditionAction_DestroyActionMixin, E.PoisonAction, E.BlindAction, E.DazzleAction, E.ResistAction]);
    _inherit(E.FreezeActorAction, E._FreezeActorAction_ConditionAction_DestroyActionMixin);
    _inherit(G.BurnActorAction, G._BurnActorAction_Action_DestroyActionMixin);
    _inherit(G.BurnFloorAction, G._BurnFloorAction_Action_DestroyActionMixin);
    _inherit(G.FreezeFloorAction, G._FreezeFloorAction_Action_DestroyActionMixin);
    _inherit(G.PoisonFloorAction, G._PoisonFloorAction_Action_DestroyActionMixin);
    _inheritMany(Q._OpenTileAction, [Q.OpenBarrelAction, Q.OpenChestAction]);
    _inherit(S.Furnishing, Y.Decor);
    _inheritMany(R._BaseBuilder, [R._CategoryBuilder, R._ItemBuilder]);
    _inheritMany(R._BaseBuilder0, [R._FamilyBuilder, R._BreedBuilder]);
    _inheritMany(O.Move, [Q.AmputateMove, O.RangedMove, Y.ConeMove, X.HasteMove, O.HealMove, U.HowlMove, R.MissiveMove, L.SpawnMove, S.TeleportMove]);
    _inherit(O.BoltMove, O.RangedMove);
    _inheritMany(M.Skill, [M.Discipline, M._Spell_Skill_UsableSkill]);
    _inheritMany(M.Discipline, [X._Archery_Discipline_TargetSkill, S.MasteryDiscipline, M.BattleHardening, Y.DualWield, A.SlayDiscipline]);
    _inherit(X.Archery, X._Archery_Discipline_TargetSkill);
    _inheritMany(S.MasteryDiscipline, [D.AxeMastery, A.ClubMastery, Z.SpearMastery, G.Swordfighting, O._WhipMastery_MasteryDiscipline_TargetSkill]);
    _inherit(O.WhipMastery, O._WhipMastery_MasteryDiscipline_TargetSkill);
    _inherit(M.Spell, M._Spell_Skill_UsableSkill);
    _inheritMany(M.Spell, [K.Flee, K.Escape, K.Disappear, D.SenseItems, L._Icicle_Spell_TargetSkill, L._BrilliantBeam_Spell_TargetSkill, L.Windstorm, L._FireBarrier_Spell_TargetSkill, L.TidalWave]);
    _inherit(L.Icicle, L._Icicle_Spell_TargetSkill);
    _inherit(L.BrilliantBeam, L._BrilliantBeam_Spell_TargetSkill);
    _inherit(L.FireBarrier, L._FireBarrier_Spell_TargetSkill);
    _inherit(X._LengthPathfinder, Y.Pathfinder);
    _inheritMany(X.Architecture, [D.Catacomb, Q.Cavern, Q.Dungeon, Z.Keep, F.Lake, A.Pit, G.River]);
    _inheritMany(E.Condition, [E.HasteCondition, E.ColdCondition, E.PoisonCondition, E.BlindnessCondition, E.ResistCondition, E.PerceiveCondition]);
    _inheritMany(S.Actor, [G.Hero, B.Monster]);
    _inherit(D.StatBase, D.Property);
    _inheritMany(D.StatBase, [D.Strength, D.Agility, D.Fortitude, D.Intellect, D.Will]);
    _inherit(E.Equipment, E._Equipment_IterableBase_ItemCollection);
    _inherit(O._Inventory_IterableMixin_ItemCollection, P.IterableMixin);
    _inherit(O.Inventory, O._Inventory_IterableMixin_ItemCollection);
    _inherit(M.AsleepState, M.MonsterState);
    _inherit(N.MotilityFlow, N.Flow);
    _inherit(K.RenderableTerminal, K.Terminal);
    _inherit(S.RetroTerminal, K.RenderableTerminal);
    _inheritMany(L.VecBase, [Z.Direction, L.Vec]);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(E._FreezeActorAction_ConditionAction_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._BurnActorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._BurnFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._FreezeFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._PoisonFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(X._Archery_Discipline_TargetSkill, M.TargetSkill);
    _mixin(O._WhipMastery_MasteryDiscipline_TargetSkill, M.TargetSkill);
    _mixin(L._BrilliantBeam_Spell_TargetSkill, M.TargetSkill);
    _mixin(L._FireBarrier_Spell_TargetSkill, M.TargetSkill);
    _mixin(L._Icicle_Spell_TargetSkill, M.TargetSkill);
    _mixin(M._Spell_Skill_UsableSkill, M.UsableSkill);
    _mixin(E._Equipment_IterableBase_ItemCollection, O.ItemCollection);
    _mixin(O._Inventory_IterableMixin_ItemCollection, O.ItemCollection);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: V.Action, args: [L.Vec]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.bool, args: [L.Vec]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, args: [,]}, {func: 1, ret: P.int}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.bool, args: [R.Item]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.Null, args: [L.Vec]}, {func: 1, ret: P.Null, args: [P.String], named: {end: P.int, start: P.int}}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: -1, args: [P.int], named: {to: P.int}}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [P.int]}, {func: 1, args: [W.Event]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: P.Null, args: [P.String, P.int]}, {func: 1, ret: G.WindAction, args: [P.int]}, {func: 1, ret: G.BurnActorAction, args: [P.int]}, {func: 1, ret: G.BurnFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.FreezeActorAction, args: [P.int]}, {func: 1, ret: G.FreezeFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.PoisonAction, args: [P.int]}, {func: 1, ret: G.PoisonFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.BlindAction, args: [P.int]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: G.LightFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: P.Null, args: [P.num]}, {func: 1, ret: X.EatAction}, {func: 1, ret: T.DetectAction}, {func: 1, ret: Q.PerceiveAction}, {func: 1, ret: E.ResistAction}, {func: 1, ret: Q.MappingAction}, {func: 1, ret: E.HasteAction}, {func: 1, ret: S.TeleportAction}, {func: 1, ret: O.HealAction}, {func: 1, ret: G.RingSelfAction}, {func: 1, ret: G.RingFromAction, args: [L.Vec]}, {func: 1, ret: N.FlowSelfAction}, {func: 1, ret: N.FlowFromAction, args: [L.Vec]}, {func: 1, ret: F.IlluminateSelfAction}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: P.Null, args: [P.String, P.double]}, {func: 1, ret: P.Null, args: [P.String, [P.List, P.Object]]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: P.Null, args: [P.String], named: {canFill: P.bool, create: {func: 1, ret: X.Architecture}, decor: P.String, decorDensity: P.double, end: P.int, endFrequency: P.double, itemDensity: P.double, monsterDensity: P.double, monsters: P.String, start: P.int, startFrequency: P.double}}, {func: 1, ret: Q.Dungeon}, {func: 1, ret: D.Catacomb}, {func: 1, ret: Q.Cavern}, {func: 1, ret: F.Lake}, {func: 1, ret: G.River}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: A.Pit}, {func: 1, ret: Z.Keep}, {func: 1, ret: [P.List, L.Vec]}, {func: 1, ret: P.Null, args: [X.Architecture, [P.List, L.Vec]]}, {func: 1, ret: P.Null, args: [B.Breed, L.Vec]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.double, args: [P.int,,]}, {func: 1, ret: P.bool, args: [Z.Direction]}, {func: 1, ret: Q.OpenChestAction, args: [L.Vec]}, {func: 1, ret: Q.OpenBarrelAction, args: [L.Vec]}, {func: 1, ret: Q.TileType, args: [Z._TileBuilder, P.int]}, {func: 1, ret: -1, args: [E.Condition]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: -1, args: [M.Skill]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: P.Null, args: [P.double]}, {func: 1, args: [P.String]}, {func: 1, ret: P.double, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [M.Skill]}, {func: 1, ret: -1, args: [G.Element0, P.int]}, {func: 1, ret: -1, args: [D.Stat, P.int]}, {func: 1, ret: E.DazzleAction, args: [P.int]}, {func: 1, ret: P.int, args: [P.int, R.Item]}, {func: 1, ret: O.AddItemResult, args: [R.Item], named: {wasUnequipped: P.bool}}, {func: 1, ret: P.Null, args: [Z.Direction, P.bool]}, {func: 1, ret: P.Null, args: [L.Vec, P.int]}, {func: 1, ret: Q.Tile}, {func: 1, ret: P.Null, args: [R.Item]}, {func: 1, ret: O.Inventory}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.Null, args: [P.int, P.int, L.Glyph]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.String, args: [U.Attack]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: M.Skill, args: [P.String]}, {func: 1, ret: P.Null, args: [L.Drop, P.double]}], interceptorsByTag: null, leafTags: null};
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Window_methods = W.Window.prototype;
    C.C_JS_CONST6 = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST5 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST1 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST2 = function(hooks) { return hooks; }
;
    C.C__JSRandom = new P._JSRandom();
    C.C__RootZone = new P._RootZone();
    C.Color_0_0_0 = new L.Color(0, 0, 0);
    C.Color_0_64_39 = new L.Color(0, 64, 39);
    C.Color_110_32_13 = new L.Color(110, 32, 13);
    C.Color_116_146_181 = new L.Color(116, 146, 181);
    C.Color_129_217_117 = new L.Color(129, 217, 117);
    C.Color_129_231_235 = new L.Color(129, 231, 235);
    C.Color_131_158_13 = new L.Color(131, 158, 13);
    C.Color_132_126_135 = new L.Color(132, 126, 135);
    C.Color_142_82_55 = new L.Color(142, 82, 55);
    C.Color_15_130_148 = new L.Color(15, 130, 148);
    C.Color_173_88_219 = new L.Color(173, 88, 219);
    C.Color_179_74_4 = new L.Color(179, 74, 4);
    C.Color_189_144_108 = new L.Color(189, 144, 108);
    C.Color_204_35_57 = new L.Color(204, 35, 57);
    C.Color_20_19_31 = new L.Color(20, 19, 31);
    C.Color_21_87_194 = new L.Color(21, 87, 194);
    C.Color_222_156_33 = new L.Color(222, 156, 33);
    C.Color_226_223_240 = new L.Color(226, 223, 240);
    C.Color_22_117_38 = new L.Color(22, 117, 38);
    C.Color_255_122_105 = new L.Color(255, 122, 105);
    C.Color_255_238_168 = new L.Color(255, 238, 168);
    C.Color_255_255_255 = new L.Color(255, 255, 255);
    C.Color_26_46_150 = new L.Color(26, 46, 150);
    C.Color_36_10_5 = new L.Color(36, 10, 5);
    C.Color_38_42_66 = new L.Color(38, 42, 66);
    C.Color_42_36_43 = new L.Color(42, 36, 43);
    C.Color_56_16_125 = new L.Color(56, 16, 125);
    C.Color_63_75_115 = new L.Color(63, 75, 115);
    C.Color_64_163_229 = new L.Color(64, 163, 229);
    C.Color_72_64_74 = new L.Color(72, 64, 74);
    C.Color_77_29_21 = new L.Color(77, 29, 21);
    C.Color_84_0_39 = new L.Color(84, 0, 39);
    C.Color_86_30_138 = new L.Color(86, 30, 138);
    C.Color_99_87_7 = new L.Color(99, 87, 7);
    C.DetectType_0 = new T.DetectType("DetectType.exit");
    C.DetectType_1 = new T.DetectType("DetectType.item");
    C.Direction_0_0 = new Z.Direction(0, 0);
    C.Direction_0_1 = new Z.Direction(0, 1);
    C.Direction_0_m1 = new Z.Direction(0, -1);
    C.Direction_1_0 = new Z.Direction(1, 0);
    C.Direction_1_1 = new Z.Direction(1, 1);
    C.Direction_1_m1 = new Z.Direction(1, -1);
    C.Direction_m1_0 = new Z.Direction(-1, 0);
    C.Direction_m1_1 = new Z.Direction(-1, 1);
    C.Direction_m1_m1 = new Z.Direction(-1, -1);
    C.Glyph_kVM = new L.Glyph(32, C.Color_255_255_255, C.Color_0_0_0);
    C.ItemLocation_46y = new O.ItemLocation("On Ground");
    C.ItemLocation_Crucible = new O.ItemLocation("Crucible");
    C.ItemLocation_Equipment = new O.ItemLocation("Equipment");
    C.ItemLocation_Home = new O.ItemLocation("Home");
    C.ItemLocation_Inventory = new O.ItemLocation("Inventory");
    C.Region_n = new X.Region("n");
    C.Region_ne = new X.Region("ne");
    C.Region_e = new X.Region("e");
    C.Region_se = new X.Region("se");
    C.Region_s = new X.Region("s");
    C.Region_sw = new X.Region("sw");
    C.Region_w = new X.Region("w");
    C.Region_nw = new X.Region("nw");
    C.List_0 = H.setRuntimeTypeInfo(makeConstList([C.Region_n, C.Region_ne, C.Region_e, C.Region_se, C.Region_s, C.Region_sw, C.Region_w, C.Region_nw]), [X.Region]);
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
    C.List_RDW = H.setRuntimeTypeInfo(makeConstList(["hand", "hand", "ring", "necklace", "body", "cloak", "helm", "gloves", "boots"]), [P.String]);
    C.List_aAW = H.setRuntimeTypeInfo(makeConstList([C.Direction_0_m1, C.Direction_1_0, C.Direction_0_1, C.Direction_m1_0]), [Z.Direction]);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [L.Vec]);
    C.List_izR = H.setRuntimeTypeInfo(makeConstList([C.Direction_1_m1, C.Direction_1_1, C.Direction_m1_1, C.Direction_m1_m1]), [Z.Direction]);
    C.List_mC8 = H.setRuntimeTypeInfo(makeConstList([15, 20, 24, 30, 40, 50, 60, 80, 100, 120, 150, 180, 240]), [P.int]);
    C.List_slV = H.setRuntimeTypeInfo(makeConstList([C.Direction_0_m1, C.Direction_1_m1, C.Direction_1_0, C.Direction_1_1, C.Direction_0_1, C.Direction_m1_1, C.Direction_m1_0, C.Direction_m1_m1]), [Z.Direction]);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
    C.List_ww8 = H.setRuntimeTypeInfo(makeConstList(["hand", "ring", "necklace", "body", "cloak", "helm", "gloves", "boots"]), [P.String]);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
    C.LogType_error = new O.LogType("error");
    C.LogType_gain = new O.LogType("gain");
    C.LogType_message = new O.LogType("message");
    C.Map_6xa1A = new H.GeneralConstantMap([9786, 1, 9787, 2, 9829, 3, 9830, 4, 9827, 5, 9824, 6, 8226, 7, 9688, 8, 9675, 9, 9689, 10, 9794, 11, 9792, 12, 9834, 13, 9835, 14, 9788, 15, 9658, 16, 9668, 17, 8597, 18, 8252, 19, 182, 20, 167, 21, 9644, 22, 8616, 23, 8593, 24, 8595, 25, 8594, 26, 8592, 27, 8735, 28, 8596, 29, 9650, 30, 9660, 31, 8962, 127, 199, 128, 252, 129, 233, 130, 226, 131, 228, 132, 224, 133, 229, 134, 231, 135, 234, 136, 235, 137, 232, 138, 239, 139, 238, 140, 236, 141, 196, 142, 197, 143, 201, 144, 230, 145, 198, 146, 244, 147, 246, 148, 242, 149, 251, 150, 249, 151, 255, 152, 214, 153, 220, 154, 162, 155, 163, 156, 165, 157, 8359, 158, 402, 159, 225, 160, 237, 161, 243, 162, 250, 163, 241, 164, 209, 165, 170, 166, 186, 167, 191, 168, 8976, 169, 172, 170, 189, 171, 188, 172, 161, 173, 171, 174, 187, 175, 9617, 176, 9618, 177, 9619, 178, 9474, 179, 9508, 180, 9569, 181, 9570, 182, 9558, 183, 9557, 184, 9571, 185, 9553, 186, 9559, 187, 9565, 188, 9564, 189, 9563, 190, 9488, 191, 9492, 192, 9524, 193, 9516, 194, 9500, 195, 9472, 196, 9532, 197, 9566, 198, 9567, 199, 9562, 200, 9556, 201, 9577, 202, 9574, 203, 9568, 204, 9552, 205, 9580, 206, 9575, 207, 9576, 208, 9572, 209, 9573, 210, 9561, 211, 9560, 212, 9554, 213, 9555, 214, 9579, 215, 9578, 216, 9496, 217, 9484, 218, 9608, 219, 9604, 220, 9612, 221, 9616, 222, 9600, 223, 945, 224, 223, 225, 915, 226, 960, 227, 931, 228, 963, 229, 181, 230, 964, 231, 934, 232, 920, 233, 937, 234, 948, 235, 8734, 236, 966, 237, 949, 238, 8745, 239, 8801, 240, 177, 241, 8805, 242, 8804, 243, 8992, 244, 8993, 245, 247, 246, 8776, 247, 176, 248, 8729, 249, 183, 250, 8730, 251, 8319, 252, 178, 253, 9632, 254], [P.int, P.int]);
    C.Missive_0 = new R.Missive("Missive.clumsy");
    C.Missive_1 = new R.Missive("Missive.insult");
    C.Missive_2 = new R.Missive("Missive.screech");
    C.Pronoun_he_him_his = new O.Pronoun("he", "him", "his");
    C.Pronoun_it_it_its = new O.Pronoun("it", "it", "its");
    C.Pronoun_she_her_her = new O.Pronoun("she", "her", "her");
    C.Pronoun_they_them_their = new O.Pronoun("they", "them", "their");
    C.Pronoun_you_you_your = new O.Pronoun("you", "you", "your");
    C.Region_everywhere = new X.Region("everywhere");
    C.SpawnLocation_0 = new B.SpawnLocation("SpawnLocation.anywhere");
    C.SpawnLocation_1 = new B.SpawnLocation("SpawnLocation.open");
    C.SpawnLocation_2 = new B.SpawnLocation("SpawnLocation.wall");
    C.SpawnLocation_3 = new B.SpawnLocation("SpawnLocation.corner");
    C.Stat_Agility = new D.Stat("Agility");
    C.Stat_Fortitude = new D.Stat("Fortitude");
    C.Stat_Intellect = new D.Stat("Intellect");
    C.Stat_Strength = new D.Stat("Strength");
    C.Stat_Will = new D.Stat("Will");
    C.Symmetry_0 = new T.Symmetry("Symmetry.none");
    C.Symmetry_1 = new T.Symmetry("Symmetry.mirrorHorizontal");
    C.Symmetry_2 = new T.Symmetry("Symmetry.mirrorVertical");
    C.Symmetry_3 = new T.Symmetry("Symmetry.mirrorBoth");
    C.Symmetry_4 = new T.Symmetry("Symmetry.rotate90");
    C.Symmetry_5 = new T.Symmetry("Symmetry.rotate180");
    C.TakeFrom_0 = new Z.TakeFrom("TakeFrom.newest");
    C.TakeFrom_1 = new Z.TakeFrom("TakeFrom.oldest");
    C.TakeFrom_2 = new Z.TakeFrom("TakeFrom.random");
    C.TilePortal_T3V4 = new Q.TilePortal("shop 1");
    C.TilePortal_T3V3 = new Q.TilePortal("shop 2");
    C.TilePortal_T3V2 = new Q.TilePortal("shop 3");
    C.TilePortal_T3V1 = new Q.TilePortal("shop 4");
    C.TilePortal_T3V0 = new Q.TilePortal("shop 5");
    C.TilePortal_T3V = new Q.TilePortal("shop 6");
    C.TilePortal_dungeon = new Q.TilePortal("dungeon");
    C.TilePortal_exit = new Q.TilePortal("exit");
    C.TilePortal_home = new Q.TilePortal("home");
    C.Vec_0_0 = new L.Vec(0, 0);
    C.Vec_0_1 = new L.Vec(0, 1);
    C.Vec_0_m1 = new L.Vec(0, -1);
    C.Vec_1_0 = new L.Vec(1, 0);
    C.Vec_m1_0 = new L.Vec(-1, 0);
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
    $.Device__isOpera = null;
    $.Device__isWebKit = null;
    $._categoryFrequency = null;
    $._furnishingFrequency = null;
    $._themes = null;
    $._categoryCells = null;
    $._mirrorHorizontal = H.setRuntimeTypeInfo(["\u250c\u2510", "\u255b\u2558", "\u255e\u2561"], [P.String]);
    $._mirrorVertical = H.setRuntimeTypeInfo(["\u250c\u2558", "\u2510\u255b", "\u2500\u2550"], [P.String]);
    $._rotate = H.setRuntimeTypeInfo(["\u250c\u2510\u255b\u2558", "\u2500\u2502\u2550\u2502"], [P.String]);
    $._sortIndex = 0;
    $._category = null;
    $._item = null;
    $._affixTag = null;
    $._affix = null;
    $.Shops_all = P.LinkedHashMap_LinkedHashMap$_empty(P.String, O.Shop);
    $._builder = null;
    $._family = null;
    $.Architect_debugOwners = null;
    $.Keep_debugJunctions = null;
    $.Debug_densityMap = null;
    $.Skill__nextSortOrder = 0;
    $.BreedRef__unresolved = H.setRuntimeTypeInfo([], [B.BreedRef]);
    $.Fov__octantCoordinates = function() {
      var t1 = [L.Vec];
      return H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_m1_0], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_m1_0], t1)], [[P.List, L.Vec]]);
    }();
    $._game = null;
    $.terminal = null;
    $.hoverPos = null;
    $.hues = P.LinkedHashMap_LinkedHashMap$_empty(X.Architecture, P.int);
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
    });
    _lazy($, "Classes_adventurer", "$get$Classes_adventurer", function() {
      return V._class("Adventurer", "TODO", X.parseDrop("item", null, null), 0.5, 0.2);
    });
    _lazy($, "Decor_all", "$get$Decor_all", function() {
      return Y.ResourceSet$(Y.Decor);
    });
    _lazy($, "_applyCells", "$get$_applyCells", function() {
      var t4, t5, t6, t7, t8, t9, t10, _null = null,
        t1 = $.$get$Tiles_wallTorch(),
        t2 = S.Cell$(t1, _null, _null, H.setRuntimeTypeInfo([$.$get$Tiles_flagstoneWall(), $.$get$Tiles_graniteWall()], [Q.TileType])),
        t3 = $.$get$Motility_walk();
      t1 = S.Cell$(t1, t3, _null, _null);
      t4 = S.Cell$($.$get$Tiles_statue(), t3, _null, _null);
      t5 = $.$get$Tiles_water();
      t6 = S.Cell$(t5, t3, _null, _null);
      t7 = S.Cell$($.$get$Tiles_closedBarrel(), t3, _null, _null);
      t8 = S.Cell$($.$get$Tiles_closedChest(), t3, _null, _null);
      t9 = S.Cell$($.$get$Tiles_tallGrass(), _null, $.$get$Tiles_grass(), _null);
      t10 = $.$get$Tiles_bridge();
      return P.LinkedHashMap_LinkedHashMap$_literal(["I", t2, "l", t1, "P", t4, "\u2248", t6, "%", t7, "&", t8, "*", t9, "=", S.Cell$(t10, _null, t5, _null), "\u2261", S.Cell$(t10, t3, _null, _null), "\u2022", S.Cell$($.$get$Tiles_steppingStone(), _null, t5, _null)], P.String, S.Cell);
    });
    _lazy($, "_requireCells", "$get$_requireCells", function() {
      var _null = null,
        t1 = [Q.TileType];
      return P.LinkedHashMap_LinkedHashMap$_literal(["?", S.Cell$(_null, _null, _null, _null), ".", S.Cell$(_null, $.$get$Motility_walk(), _null, _null), "#", S.Cell$(_null, _null, _null, H.setRuntimeTypeInfo([$.$get$Tiles_flagstoneWall(), $.$get$Tiles_graniteWall(), $.$get$Tiles_granite1(), $.$get$Tiles_granite2(), $.$get$Tiles_granite3()], t1)), "\u250c", S.Cell$(_null, _null, $.$get$Tiles_tableTopLeft(), _null), "\u2500", S.Cell$(_null, _null, $.$get$Tiles_tableTop(), _null), "\u2510", S.Cell$(_null, _null, $.$get$Tiles_tableTopRight(), _null), "-", S.Cell$(_null, _null, $.$get$Tiles_tableCenter(), _null), "\u2502", S.Cell$(_null, _null, $.$get$Tiles_tableSide(), _null), "\u2558", S.Cell$(_null, _null, $.$get$Tiles_tableBottomLeft(), _null), "\u2550", S.Cell$(_null, _null, $.$get$Tiles_tableBottom(), _null), "\u255b", S.Cell$(_null, _null, $.$get$Tiles_tableBottomRight(), _null), "\u255e", S.Cell$(_null, _null, $.$get$Tiles_tableLegLeft(), _null), "\u2564", S.Cell$(_null, _null, $.$get$Tiles_tableLeg(), _null), "\u2561", S.Cell$(_null, _null, $.$get$Tiles_tableLegRight(), _null), "\u03c0", S.Cell$(_null, _null, $.$get$Tiles_chair(), _null), "\u2248", S.Cell$(_null, _null, $.$get$Tiles_water(), _null), "'", S.Cell$(_null, _null, _null, H.setRuntimeTypeInfo([$.$get$Tiles_grass(), $.$get$Tiles_tallGrass()], t1))], P.String, S.Cell);
    });
    _lazy($, "Elements_air", "$get$Elements_air", function() {
      return G.Element$("air", "Ai", 1.2, new A.Elements_closure8(), null, null, null);
    });
    _lazy($, "Elements_earth", "$get$Elements_earth", function() {
      var _null = null;
      return G.Element$("earth", "Ea", 1.1, _null, _null, _null, _null);
    });
    _lazy($, "Elements_fire", "$get$Elements_fire", function() {
      return G.Element$("fire", "Fi", 1.2, new A.Elements_closure6(), "burns up", true, new A.Elements_closure7());
    });
    _lazy($, "Elements_water", "$get$Elements_water", function() {
      var _null = null;
      return G.Element$("water", "Wa", 1.3, _null, _null, _null, _null);
    });
    _lazy($, "Elements_acid", "$get$Elements_acid", function() {
      var _null = null;
      return G.Element$("acid", "Ac", 1.4, _null, _null, _null, _null);
    });
    _lazy($, "Elements_cold", "$get$Elements_cold", function() {
      return G.Element$("cold", "Co", 1.2, new A.Elements_closure4(), "shatters", null, new A.Elements_closure5());
    });
    _lazy($, "Elements_lightning", "$get$Elements_lightning", function() {
      var _null = null;
      return G.Element$("lightning", "Ln", 1.1, _null, _null, _null, _null);
    });
    _lazy($, "Elements_poison", "$get$Elements_poison", function() {
      return G.Element$("poison", "Po", 2, new A.Elements_closure2(), null, null, new A.Elements_closure3());
    });
    _lazy($, "Elements_dark", "$get$Elements_dark", function() {
      return G.Element$("dark", "Dk", 1.5, new A.Elements_closure1(), null, null, null);
    });
    _lazy($, "Elements_light", "$get$Elements_light", function() {
      return G.Element$("light", "Li", 1.5, new A.Elements_closure(), null, null, new A.Elements_closure0());
    });
    _lazy($, "Elements_spirit", "$get$Elements_spirit", function() {
      var _null = null;
      return G.Element$("spirit", "Sp", 3, _null, _null, _null, _null);
    });
    _lazy($, "Elements_all", "$get$Elements_all", function() {
      return H.setRuntimeTypeInfo([$.$get$Element_none(), $.$get$Elements_air(), $.$get$Elements_earth(), $.$get$Elements_fire(), $.$get$Elements_water(), $.$get$Elements_acid(), $.$get$Elements_cold(), $.$get$Elements_lightning(), $.$get$Elements_poison(), $.$get$Elements_dark(), $.$get$Elements_light(), $.$get$Elements_spirit()], [G.Element0]);
    });
    _lazy($, "Affixes_prefixes", "$get$Affixes_prefixes", function() {
      return Y.ResourceSet$(L.Affix);
    });
    _lazy($, "Affixes_suffixes", "$get$Affixes_suffixes", function() {
      return Y.ResourceSet$(L.Affix);
    });
    _lazy($, "_floorDrops", "$get$_floorDrops", function() {
      return Y.ResourceSet$(F.FloorDrop);
    });
    _lazy($, "Items_types", "$get$Items_types", function() {
      return Y.ResourceSet$(L.ItemType);
    });
    _lazy($, "collapseNewlines", "$get$collapseNewlines", function() {
      return P.RegExp_RegExp("\\n\\s*");
    });
    _lazy($, "_elementText", "$get$_elementText", function() {
      var t1 = [P.String];
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Elements_air(), H.setRuntimeTypeInfo(["the wind", "buffets"], t1), $.$get$Elements_earth(), H.setRuntimeTypeInfo(["the soil", "buries"], t1), $.$get$Elements_fire(), H.setRuntimeTypeInfo(["the flame", "burns"], t1), $.$get$Elements_water(), H.setRuntimeTypeInfo(["the water", "blasts"], t1), $.$get$Elements_acid(), H.setRuntimeTypeInfo(["the acid", "melts"], t1), $.$get$Elements_cold(), H.setRuntimeTypeInfo(["the ice", "freezes"], t1), $.$get$Elements_lightning(), H.setRuntimeTypeInfo(["the lightning", "shocks"], t1), $.$get$Elements_poison(), H.setRuntimeTypeInfo(["the poison", "chokes"], t1), $.$get$Elements_dark(), H.setRuntimeTypeInfo(["the darkness", "crushes"], t1), $.$get$Elements_light(), H.setRuntimeTypeInfo(["the light", "sears"], t1), $.$get$Elements_spirit(), H.setRuntimeTypeInfo(["the spirit", "haunts"], t1)], G.Element0, [P.List, P.String]);
    });
    _lazy($, "Monsters_breeds", "$get$Monsters_breeds", function() {
      return Y.ResourceSet$(B.Breed);
    });
    _lazy($, "Races_human", "$get$Races_human", function() {
      return new N.Race("Human", P.LinkedHashMap_LinkedHashMap$_literal([C.Stat_Strength, 30, C.Stat_Agility, 30, C.Stat_Fortitude, 30, C.Stat_Intellect, 30, C.Stat_Will, 30], D.Stat, P.int));
    });
    _lazy($, "Skills_all", "$get$Skills_all", function() {
      var t3, skills, t4, t5, t6, t7, t8, t9, t10,
        t1 = $.Skill__nextSortOrder,
        t2 = $.Skill__nextSortOrder = t1 + 1;
      $.Skill__nextSortOrder = t2 + 1;
      t3 = [M.Skill];
      skills = H.setRuntimeTypeInfo([new M.BattleHardening(t1), new Y.DualWield(t2)], t3);
      t2 = $.Skill__nextSortOrder;
      t1 = $.Skill__nextSortOrder = t2 + 1;
      t4 = $.Skill__nextSortOrder = t1 + 1;
      t5 = $.Skill__nextSortOrder = t4 + 1;
      t6 = $.Skill__nextSortOrder = t5 + 1;
      t7 = $.Skill__nextSortOrder = t6 + 1;
      $.Skill__nextSortOrder = t7 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new X.Archery(t2), new D.AxeMastery(t1), new A.ClubMastery(t4), new Z.SpearMastery(t5), new G.Swordfighting(t6), new O.WhipMastery(t7)], t3));
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([A.SlayDiscipline$("Animals", "animal"), A.SlayDiscipline$("Bugs", "bug"), A.SlayDiscipline$("Dragons", "dragon"), A.SlayDiscipline$("Fae Folk", "fae"), A.SlayDiscipline$("Goblins", "goblin"), A.SlayDiscipline$("Humans", "human"), A.SlayDiscipline$("Jellies", "jelly"), A.SlayDiscipline$("Kobolds", "kobold"), A.SlayDiscipline$("Plants", "plant"), A.SlayDiscipline$("Saurians", "saurian"), A.SlayDiscipline$("Undead", "undead")], t3));
      t7 = $.Skill__nextSortOrder;
      t6 = $.Skill__nextSortOrder = t7 + 1;
      t5 = $.Skill__nextSortOrder = t6 + 1;
      t4 = $.Skill__nextSortOrder = t5 + 1;
      t1 = $.Skill__nextSortOrder = t4 + 1;
      t2 = $.Skill__nextSortOrder = t1 + 1;
      t8 = $.Skill__nextSortOrder = t2 + 1;
      t9 = $.Skill__nextSortOrder = t8 + 1;
      t10 = $.Skill__nextSortOrder = t9 + 1;
      $.Skill__nextSortOrder = t10 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new D.SenseItems(t7), new K.Flee(t6), new K.Escape(t5), new K.Disappear(t4), new L.Icicle(t1), new L.BrilliantBeam(t2), new L.Windstorm(t8), new L.FireBarrier(t9), new L.TidalWave(t10)], t3));
      return skills;
    });
    _lazy($, "Skills__byName", "$get$Skills__byName", function() {
      var t1 = $.$get$Skills_all(),
        map = P.LinkedHashMap_LinkedHashMap(P.String, M.Skill);
      P.MapBase__fillMapWithMappedIterable(map, t1, new Q.Skills_closure(), null);
      return map;
    });
    _lazy($, "ArchitecturalStyle__styles", "$get$ArchitecturalStyle__styles", function() {
      return Y.ResourceSet$(F.ArchitecturalStyle);
    });
    _lazy($, "PaintStyle_rock", "$get$PaintStyle_rock", function() {
      var _null = null;
      return Q.PaintStyle$(_null, _null, _null, _null);
    });
    _lazy($, "PaintStyle_flagstone", "$get$PaintStyle_flagstone", function() {
      var t1 = [Q.TileType],
        t2 = H.setRuntimeTypeInfo([$.$get$Tiles_flagstoneFloor()], t1);
      t1 = H.setRuntimeTypeInfo([$.$get$Tiles_flagstoneWall()], t1);
      return Q.PaintStyle$($.$get$Tiles_closedDoor(), t2, $.$get$Tiles_openDoor(), t1);
    });
    _lazy($, "PaintStyle_granite", "$get$PaintStyle_granite", function() {
      var t1 = [Q.TileType],
        t2 = H.setRuntimeTypeInfo([$.$get$Tiles_graniteFloor()], t1);
      t1 = H.setRuntimeTypeInfo([$.$get$Tiles_graniteWall()], t1);
      return Q.PaintStyle$($.$get$Tiles_closedSquareDoor(), t2, null, t1);
    });
    _lazy($, "PaintStyle_stoneJail", "$get$PaintStyle_stoneJail", function() {
      return Q.PaintStyle$($.$get$Tiles_closedBarredDoor(), null, null, null);
    });
    _lazy($, "PaintStyle__defaultTypes", "$get$PaintStyle__defaultTypes", function() {
      var t1 = Q.TileType,
        t2 = [t1];
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_solidWet(), H.setRuntimeTypeInfo([$.$get$Tiles_water()], t2), $.$get$Tiles_passageWet(), H.setRuntimeTypeInfo([$.$get$Tiles_bridge()], t2)], t1, [P.List, Q.TileType]);
    });
    _lazy($, "PaintStyle__defaultWalls", "$get$PaintStyle__defaultWalls", function() {
      return H.setRuntimeTypeInfo([$.$get$Tiles_granite1(), $.$get$Tiles_granite2(), $.$get$Tiles_granite3()], [Q.TileType]);
    });
    _lazy($, "RoomTile_unused", "$get$RoomTile_unused", function() {
      return R.RoomTile$junction(C.Direction_0_0);
    });
    _lazy($, "RoomTile_floor", "$get$RoomTile_floor", function() {
      return R.RoomTile$tile($.$get$Tiles_open());
    });
    _lazy($, "RoomTile_wall", "$get$RoomTile_wall", function() {
      return R.RoomTile$tile($.$get$Tiles_solid());
    });
    _lazy($, "Tiles_unformed", "$get$Tiles_unformed", function() {
      return Z._TileBuilder__TileBuilder("unformed", "?", C.Color_63_75_115, null).open$0(0);
    });
    _lazy($, "Tiles_unformedWet", "$get$Tiles_unformedWet", function() {
      return Z._TileBuilder__TileBuilder("unformed wet", "\u2248", C.Color_63_75_115, null).open$0(0);
    });
    _lazy($, "Tiles_open", "$get$Tiles_open", function() {
      return Z._TileBuilder__TileBuilder("open", "\xb7", C.Color_116_146_181, null).open$0(0);
    });
    _lazy($, "Tiles_solid", "$get$Tiles_solid", function() {
      return Z._TileBuilder__TileBuilder("solid", "#", C.Color_116_146_181, null).solid$0();
    });
    _lazy($, "Tiles_passage", "$get$Tiles_passage", function() {
      return Z._TileBuilder__TileBuilder("passage", "-", C.Color_116_146_181, null).open$0(0);
    });
    _lazy($, "Tiles_doorway", "$get$Tiles_doorway", function() {
      return Z._TileBuilder__TileBuilder("doorway", "\u25cb", C.Color_116_146_181, null).open$0(0);
    });
    _lazy($, "Tiles_solidWet", "$get$Tiles_solidWet", function() {
      return Z._TileBuilder__TileBuilder("solid wet", "\u2248", C.Color_64_163_229, null).solid$0();
    });
    _lazy($, "Tiles_passageWet", "$get$Tiles_passageWet", function() {
      return Z._TileBuilder__TileBuilder("wet passage", "-", C.Color_64_163_229, null).open$0(0);
    });
    _lazy($, "Tiles_flagstoneWall", "$get$Tiles_flagstoneWall", function() {
      return Z._TileBuilder__TileBuilder("flagstone wall", "\u2592", C.Color_132_126_135, C.Color_72_64_74).solid$0();
    });
    _lazy($, "Tiles_graniteWall", "$get$Tiles_graniteWall", function() {
      return Z._TileBuilder__TileBuilder("granite wall", "\u2592", C.Color_63_75_115, C.Color_38_42_66).solid$0();
    });
    _lazy($, "Tiles_granite1", "$get$Tiles_granite1", function() {
      return Z._TileBuilder__TileBuilder("granite", "\u2593", C.Color_63_75_115, C.Color_38_42_66).blend$3(0, C.Color_38_42_66, C.Color_20_19_31).solid$0();
    });
    _lazy($, "Tiles_granite2", "$get$Tiles_granite2", function() {
      return Z._TileBuilder__TileBuilder("granite", "\u2593", C.Color_63_75_115, C.Color_38_42_66).blend$3(0.2, C.Color_38_42_66, C.Color_20_19_31).solid$0();
    });
    _lazy($, "Tiles_granite3", "$get$Tiles_granite3", function() {
      return Z._TileBuilder__TileBuilder("granite", "\u2593", C.Color_63_75_115, C.Color_38_42_66).blend$3(0.4, C.Color_38_42_66, C.Color_20_19_31).solid$0();
    });
    _lazy($, "Tiles_flagstoneFloor", "$get$Tiles_flagstoneFloor", function() {
      return Z._TileBuilder__TileBuilder("flagstone floor", "\xb7", C.Color_42_36_43, null).open$0(0);
    });
    _lazy($, "Tiles_graniteFloor", "$get$Tiles_graniteFloor", function() {
      return Z._TileBuilder__TileBuilder("granite floor", "\xb7", C.Color_38_42_66, null).open$0(0);
    });
    _lazy($, "Tiles_openDoor", "$get$Tiles_openDoor", function() {
      return Z._TileBuilder__TileBuilder("open door", "\u25cb", C.Color_142_82_55, C.Color_36_10_5).onClose$1(Z.tiles___closeDoor$closure()).open$0(0);
    });
    _lazy($, "Tiles_closedDoor", "$get$Tiles_closedDoor", function() {
      return Z._TileBuilder__TileBuilder("closed door", "\u25d9", C.Color_142_82_55, C.Color_36_10_5).onOpen$1(Z.tiles___openDoor$closure()).door$0();
    });
    _lazy($, "Tiles_openSquareDoor", "$get$Tiles_openSquareDoor", function() {
      return Z._TileBuilder__TileBuilder("open square door", "\u2642", C.Color_142_82_55, C.Color_36_10_5).onClose$1(Z.tiles___closeSquareDoor$closure()).open$0(0);
    });
    _lazy($, "Tiles_closedSquareDoor", "$get$Tiles_closedSquareDoor", function() {
      return Z._TileBuilder__TileBuilder("closed square door", "\u2640", C.Color_142_82_55, C.Color_36_10_5).onOpen$1(Z.tiles___openSquareDoor$closure()).door$0();
    });
    _lazy($, "Tiles_openBarredDoor", "$get$Tiles_openBarredDoor", function() {
      return Z._TileBuilder__TileBuilder("open barred door", "\u2642", C.Color_132_126_135, C.Color_63_75_115).onClose$1(Z.tiles___closeBarredDoor$closure()).open$0(0);
    });
    _lazy($, "Tiles_closedBarredDoor", "$get$Tiles_closedBarredDoor", function() {
      return Z._TileBuilder__TileBuilder("closed barred door", "\u266a", C.Color_132_126_135, C.Color_63_75_115).onOpen$1(Z.tiles___openBarredDoor$closure())._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_door()));
    });
    _lazy($, "Tiles_stairs", "$get$Tiles_stairs", function() {
      return Z._TileBuilder__TileBuilder("stairs", "\u2261", C.Color_132_126_135, C.Color_63_75_115).to$1(C.TilePortal_exit).open$0(0);
    });
    _lazy($, "Tiles_bridge", "$get$Tiles_bridge", function() {
      return Z._TileBuilder__TileBuilder("bridge", "\u2261", C.Color_142_82_55, C.Color_36_10_5).open$0(0);
    });
    _lazy($, "Tiles_glowingMoss", "$get$Tiles_glowingMoss", function() {
      return Z._TileBuilder__TileBuilder("moss", "\u2591", C.Color_15_130_148, null).emanate$1(128).open$0(0);
    });
    _lazy($, "Tiles_water", "$get$Tiles_water", function() {
      return Z._TileBuilder__TileBuilder("water", "\u2248", C.Color_21_87_194, C.Color_26_46_150).animate$4(0, 10, 0.5, C.Color_26_46_150, C.Color_20_19_31)._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_swim()));
    });
    _lazy($, "Tiles_steppingStone", "$get$Tiles_steppingStone", function() {
      return Z._TileBuilder__TileBuilder("stepping stone", "\u2022", C.Color_116_146_181, C.Color_26_46_150).open$0(0);
    });
    _lazy($, "Tiles_grass", "$get$Tiles_grass", function() {
      return Z._TileBuilder__TileBuilder("grass", "\u2591", C.Color_22_117_38, null).open$0(0);
    });
    _lazy($, "Tiles_tallGrass", "$get$Tiles_tallGrass", function() {
      return Z._TileBuilder__TileBuilder("tall grass", "\u221a", C.Color_22_117_38, null).open$0(0);
    });
    _lazy($, "Tiles_closedChest", "$get$Tiles_closedChest", function() {
      return Z._TileBuilder__TileBuilder("closed chest", "\u2321", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure0()).obstacle$0();
    });
    _lazy($, "Tiles_closedBarrel", "$get$Tiles_closedBarrel", function() {
      return Z._TileBuilder__TileBuilder("closed barrel", "\xb0", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure1()).obstacle$0();
    });
    _lazy($, "Tiles_tableTopLeft", "$get$Tiles_tableTopLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u250c", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableTop", "$get$Tiles_tableTop", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2500", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableTopRight", "$get$Tiles_tableTopRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2510", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableSide", "$get$Tiles_tableSide", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2502", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableCenter", "$get$Tiles_tableCenter", function() {
      return Z._TileBuilder__TileBuilder("table", " ", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottomLeft", "$get$Tiles_tableBottomLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2558", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottom", "$get$Tiles_tableBottom", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2550", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottomRight", "$get$Tiles_tableBottomRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u255b", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLegLeft", "$get$Tiles_tableLegLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u255e", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLeg", "$get$Tiles_tableLeg", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2564", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLegRight", "$get$Tiles_tableLegRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2561", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_candle", "$get$Tiles_candle", function() {
      return Z._TileBuilder__TileBuilder("candle", "\u2265", C.Color_189_144_108, null).emanate$1(128).obstacle$0();
    });
    _lazy($, "Tiles_wallTorch", "$get$Tiles_wallTorch", function() {
      return Z._TileBuilder__TileBuilder("wall torch", "\u2264", C.Color_222_156_33, C.Color_63_75_115).emanate$1(192).solid$0();
    });
    _lazy($, "Tiles_braziers", "$get$Tiles_braziers", function() {
      return Z.Tiles_multi("brazier", "\u2264", C.Color_142_82_55, null, 5, new Z.Tiles_closure());
    });
    _lazy($, "Tiles_statue", "$get$Tiles_statue", function() {
      return Z._TileBuilder__TileBuilder("statue", "P", C.Color_226_223_240, C.Color_63_75_115).obstacle$0();
    });
    _lazy($, "Tiles_chair", "$get$Tiles_chair", function() {
      return Z._TileBuilder__TileBuilder("chair", "\u03c0", C.Color_142_82_55, null).open$0(0);
    });
    _lazy($, "Tiles_brownJellyStain", "$get$Tiles_brownJellyStain", function() {
      return Z._TileBuilder__TileBuilder("brown jelly stain", "\xb7", C.Color_142_82_55, null).open$0(0);
    });
    _lazy($, "Tiles_grayJellyStain", "$get$Tiles_grayJellyStain", function() {
      return Z._TileBuilder__TileBuilder("gray jelly stain", "\xb7", C.Color_38_42_66, null).open$0(0);
    });
    _lazy($, "Tiles_greenJellyStain", "$get$Tiles_greenJellyStain", function() {
      return Z._TileBuilder__TileBuilder("green jelly stain", "\xb7", C.Color_131_158_13, null).open$0(0);
    });
    _lazy($, "Tiles_redJellyStain", "$get$Tiles_redJellyStain", function() {
      return Z._TileBuilder__TileBuilder("red jelly stain", "\xb7", C.Color_204_35_57, null).open$0(0);
    });
    _lazy($, "Tiles_violetJellyStain", "$get$Tiles_violetJellyStain", function() {
      return Z._TileBuilder__TileBuilder("violet jelly stain", "\xb7", C.Color_86_30_138, null).open$0(0);
    });
    _lazy($, "Tiles_whiteJellyStain", "$get$Tiles_whiteJellyStain", function() {
      return Z._TileBuilder__TileBuilder("white jelly stain", "\xb7", C.Color_226_223_240, null).open$0(0);
    });
    _lazy($, "Tiles_spiderweb", "$get$Tiles_spiderweb", function() {
      return Z._TileBuilder__TileBuilder("spiderweb", "\xf7", C.Color_63_75_115, null).open$0(0);
    });
    _lazy($, "Tiles_dungeonEntrance", "$get$Tiles_dungeonEntrance", function() {
      return Z._TileBuilder__TileBuilder("dungeon entrance", "\u2261", C.Color_132_126_135, C.Color_63_75_115).to$1(C.TilePortal_dungeon).open$0(0);
    });
    _lazy($, "Tiles_home", "$get$Tiles_home", function() {
      return Z._TileBuilder__TileBuilder("home entrance", "\u25cb", C.Color_189_144_108, null).to$1(C.TilePortal_home).open$0(0);
    });
    _lazy($, "Tiles_shop1", "$get$Tiles_shop1", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_179_74_4, null).to$1(C.TilePortal_T3V4).open$0(0);
    });
    _lazy($, "Tiles_shop2", "$get$Tiles_shop2", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_222_156_33, null).to$1(C.TilePortal_T3V3).open$0(0);
    });
    _lazy($, "Tiles_shop3", "$get$Tiles_shop3", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_131_158_13, null).to$1(C.TilePortal_T3V2).open$0(0);
    });
    _lazy($, "Tiles_shop4", "$get$Tiles_shop4", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_22_117_38, null).to$1(C.TilePortal_T3V1).open$0(0);
    });
    _lazy($, "Tiles_shop5", "$get$Tiles_shop5", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_15_130_148, null).to$1(C.TilePortal_T3V0).open$0(0);
    });
    _lazy($, "Tiles_shop6", "$get$Tiles_shop6", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_129_231_235, null).to$1(C.TilePortal_T3V).open$0(0);
    });
    _lazy($, "Element_none", "$get$Element_none", function() {
      var _null = null;
      return G.Element$("none", "No", 1, _null, _null, _null, _null);
    });
    _lazy($, "Motility_none", "$get$Motility_none", function() {
      return Q.Motility$_(0);
    });
    _lazy($, "Motility_door", "$get$Motility_door", function() {
      return Q.Motility$_(1);
    });
    _lazy($, "Motility_fly", "$get$Motility_fly", function() {
      return Q.Motility$_(2);
    });
    _lazy($, "Motility_swim", "$get$Motility_swim", function() {
      return Q.Motility$_(4);
    });
    _lazy($, "Motility_walk", "$get$Motility_walk", function() {
      return Q.Motility$_(8);
    });
    _lazy($, "Motility_doorAndWalk", "$get$Motility_doorAndWalk", function() {
      return $.$get$Motility_door().$or(0, $.$get$Motility_walk());
    });
    _lazy($, "Motility_flyAndWalk", "$get$Motility_flyAndWalk", function() {
      return $.$get$Motility_fly().$or(0, $.$get$Motility_walk());
    });
    _lazy($, "Motility_all", "$get$Motility_all", function() {
      return $.$get$Motility_door().$or(0, $.$get$Motility_fly()).$or(0, $.$get$Motility_swim()).$or(0, $.$get$Motility_walk());
    });
    _lazy($, "rng", "$get$rng", function() {
      return N.Rng$(P.DateTime$now()._value);
    });
    _lazy($, "validator", "$get$validator", function() {
      var t1 = W.NodeValidatorBuilder$common();
      t1.add$1(0, W._SimpleNodeValidator$(null, H.setRuntimeTypeInfo(["*::style"], [P.String]), null));
      return t1;
    });
    _lazy($, "depthSelect", "$get$depthSelect", function() {
      return H.interceptedTypeCast(W.querySelector("#depth"), "$isSelectElement");
    });
    _lazy($, "canvas", "$get$canvas", function() {
      return H.interceptedTypeCast(W.querySelector("canvas#tiles"), "$isCanvasElement");
    });
    _lazy($, "stateCanvas", "$get$stateCanvas", function() {
      return H.interceptedTypeCast(W.querySelector("canvas#states"), "$isCanvasElement");
    });
    _lazy($, "content", "$get$content", function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, tableCells, _null = null, _s4_ = "item",
        _s9_ = "item/food",
        _s6_ = "hit[s]",
        _s16_ = "Healing Poultice",
        _s28_ = 'Spellbook "Elemental Primer"',
        _s8_ = "bash[es]",
        _s7_ = "stab[s]",
        _s13_ = "Spear Mastery",
        _s9_0 = "the arrow",
        _s20_ = "equipment/armor/body",
        _s22_ = "The shield blocks {2}.",
        _s21_ = "equipment/armor/boots",
        _s8_0 = "treasure",
        _s5_ = "magic",
        _s12_ = "dungeon keep",
        _s5_0 = "built";
      $.$get$Items_types().defineTags$1(_s4_);
      t1 = R.category(199, 10, _null);
      t1.tag$1(0, _s4_);
      t2 = $.$get$Elements_earth();
      t1.toss$4$breakage$damage$element$range(10, 3, t2, 7);
      R.item("Rock", C.Color_142_82_55, 0.1, _null).depth$1(1);
      t1 = R.category(252, 4, _null);
      t1.tag$1(0, _s4_);
      t1.toss$3$breakage$damage$range(30, 2, 5);
      R.item("Skull", C.Color_116_146_181, 0.1, _null).depth$1(1);
      t1 = R.category(162, _null, _null);
      t1.tag$1(0, "treasure/coin");
      t1.treasure$0();
      R.item("Copper Coins", C.Color_110_32_13, _null, 4).depth$2$to(1, 11);
      R.item("Bronze Coins", C.Color_142_82_55, _null, 8).depth$2$to(7, 20);
      R.item("Silver Coins", C.Color_129_231_235, _null, 20).depth$2$to(11, 30);
      R.item("Electrum Coins", C.Color_255_238_168, _null, 50).depth$2$to(20, 40);
      R.item("Gold Coins", C.Color_222_156_33, _null, 100).depth$2$to(30, 50);
      R.item("Platinum Coins", C.Color_116_146_181, _null, 300).depth$2$to(40, 70);
      t1 = R.category(36, _null, _null);
      t1.tag$1(0, "treasure/bar");
      t1.treasure$0();
      R.item("Copper Bar", C.Color_110_32_13, _null, 150).depth$2$to(35, 60);
      R.item("Bronze Bar", C.Color_142_82_55, _null, 500).depth$2$to(50, 70);
      R.item("Silver Bar", C.Color_129_231_235, _null, 800).depth$2$to(60, 80);
      R.item("Electrum Bar", C.Color_255_238_168, _null, 1200).depth$2$to(70, 90);
      R.item("Gold Bar", C.Color_222_156_33, _null, 2000).depth$1(80);
      R.item("Platinum Bar", C.Color_116_146_181, _null, 3000).depth$1(90);
      t1 = R.category(161, _null, _null);
      t1.tag$1(0, _s9_);
      t3 = $.$get$Elements_fire();
      t1.destroy$3$chance$fuel(t3, 20, 3);
      t1 = R.item("Stale Biscuit", C.Color_189_144_108, 1, _null);
      t1.depth$2$to(1, 10);
      t1._maxStack = 6;
      t1.food$1(100);
      t1 = R.item("Loa[f|ves] of Bread", C.Color_142_82_55, 1, 4);
      t1.depth$2$to(3, 40);
      t1._maxStack = 6;
      t1.food$1(200);
      t1 = R.category(188, _null, _null);
      t1.tag$1(0, _s9_);
      t1.destroy$3$chance$fuel(t3, 15, 2);
      t1 = R.item("Chunk[s] of Meat", C.Color_77_29_21, 1, 10);
      t1.depth$1(8);
      t1._maxStack = 4;
      t1.food$1(400);
      t1 = R.item("Piece[s] of Jerky", C.Color_142_82_55, 1, 20);
      t1.depth$1(10);
      t1._maxStack = 12;
      t1.food$1(600);
      t1 = R.category(172, _null, _s6_);
      t1.tag$1(0, "equipment/light");
      t1.toss$1$breakage(70);
      t1 = R.item("Tallow Candle", C.Color_189_144_108, 1, 6);
      t1.depth$2$to(1, 12);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(2, t3, 8);
      t1.lightSource$2$level$range(2, 8);
      t1.destroy$3$chance$fuel(t3, 40, 20);
      t1 = R.item("Wax Candle", C.Color_226_223_240, 1, 8);
      t1.depth$2$to(4, 20);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(3, t3, 8);
      t1.lightSource$2$level$range(3, 10);
      t1.destroy$3$chance$fuel(t3, 40, 25);
      t1 = R.item("Oil Lamp", C.Color_77_29_21, 1, 18);
      t1.depth$2$to(8, 30);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(10, t3, 8);
      t1.lightSource$2$level$range(4, 13);
      t1.destroy$3$chance$fuel(t3, 50, 40);
      t1 = R.item("Torch[es]", C.Color_142_82_55, 1, 16);
      t1.depth$2$to(11, 45);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(6, t3, 10);
      t1.lightSource$2$level$range(5, 18);
      t1.destroy$3$chance$fuel(t3, 60, 60);
      t1 = R.item("Lantern", C.Color_222_156_33, 0.3, 78);
      t1.depth$1(18);
      t1.toss$3$damage$element$range(5, t3, 5);
      t1.lightSource$2$level$range(6, 24);
      t1 = R.category(231, 10, _null);
      t1.tag$1(0, "magic/potion/healing");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t4 = $.$get$Elements_cold();
      t1.destroy$2$chance(t4, 20);
      t1 = R.item("Soothing Balm", C.Color_255_122_105, 1, 10);
      t1.depth$2$to(2, 30);
      t1.heal$1(36);
      t1 = R.item("Mending Salve", C.Color_204_35_57, 1, 30);
      t1.depth$2$to(20, 40);
      t1.heal$1(64);
      t1 = R.item(_s16_, C.Color_84_0_39, 1, 80);
      t1.depth$1(30);
      t1.heal$2$curePoison(120, true);
      t1 = R.item("Potion[s] of Amelioration", C.Color_56_16_125, 1, 220);
      t1.depth$1(60);
      t1.heal$2$curePoison(200, true);
      t1 = R.item("Potion[s] of Rejuvenation", C.Color_86_30_138, 0.5, 1000);
      t1.depth$1(80);
      t1.heal$2$curePoison(1000, true);
      t1 = R.item("Antidote", C.Color_22_117_38, 1, 20);
      t1.depth$1(2);
      t1.heal$2$curePoison(0, true);
      t1 = R.category(234, 10, _null);
      t1.tag$1(0, "magic/potion/resistance");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1.destroy$2$chance(t4, 20);
      t1 = R.item("Salve[s] of Heat Resistance", C.Color_179_74_4, 0.5, 50);
      t1.depth$1(5);
      t1.resistSalve$1(t3);
      t1 = R.item("Salve[s] of Cold Resistance", C.Color_64_163_229, 0.5, 55);
      t1.depth$1(6);
      t1.resistSalve$1(t4);
      t1 = R.item("Salve[s] of Light Resistance", C.Color_255_238_168, 0.5, 60);
      t1.depth$1(7);
      t5 = $.$get$Elements_light();
      t1.resistSalve$1(t5);
      t1 = R.item("Salve[s] of Wind Resistance", C.Color_129_231_235, 0.5, 65);
      t1.depth$1(8);
      t6 = $.$get$Elements_air();
      t1.resistSalve$1(t6);
      t1 = R.item("Salve[s] of Lightning Resistance", C.Color_173_88_219, 0.5, 70);
      t1.depth$1(9);
      t7 = $.$get$Elements_lightning();
      t1.resistSalve$1(t7);
      t1 = R.item("Salve[s] of Darkness Resistance", C.Color_63_75_115, 0.5, 75);
      t1.depth$1(10);
      t8 = $.$get$Elements_dark();
      t1.resistSalve$1(t8);
      t1 = R.item("Salve[s] of Earth Resistance", C.Color_142_82_55, 0.5, 80);
      t1.depth$1(13);
      t1.resistSalve$1(t2);
      t1 = R.item("Salve[s] of Water Resistance", C.Color_26_46_150, 0.5, 85);
      t1.depth$1(16);
      t9 = $.$get$Elements_water();
      t1.resistSalve$1(t9);
      t1 = R.item("Salve[s] of Acid Resistance", C.Color_189_144_108, 0.5, 90);
      t1.depth$1(19);
      t10 = $.$get$Elements_acid();
      t1.resistSalve$1(t10);
      t1 = R.item("Salve[s] of Poison Resistance", C.Color_131_158_13, 0.5, 95);
      t1.depth$1(23);
      t11 = $.$get$Elements_poison();
      t1.resistSalve$1(t11);
      t1 = R.item("Salve[s] of Death Resistance", C.Color_86_30_138, 0.5, 100);
      t1.depth$1(30);
      t12 = $.$get$Elements_spirit();
      t1.resistSalve$1(t12);
      t1 = R.category(235, 10, _null);
      t1.tag$1(0, "magic/potion/speed");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1.destroy$2$chance(t4, 20);
      t1 = R.item("Potion[s] of Quickness", C.Color_131_158_13, 0.3, 25);
      t1.depth$2$to(3, 30);
      t1.haste$2(1, 40);
      t1 = R.item("Potion[s] of Alacrity", C.Color_22_117_38, 0.3, 60);
      t1.depth$2$to(18, 50);
      t1.haste$2(2, 60);
      t1 = R.item("Potion[s] of Speed", C.Color_0_64_39, 0.25, 150);
      t1.depth$1(34);
      t1.haste$2(3, 100);
      t1 = R.category(232, 10, _null);
      t1.tag$1(0, "magic/potion/bottled");
      t1.toss$3$breakage$damage$range(100, 1, 8);
      t1.destroy$2$chance(t4, 15);
      t1 = R.item("Bottled Wind", C.Color_64_163_229, 0.5, 100);
      t1.depth$1(4);
      t1.flow$5$fly(t6, "the wind", "blasts", 20, true);
      t6 = R.item("Bottled Ice", C.Color_21_87_194, 0.5, 120);
      t6.depth$1(7);
      t6.ball$4(t4, "the cold", "freezes", 30);
      t4 = R.item("Bottled Fire", C.Color_204_35_57, 0.5, 140);
      t4.depth$1(11);
      t4.flow$5$fly(t3, "the fire", "burns", 44, true);
      t4 = R.item("Bottled Ocean", C.Color_26_46_150, 0.5, 160);
      t4.depth$1(12);
      t4.flow$4(t9, "the water", "drowns", 52);
      t9 = R.item("Bottled Earth", C.Color_142_82_55, 0.5, 180);
      t9.depth$1(13);
      t9.ball$4(t2, "the dirt", "crushes", 58);
      t2 = R.item("Bottled Lightning", C.Color_173_88_219, 0.5, 200);
      t2.depth$1(16);
      t2.ball$4(t7, "the lightning", "shocks", 68);
      t7 = R.item("Bottled Acid", C.Color_131_158_13, 0.5, 220);
      t7.depth$1(18);
      t7.flow$4(t10, "the acid", "corrodes", 72);
      t10 = R.item("Bottled Poison", C.Color_0_64_39, 0.5, 240);
      t10.depth$1(22);
      t10.flow$5$fly(t11, "the poison", "infects", 90, true);
      t11 = R.item("Bottled Shadow", C.Color_38_42_66, 0.5, 260);
      t11.depth$1(28);
      t11.ball$4(t8, "the darkness", "torments", 120);
      t8 = R.item("Bottled Radiance", C.Color_255_238_168, 0.5, 280);
      t8.depth$1(34);
      t8.ball$4(t5, "light", "sears", 140);
      t5 = R.item("Bottled Spirit", C.Color_63_75_115, 0.5, 300);
      t5.depth$1(40);
      t5.flow$5$fly(t12, "the spirit", "haunts", 160, true);
      t12 = R.category(226, 20, _null);
      t12.tag$1(0, "magic/scroll/teleportation");
      t12.toss$3$breakage$damage$range(75, 1, 3);
      t12.destroy$3$chance$fuel(t3, 20, 5);
      t12 = R.item("Scroll[s] of Sidestepping", C.Color_173_88_219, 0.5, 16);
      t12.depth$1(2);
      t12.teleport$1(8);
      t12 = R.item("Scroll[s] of Phasing", C.Color_86_30_138, 0.3, 28);
      t12.depth$1(6);
      t12.teleport$1(14);
      t12 = R.item("Scroll[s] of Teleportation", C.Color_56_16_125, 0.3, 52);
      t12.depth$1(15);
      t12.teleport$1(28);
      t12 = R.item("Scroll[s] of Disappearing", C.Color_26_46_150, 0.3, 74);
      t12.depth$1(26);
      t12.teleport$1(54);
      t12 = R.category(228, 20, _null);
      t12.tag$1(0, "magic/scroll/detection");
      t12.toss$3$breakage$damage$range(75, 1, 3);
      t12.destroy$3$chance$fuel(t3, 20, 5);
      t12 = R.item("Scroll[s] of Find Nearby Escape", C.Color_255_238_168, 0.5, 12);
      t12.depth$2$to(1, 10);
      t5 = [T.DetectType];
      t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0], t5), 20);
      t12 = R.item("Scroll[s] of Find Nearby Items", C.Color_222_156_33, 0.5, 24);
      t12.depth$2$to(2, 16);
      t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_1], t5), 20);
      t12 = R.item("Scroll[s] of Detect Nearby", C.Color_131_158_13, 0.25, 36);
      t12.depth$2$to(3, 24);
      t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t5), 20);
      t12 = R.item("Scroll[s] of Locate Escape", C.Color_189_144_108, 1, 28);
      t12.depth$1(6);
      t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_0], t5));
      t12 = R.item("Scroll[s] of Item Detection", C.Color_179_74_4, 0.5, 64);
      t12.depth$1(12);
      t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_1], t5));
      t12 = R.item("Scroll[s] of Detection", C.Color_110_32_13, 0.25, 124);
      t12.depth$1(18);
      t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t5));
      t5 = R.item("Scroll[s] of Sense Nearby Monsters", C.Color_64_163_229, 1, 50);
      t5.depth$2$to(6, 19);
      t5.perception$2$distance$duration(15, 5);
      t5 = R.item("Scroll[s] of Sense Monsters", C.Color_15_130_148, 1, 70);
      t5.depth$2$to(20, 39);
      t5.perception$2$distance$duration(20, 5);
      t5 = R.item("Scroll[s] of Perceive Monsters", C.Color_21_87_194, 1, 100);
      t5.depth$2$to(40, 69);
      t5.perception$2$distance$duration(30, 50);
      t5 = R.item("Scroll[s] of Telepathy", C.Color_26_46_150, 1, 150);
      t5.depth$2$to(70, 100);
      t5.perception$2$distance$duration(200, 5);
      t5 = R.category(224, 20, _null);
      t5.tag$1(0, "magic/scroll/mapping");
      t5.toss$3$breakage$damage$range(75, 1, 3);
      t5.destroy$3$chance$fuel(t3, 15, 5);
      t5 = R.item("Adventurer's Map", C.Color_0_64_39, 0.25, 70);
      t5.depth$2$to(10, 50);
      t5.mapping$1(16);
      t5 = R.item("Explorer's Map", C.Color_22_117_38, 0.25, 160);
      t5.depth$2$to(30, 70);
      t5.mapping$1(32);
      t5 = R.item("Cartographer's Map", C.Color_129_217_117, 0.25, 240);
      t5.depth$2$to(50, 90);
      t5.mapping$1(64);
      t5 = R.item("Wizard's Map", C.Color_15_130_148, 0.25, 360);
      t5.depth$1(70);
      t5.mapping$2$illuminate(200, true);
      t5 = R.category(189, 3, _null);
      t5.tag$1(0, "magic/book/sorcery");
      t5.toss$3$breakage$damage$range(25, 1, 3);
      t5.destroy$3$chance$fuel(t3, 5, 10);
      t5 = R.item(_s28_, C.Color_84_0_39, 0.05, 100);
      t5.depth$1(1);
      t12 = P.String;
      t8 = [t12];
      t8 = H.assertSubtype(H.setRuntimeTypeInfo(["Sense Items", "Flee", "Escape", "Disappear", "Icicle", "Brilliant Beam", "Windstorm", "Fire Barrier", "Tidal Wave"], t8), "$isList", t8, "$asList");
      C.JSArray_methods.addAll$1(t5._skills, C.JSArray_methods.map$1$1(t8, Q.skills_Skills_find$closure(), M.Skill));
      t8 = R.category(225, _null, _s6_);
      t8.tag$1(0, "equipment/weapon/club");
      t8.skill$1("Club Mastery");
      t8.toss$2$breakage$range(25, 5);
      t8 = R.item("Stick", C.Color_142_82_55, 0.5, _null);
      t8.depth$2$to(1, 20);
      t8.weapon$2$heft(7, 6);
      t8.toss$1$damage(3);
      t8.destroy$3$chance$fuel(t3, 10, 10);
      t8 = R.item("Cudgel", C.Color_116_146_181, 0.5, 20);
      t8.depth$2$to(6, 60);
      t8.weapon$2$heft(9, 8);
      t8.toss$1$damage(4);
      t8.destroy$3$chance$fuel(t3, 5, 10);
      t8 = R.item("Club", C.Color_77_29_21, 0.5, 40);
      t8.depth$1(14);
      t8.weapon$2$heft(12, 11);
      t8.toss$1$damage(5);
      t8.destroy$3$chance$fuel(t3, 2, 10);
      t8 = R.category(237, _null, _s6_);
      t8.tag$1(0, "equipment/weapon/staff");
      t8.twoHanded$0();
      t8.toss$2$breakage$range(35, 4);
      t8 = R.item("Walking Stick", C.Color_142_82_55, 0.5, 10);
      t8.depth$2$to(2, 40);
      t8.weapon$2$heft(10, 9);
      t8.toss$1$damage(3);
      t8.destroy$3$chance$fuel(t3, 5, 15);
      t8 = R.item("Sta[ff|aves]", C.Color_77_29_21, 0.5, 50);
      t8.depth$1(7);
      t8.weapon$2$heft(14, 11);
      t8.toss$1$damage(5);
      t8.destroy$3$chance$fuel(t3, 2, 15);
      t8 = R.item("Quartersta[ff|aves]", C.Color_116_146_181, 0.5, 80);
      t8.depth$1(24);
      t8.weapon$2$heft(20, 13);
      t8.toss$1$damage(8);
      t8.destroy$3$chance$fuel(t3, 2, 15);
      t8 = R.category(243, _null, _s8_);
      t8.tag$1(0, "equipment/weapon/hammer");
      t8.toss$2$breakage$range(15, 5);
      t8 = R.item("Hammer", C.Color_142_82_55, 0.5, 120);
      t8.depth$1(40);
      t8.weapon$2$heft(32, 22);
      t8.toss$1$damage(12);
      t8 = R.item("Mattock", C.Color_77_29_21, 0.5, 240);
      t8.depth$1(46);
      t8.weapon$2$heft(40, 26);
      t8.toss$1$damage(16);
      t8 = R.item("War Hammer", C.Color_116_146_181, 0.5, 400);
      t8.depth$1(52);
      t8.weapon$2$heft(48, 30);
      t8.toss$1$damage(20);
      t8 = R.category(250, _null, _s8_);
      t8.tag$1(0, "equipment/weapon/mace");
      t8.toss$2$breakage$range(15, 4);
      t8 = R.item("Morningstar", C.Color_116_146_181, 0.5, 130);
      t8.depth$1(24);
      t8.weapon$2$heft(26, 17);
      t8.toss$1$damage(11);
      t8 = R.item("Mace", C.Color_63_75_115, 0.5, 310);
      t8.depth$1(33);
      t8.weapon$2$heft(36, 23);
      t8.toss$1$damage(16);
      t8 = R.category(241, _null, "whip[s]");
      t8.tag$1(0, "equipment/weapon/whip");
      t8.toss$2$breakage$range(25, 4);
      t8.skill$1("Whip Mastery");
      t8 = R.item("Whip", C.Color_142_82_55, 0.5, 40);
      t8.depth$1(4);
      t8.weapon$2$heft(10, 7);
      t8.toss$1$damage(1);
      t8.destroy$3$chance$fuel(t3, 10, 5);
      t8 = R.item("Chain Whip", C.Color_116_146_181, 0.5, 230);
      t8.depth$1(15);
      t8.weapon$2$heft(18, 15);
      t8.toss$1$damage(2);
      t8 = R.item("Flail", C.Color_63_75_115, 0.5, 350);
      t8.depth$1(27);
      t8.weapon$2$heft(28, 24);
      t8.toss$1$damage(4);
      t8 = R.category(209, _null, _s7_);
      t8.tag$1(0, "equipment/weapon/dagger");
      t8.toss$2$breakage$range(2, 8);
      t8 = R.item("Kni[fe|ves]", C.Color_38_42_66, 0.5, 20);
      t8.depth$2$to(3, 20);
      t8.weapon$2$heft(8, 5);
      t8.toss$1$damage(8);
      t8 = R.item("Dirk", C.Color_116_146_181, 0.5, 30);
      t8.depth$2$to(4, 40);
      t8.weapon$2$heft(10, 6);
      t8.toss$1$damage(10);
      t8 = R.item("Dagger", C.Color_64_163_229, 0.5, 50);
      t8.depth$2$to(6, 70);
      t8.weapon$2$heft(12, 7);
      t8.toss$1$damage(12);
      t8 = R.item("Stiletto[es]", C.Color_63_75_115, 0.5, 80);
      t8.depth$1(10);
      t8.weapon$2$heft(14, 6);
      t8.toss$1$damage(14);
      t8 = R.item("Rondel", C.Color_129_231_235, 0.5, 130);
      t8.depth$1(20);
      t8.weapon$2$heft(16, 9);
      t8.toss$1$damage(16);
      t8 = R.item("Baselard", C.Color_222_156_33, 0.5, 200);
      t8.depth$1(30);
      t8.weapon$2$heft(18, 11);
      t8.toss$1$damage(18);
      t8 = R.category(170, _null, "slash[es]");
      t8.tag$1(0, "equipment/weapon/sword");
      t8.toss$2$breakage$range(20, 5);
      t8.skill$1("Swordfighting");
      t8 = R.item("Rapier", C.Color_38_42_66, 0.5, 140);
      t8.depth$1(13);
      t8.weapon$2$heft(13, 12);
      t8.toss$1$damage(4);
      t8 = R.item("Shortsword", C.Color_63_75_115, 0.5, 230);
      t8.depth$1(17);
      t8.weapon$2$heft(15, 13);
      t8.toss$1$damage(6);
      t8 = R.item("Scimitar", C.Color_116_146_181, 0.5, 370);
      t8.depth$1(18);
      t8.weapon$2$heft(24, 16);
      t8.toss$1$damage(9);
      t8 = R.item("Cutlass[es]", C.Color_255_238_168, 0.5, 520);
      t8.depth$1(20);
      t8.weapon$2$heft(26, 17);
      t8.toss$1$damage(11);
      t8 = R.item("Falchion", C.Color_129_231_235, 0.5, 750);
      t8.depth$1(34);
      t8.weapon$2$heft(28, 18);
      t8.toss$1$damage(15);
      t8 = R.category(186, _null, _s7_);
      t8.tag$1(0, "equipment/weapon/spear");
      t8.toss$1$range(9);
      t8.skill$1(_s13_);
      t8 = R.item("Pointed Stick", C.Color_77_29_21, 0.5, 10);
      t8.depth$2$to(2, 30);
      t8.weapon$2$heft(10, 9);
      t8.toss$1$damage(9);
      t8.destroy$3$chance$fuel(t3, 7, 12);
      t8 = R.item("Spear", C.Color_142_82_55, 0.5, 160);
      t8.depth$2$to(13, 60);
      t8.weapon$2$heft(16, 13);
      t8.toss$1$damage(15);
      t8 = R.item("Angon", C.Color_116_146_181, 0.5, 340);
      t8.depth$1(21);
      t8.weapon$2$heft(20, 19);
      t8.toss$1$damage(20);
      t8 = R.category(186, _null, _s7_);
      t8.tag$1(0, "equipment/weapon/polearm");
      t8.twoHanded$0();
      t8.toss$1$range(4);
      t8.skill$1(_s13_);
      t8 = R.item("Lance", C.Color_64_163_229, 0.5, 550);
      t8.depth$1(28);
      t8.weapon$2$heft(22, 23);
      t8.toss$1$damage(20);
      t8 = R.item("Partisan", C.Color_63_75_115, 0.5, 850);
      t8.depth$1(35);
      t8.weapon$2$heft(26, 25);
      t8.toss$1$damage(26);
      t8 = R.category(191, _null, "chop[s]");
      t8.tag$1(0, "equipment/weapon/axe");
      t8.skill$1("Axe Mastery");
      t8 = R.item("Hatchet", C.Color_63_75_115, 0.5, 90);
      t8.depth$2$to(6, 50);
      t8.weapon$2$heft(12, 10);
      t8.toss$2$damage$range(20, 8);
      t8 = R.item("Axe", C.Color_142_82_55, 0.5, 210);
      t8.depth$2$to(12, 70);
      t8.weapon$2$heft(15, 14);
      t8.toss$2$damage$range(24, 7);
      t8 = R.item("Valaska", C.Color_116_146_181, 0.5, 330);
      t8.depth$1(24);
      t8.weapon$2$heft(19, 19);
      t8.toss$2$damage$range(26, 5);
      t8 = R.item("Battleaxe", C.Color_38_42_66, 0.5, 550);
      t8.depth$1(40);
      t8.weapon$2$heft(25, 30);
      t8.toss$2$damage$range(28, 4);
      t8 = R.category(8976, _null, _s6_);
      t8.tag$1(0, "equipment/weapon/bow");
      t8.twoHanded$0();
      t8.toss$2$breakage$range(50, 5);
      t8.skill$1("Archery");
      t8 = R.item("Short Bow", C.Color_142_82_55, 0.3, 120);
      t8.depth$2$to(6, 60);
      t8.ranged$4$damage$heft$range(_s9_0, 5, 12, 8);
      t8.toss$1$damage(2);
      t8.destroy$3$chance$fuel(t3, 15, 10);
      t8 = R.item("Longbow", C.Color_77_29_21, 0.3, 250);
      t8.depth$1(13);
      t8.ranged$4$damage$heft$range(_s9_0, 9, 18, 12);
      t8.toss$1$damage(3);
      t8.destroy$3$chance$fuel(t3, 7, 13);
      t8 = R.item("Crossbow", C.Color_116_146_181, 0.3, 600);
      t8.depth$1(28);
      t8.ranged$4$damage$heft$range("the bolt", 14, 24, 16);
      t8.toss$1$damage(4);
      t8.destroy$3$chance$fuel(t3, 4, 14);
      t8 = R.category(201, _null, _null);
      t8.tag$1(0, "equipment/armor/helm");
      t8.toss$3$breakage$damage$range(10, 3, 5);
      t8 = R.item("Leather Cap", C.Color_142_82_55, 0.5, 50);
      t8.depth$2$to(4, 40);
      t8.armor$2$weight(2, 2);
      t8.destroy$3$chance$fuel(t3, 12, 2);
      t8 = R.item("Chainmail Coif", C.Color_38_42_66, 0.5, 160);
      t8.depth$2$to(10, 60);
      t8.armor$2$weight(3, 3);
      t8 = R.item("Steel Cap", C.Color_63_75_115, 0.5, 200);
      t8.depth$2$to(25, 80);
      t8.armor$2$weight(4, 3);
      t8 = R.item("Visored Helm", C.Color_116_146_181, 0.5, 350);
      t8.depth$1(40);
      t8.armor$2$weight(5, 6);
      t8 = R.item("Great Helm", C.Color_226_223_240, 0.5, 550);
      t8.depth$1(50);
      t8.armor$2$weight(6, 8);
      R.category(244, _null, _null).tag$1(0, "equipment/armor/body/robe");
      t8 = R.item("Robe", C.Color_21_87_194, 0.5, 20);
      t8.depth$2$to(2, 40);
      t8.armor$1(4);
      t8.destroy$3$chance$fuel(t3, 15, 8);
      t8 = R.item("Fur-lined Robe", C.Color_0_64_39, 0.25, 110);
      t8.depth$1(6);
      t8.armor$1(6);
      t8.destroy$3$chance$fuel(t3, 12, 8);
      R.category(246, _null, _null).tag$1(0, _s20_);
      t8 = R.item("Cloth Shirt", C.Color_226_223_240, 0.5, 40);
      t8.depth$2$to(2, 30);
      t8.armor$1(3);
      t8.destroy$3$chance$fuel(t3, 15, 4);
      t8 = R.item("Leather Shirt", C.Color_142_82_55, 0.5, 90);
      t8.depth$2$to(5, 50);
      t8.armor$2$weight(6, 1);
      t8.destroy$3$chance$fuel(t3, 12, 4);
      t8 = R.item("Jerkin", C.Color_116_146_181, 0.5, 130);
      t8.depth$2$to(8, 70);
      t8.armor$2$weight(8, 1);
      t8 = R.item("Leather Armor", C.Color_77_29_21, 0.5, 240);
      t8.depth$2$to(12, 90);
      t8.armor$2$weight(11, 2);
      t8.destroy$3$chance$fuel(t3, 10, 4);
      t8 = R.item("Padded Armor", C.Color_38_42_66, 0.5, 320);
      t8.depth$1(16);
      t8.armor$2$weight(15, 3);
      t8.destroy$3$chance$fuel(t3, 8, 4);
      t8 = R.item("Studded Armor", C.Color_63_75_115, 0.5, 400);
      t8.depth$1(20);
      t8.armor$2$weight(22, 4);
      t8.destroy$3$chance$fuel(t3, 6, 4);
      R.category(242, _null, _null).tag$1(0, _s20_);
      t8 = R.item("Mail Hauberk", C.Color_38_42_66, 0.5, 500);
      t8.depth$1(25);
      t8.armor$2$weight(28, 5);
      t8 = R.item("Scale Mail", C.Color_116_146_181, 0.5, 700);
      t8.depth$1(35);
      t8.armor$2$weight(36, 7);
      R.category(198, _null, _null).tag$1(0, "equipment/armor/cloak");
      t8 = R.item("Cloak", C.Color_26_46_150, 0.5, 70);
      t8.depth$2$to(10, 40);
      t8.armor$2$weight(2, 1);
      t8.destroy$3$chance$fuel(t3, 20, 5);
      t8 = R.item("Fur Cloak", C.Color_77_29_21, 0.2, 140);
      t8.depth$2$to(20, 60);
      t8.armor$2$weight(4, 2);
      t8.destroy$3$chance$fuel(t3, 16, 5);
      t8 = R.item("Spidersilk Cloak", C.Color_38_42_66, 0.2, 460);
      t8.depth$1(40);
      t8.armor$1(6);
      t8.destroy$3$chance$fuel(t3, 25, 3);
      t8 = R.category(197, _null, _null);
      t8.tag$1(0, "equipment/armor/gloves");
      t8.toss$3$breakage$damage$range(20, 5, 4);
      t8 = R.item("Pair[s] of Gloves", C.Color_189_144_108, 0.5, 170);
      t8.depth$1(8);
      t8.armor$1(1);
      t8.destroy$3$chance$fuel(t3, 7, 2);
      t8 = R.item("Set[s] of Bracers", C.Color_77_29_21, 0.5, 480);
      t8.depth$1(17);
      t8.armor$2$weight(2, 1);
      t8 = R.item("Pair[s] of Gauntlets", C.Color_38_42_66, 0.5, 800);
      t8.depth$1(34);
      t8.armor$2$weight(4, 2);
      t8 = R.category(230, _null, _null);
      t8.tag$1(0, "equipment/armor/shield");
      t8.toss$3$breakage$damage$range(10, 5, 8);
      t8 = R.item("Small Leather Shield", C.Color_77_29_21, 0.5, 170);
      t8.depth$2$to(12, 50);
      t8.armor$2$weight(0, 2);
      t8.defense$2(4, _s22_);
      t8.destroy$3$chance$fuel(t3, 7, 14);
      t8 = R.item("Wooden Targe", C.Color_189_144_108, 0.5, 250);
      t8.depth$1(25);
      t8.armor$2$weight(0, 4);
      t8.defense$2(6, "The targe blocks {2}.");
      t8.destroy$3$chance$fuel(t3, 14, 20);
      t8 = R.item("Large Leather Shield", C.Color_142_82_55, 0.5, 320);
      t8.depth$1(35);
      t8.armor$2$weight(0, 5);
      t8.defense$2(8, _s22_);
      t8.destroy$3$chance$fuel(t3, 7, 17);
      t8 = R.item("Steel Buckler", C.Color_38_42_66, 0.5, 450);
      t8.depth$1(50);
      t8.armor$2$weight(0, 4);
      t8.defense$2(10, "The buckler blocks {2}.");
      t8 = R.item("Kite Shield", C.Color_116_146_181, 0.5, 650);
      t8.depth$1(65);
      t8.armor$2$weight(0, 7);
      t8.defense$2(12, _s22_);
      R.category(236, _null, _null).tag$1(0, _s21_);
      t8 = R.item("Pair[s] of Sandals", C.Color_142_82_55, 0.24, 10);
      t8.depth$2$to(2, 20);
      t8.armor$1(1);
      t8.destroy$3$chance$fuel(t3, 20, 3);
      t8 = R.item("Pair[s] of Shoes", C.Color_77_29_21, 0.3, 30);
      t8.depth$2$to(8, 40);
      t8.armor$1(2);
      t8.destroy$3$chance$fuel(t3, 14, 3);
      R.category(196, _null, _null).tag$1(0, _s21_);
      t3 = R.item("Pair[s] of Boots", C.Color_142_82_55, 0.3, 70);
      t3.depth$1(14);
      t3.armor$2$weight(6, 1);
      t3 = R.item("Pair[s] of Plated Boots", C.Color_63_75_115, 0.3, 250);
      t3.depth$1(22);
      t3.armor$2$weight(8, 2);
      t3 = R.item("Pair[s] of Greaves", C.Color_116_146_181, 0.25, 350);
      t3.depth$1(47);
      t3.armor$2$weight(12, 3);
      R.finishItem();
      D.Monsters_initialize();
      Z.Affixes_initialize();
      t3 = P.double;
      R.shop("The General's General Store", P.LinkedHashMap_LinkedHashMap$_literal(["Loaf of Bread", 2, "Chunk of Meat", 0.6, "Tallow Candle", 1, "Wax Candle", 0.7, "Oil Lamp", 0.5, "Torch", 0.3, "Lantern", 0.1, "Soothing Balm", 0.6, "Mending Salve", 0.4, _s16_, 0.2, "Club", 0.1, "Staff", 0.1, "Quarterstaff", 0.05, "Whip", 0.1, "Dagger", 0.1], t12, t3));
      R.shop("Dirk's Death Emporium", P.LinkedHashMap_LinkedHashMap$_literal(["Hammer", 0.5, "Mattock", 0.2, "War Hammer", 0.1, "Morningstar", 0.6, "Mace", 0.3, "Chain Whip", 0.2, "Flail", 0.1, "Falchion", 0.7, "Rapier", 1, "Shortsword", 0.6, "Scimitar", 0.4, "Cutlass", 0.2, "Spear", 1, "Angon", 0.4, "Lance", 0.2, "Partisan", 0.1, "Hatchet", 1, "Axe", 0.5, "Valaska", 0.25, "Battleaxe", 0.2, "Short Bow", 1, "Longbow", 0.3, "Crossbow", 0.05], t12, t3));
      R.shop("Skullduggery and Bamboozelry", P.LinkedHashMap_LinkedHashMap$_literal(["Dirk", 1, "Dagger", 0.3, "Stiletto", 0.1, "Rondel", 0.05, "Baselard", 0.02], t12, t3));
      R.shop("Garthag's Armoury", P.LinkedHashMap_LinkedHashMap$_literal(["Cloak", 1, "Fur Cloak", 1, "Cloth Shirt", 1, "Leather Shirt", 1, "Jerkin", 1, "Leather Armor", 1, "Padded Armor", 1, "Studded Armor", 1, "Mail Hauberk", 1, "Scale Mail", 1, "Robe", 1, "Fur-lined Robe", 1, "Pair of Sandals", 1, "Pair of Shoes", 1, "Pair of Boots", 1, "Pair of Plated Boots", 1, "Pair of Greaves", 1], t12, t3));
      R.shop("Unguence the Alchemist", P.LinkedHashMap_LinkedHashMap$_literal(["Soothing Balm", 1, "Mending Salve", 1, _s16_, 1, "Antidote", 1, "Potion of Quickness", 1, "Potion of Alacrity", 1, "Bottled Wind", 1, "Bottled Ice", 1, "Bottled Fire", 1, "Bottled Ocean", 1, "Bottled Earth", 1], t12, t3));
      R.shop("The Droll Magery", P.LinkedHashMap_LinkedHashMap$_literal([_s28_, 1, "Scroll of Sidestepping", 1, "Scroll of Phasing", 1, "Scroll of Item Detection", 1], t12, t3));
      F.floorDrop(X._AllOfDrop$(H.setRuntimeTypeInfo([X.percentDrop(30, "Skull", _null, _null), X.percentDrop(30, _s8_0, _null, _null), X.percentDrop(20, "weapon", _null, _null), X.percentDrop(20, "armor", _null, _null), X.percentDrop(20, "food", _null, _null), X.percentDrop(15, _s5_, _null, _null), X.percentDrop(15, _s5_, _null, _null)], [L.Drop])), _null, C.SpawnLocation_2, 2);
      F.floorDrop(X.parseDrop(_s5_, _null, _null), _null, C.SpawnLocation_2, 5);
      F.floorDrop(X.parseDrop("food", _null, _null), 1, _null, 10);
      F.floorDrop(X.parseDrop("Rock", _null, _null), 0.01, C.SpawnLocation_3, 3);
      F.floorDrop(X.parseDrop(_s8_0, _null, _null), _null, _null, 10);
      F.floorDrop(X.parseDrop("light", _null, _null), 0.1, _null, 4);
      F.floorDrop(X.parseDrop(_s4_, _null, _null), 5, C.SpawnLocation_0, 2);
      t3 = $.$get$Decor_all();
      t3.defineTags$1("built/room/dungeon");
      t3.defineTags$1("built/room/keep");
      t3.defineTags$1("catacomb");
      t3.defineTags$1("cave/glowing-moss");
      t3.defineTags$1("water");
      t3 = S.Cell;
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["*", T.applyOpen($.$get$Tiles_glowingMoss())], t12, t3), _null, "glowing-moss");
      T.furnishing(_null, C.Symmetry_4, "    #\n    *");
      T.furnishing(_null, C.Symmetry_4, "    ##\n    #*");
      T.furnishing(_null, _null, "    ?.?\n    .*.\n    ?.?");
      t8 = $.$get$Tiles_candle();
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["!", T.applyOpen(t8)], t12, t3), _null, "catacomb dungeon");
      T.furnishing(_null, _null, "    ?.?\n    .!.\n    ?.?");
      tableCells = P.LinkedHashMap_LinkedHashMap$_literal(["\u250c", T.applyOpen($.$get$Tiles_tableTopLeft()), "\u2500", T.applyOpen($.$get$Tiles_tableTop()), "\u2510", T.applyOpen($.$get$Tiles_tableTopRight()), "-", T.applyOpen($.$get$Tiles_tableCenter()), "\u2502", T.applyOpen($.$get$Tiles_tableSide()), "\u2558", T.applyOpen($.$get$Tiles_tableBottomLeft()), "\u2550", T.applyOpen($.$get$Tiles_tableBottom()), "\u255b", T.applyOpen($.$get$Tiles_tableBottomRight()), "\u255e", T.applyOpen($.$get$Tiles_tableLegLeft()), "\u2564", T.applyOpen($.$get$Tiles_tableLeg()), "\u2561", T.applyOpen($.$get$Tiles_tableLegRight()), "i", T.applyOpen(t8)], t12, t3);
      T.category0(tableCells, _null, _s12_);
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #i\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #-\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    ?###?");
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    ?###?");
      T.furnishing(_null, _null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    ?####?");
      T.furnishing(_null, _null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    ?####?");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    ?#####?");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    ?#####?");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    ?#####?");
      T.furnishing(_null, _null, "    ?###?\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    ?###?\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    ?####?\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, _null, "    ?####?\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, _null, "    ?#####?\n    .\u2502---\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      T.furnishing(_null, _null, "    ?#####?\n    .\u2502-i-\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      T.furnishing(_null, _null, "    ?#####?\n    .\u2502i-i\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      T.category0(tableCells, _null, _s12_);
      T.furnishing(_null, _null, "    ?.....?\n    #\u2500\u2510.\u250c\u2500#\n    #\u2564\u255b.\u2558\u2564#\n    ?.....?");
      T.furnishing(_null, _null, "    ?.......?\n    #\u2500\u2500\u2510.\u250c\u2500\u2500#\n    #\u2550\u2564\u255b.\u2558\u2564\u2550#\n    ?.......?");
      T.furnishing(_null, _null, "    ?.........?\n    #\u2500\u2500\u2500\u2510.\u250c\u2500\u2500\u2500#\n    #\u2550\u2550\u2564\u255b.\u2558\u2564\u2550\u2550#\n    ?.........?");
      T.furnishing(_null, _null, "    ?##?\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(_null, _null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(_null, _null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      T.category0(tableCells, _null, _s12_);
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, _null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(_null, _null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i--i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(_null, _null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(_null, _null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, C.Symmetry_1, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502i-\u2502.\n    .\u2502-i\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(_null, _null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(_null, C.Symmetry_1, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---\u2502.\n    .\u2502---i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---i\u2502.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(_null, _null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(_null, _null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["\u03c0", T.applyOpen($.$get$Tiles_chair())], t12, t3), 2, _s5_0);
      T.furnishing(_null, C.Symmetry_3, "    \u03c0.\n    .\u250c");
      T.furnishing(_null, C.Symmetry_3, "    \u03c0.\n    \u250c?");
      T.furnishing(_null, C.Symmetry_3, "    ..\n    \u03c0\u250c");
      T.furnishing(_null, C.Symmetry_1, "    .\u255e\n    \u03c0.");
      T.furnishing(_null, C.Symmetry_4, "    ?\u2550?\n    .\u03c0.");
      T.furnishing(_null, _null, "    ?\u2564?\n    .\u03c0.");
      T.furnishing(_null, C.Symmetry_4, "    \u03c0\n    #");
      T.furnishing(_null, C.Symmetry_4, "    \u03c0\n    .\n    #");
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["%", T.applyOpen($.$get$Tiles_closedBarrel())], t12, t3), 0.7, _s5_0);
      T.furnishing(_null, C.Symmetry_4, "    ##?\n    #%.\n    ?.?");
      T.furnishing(_null, C.Symmetry_4, "    ?.?\n    .%.\n    ?.?");
      T.furnishing(_null, C.Symmetry_4, "    ###?\n    #%%.\n    ?..?");
      T.furnishing(_null, C.Symmetry_4, "    ###?\n    #%%.\n    #%.?\n    ?.??");
      T.furnishing(_null, C.Symmetry_4, "    ?##?\n    .%%.\n    ?..?");
      T.furnishing(_null, C.Symmetry_4, "    ?###?\n    .%%%.\n    ?...?");
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["&", T.applyOpen($.$get$Tiles_closedChest())], t12, t3), 0.5, _s5_0);
      T.furnishing(_null, C.Symmetry_4, "    ##?\n    #&.\n    ?.?");
      T.furnishing(_null, C.Symmetry_4, "    ?#?\n    .&.\n    ?.?");
      t8 = $.$get$Tiles_steppingStone();
      T.category0(P.LinkedHashMap_LinkedHashMap$_literal(["*", S.Cell$(t8, _null, $.$get$Tiles_water(), _null), "o", S.Cell$(_null, _null, t8, _null)], t12, t3), _null, "water");
      T.furnishing(0.6, C.Symmetry_4, "    .*");
      T.furnishing(0.6, C.Symmetry_4, "    ..\n    .*");
      T.furnishing(_null, C.Symmetry_4, "    o*");
      T.furnishing(_null, C.Symmetry_4, "    \u2248*\n    o\u2248");
      return new T.GameContent();
    });
    _lazy($, "save", "$get$save", function() {
      return $.$get$content().createHero$1("hero");
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, DOMImplementation: J.Interceptor, MediaError: J.Interceptor, Navigator: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, PositionError: J.Interceptor, Range: J.Interceptor, SQLError: J.Interceptor, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, HTMLBodyElement: W.BodyElement, HTMLButtonElement: W.ButtonElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, DOMError: W.DomError, DOMException: W.DomException, DOMRectReadOnly: W.DomRectReadOnly, Element: W.Element, HTMLEmbedElement: W.EmbedElement, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventTarget: W.EventTarget, HTMLFieldSetElement: W.FieldSetElement, HTMLFormElement: W.FormElement, HTMLIFrameElement: W.IFrameElement, HTMLImageElement: W.ImageElement, HTMLInputElement: W.InputElement, Location: W.Location, HTMLMapElement: W.MapElement, HTMLMetaElement: W.MetaElement, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, NavigatorUserMediaError: W.NavigatorUserMediaError, Document: W.Node, DocumentFragment: W.Node, HTMLDocument: W.Node, ShadowRoot: W.Node, XMLDocument: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, HTMLObjectElement: W.ObjectElement, HTMLOutputElement: W.OutputElement, OverconstrainedError: W.OverconstrainedError, HTMLParamElement: W.ParamElement, HTMLSelectElement: W.SelectElement, HTMLSlotElement: W.SlotElement, SpeechSynthesisEvent: W.SpeechSynthesisEvent, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, HTMLTextAreaElement: W.TextAreaElement, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, KeyboardEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, Window: W.Window, DOMWindow: W.Window, Attr: W._Attr, ClientRect: W._DomRect, DOMRect: W._DomRect, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SVGScriptElement: P.ScriptElement, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({CanvasGradient: true, CanvasPattern: true, DOMImplementation: true, MediaError: true, Navigator: true, NavigatorConcurrentHardware: true, PositionError: true, Range: true, SQLError: true, HTMLAudioElement: true, HTMLBRElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLParagraphElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, DOMError: true, DOMException: true, DOMRectReadOnly: false, Element: false, HTMLEmbedElement: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventTarget: false, HTMLFieldSetElement: true, HTMLFormElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, Location: true, HTMLMapElement: true, HTMLMetaElement: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, NavigatorUserMediaError: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLObjectElement: true, HTMLOutputElement: true, OverconstrainedError: true, HTMLParamElement: true, HTMLSelectElement: true, HTMLSlotElement: true, SpeechSynthesisEvent: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, CompositionEvent: true, FocusEvent: true, KeyboardEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, Window: true, DOMWindow: true, Attr: true, ClientRect: true, DOMRect: true, NamedNodeMap: true, MozNamedAttrMap: true, SVGScriptElement: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false});
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(Q.main, []);
    else
      Q.main([]);
  });
})();

//# sourceMappingURL=dungeon.dart.js.map
